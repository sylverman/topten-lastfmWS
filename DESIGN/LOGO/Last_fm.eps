%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: lastfm_Logo.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Hannah Donovan
%%CreationDate: 6/26/09
%%BoundingBox: 0 0 559 837
%%HiResBoundingBox: 0 0 558.9170 836.6768
%%CropBox: 0 0 558.9170 836.6768
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 1797 U)
%%CMYKCustomColor: 0 1 0.9900 0.0400 (PANTONE 1797 U)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">lastfm medium def</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-07-25T17:10:36+01:00</xap:CreateDate>
         <xap:ModifyDate>2009-06-26T15:04:10+01:00</xap:ModifyDate>
         <xap:MetadataDate>2009-06-26T15:04:10+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>172</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAACsAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A5Z+UWoX7/mh5WR7mVkbU&#xA;7YMrOxBHqDqCcUvvzFDsVdirsVdirsVdirsVSXzD518o+XCg13WLPTXlXnFFczJHI6g0LIhPJhXw&#xA;GKq/l3zPoPmTTv0lod4l/Y82iFxHy4l0pyA5AdK4qmeKuxV2Kvj/AP5yI/OfzHqXmzUPK+kXsljo&#xA;elSta3C27mN7iePaX1WWhKo4KhOm1T7KsWs/+cffziuNMi1m30VwsiCeJDPDHc0O4Pps6uG70O+K&#xA;X19+VGmavpn5c+X7PWHnfU0tEe6+tM7TK8pMnpuXqwMfPhQ9KUxQyvFXYq7FXYq7FX5+fk//AOTT&#xA;8qf9tO2/5ODFL9A8UMM8/fm95F8iqqa5fH68684tOtl9W5ZT+1wqAo8C7AHFXmT/APOY3k4T8U0L&#xA;UTBv+8LQB612+AOR/wANirO/In5+fl15zu0sLG7ksdTlNIbC/QQySHwjZWeNj/khq+2KvRcVeWed&#xA;/wDnJD8uPKl/LprSz6tqMDFJ4bBFdI3GxV5XaNKjuFJp3xVi9h/zmH5Hln4Xuj6jaxE0EqejLQdi&#xA;y80P3VxV61pfn7ytq3lS4806VeC+0m2hlnmaEfvFEKGR0aNuJVwv7LUxV8if85B/mf5b8/61pV7o&#xA;S3CQ2Vs8MwuY1jbk0nIcQrPtTFLM/wAjvz88jeSfIkeh6zHeterczTE28KOnGQjju0iGu3hih79+&#xA;Xf5l+XfP2m3Wo6GtwlvaTfV5Rcosbc+AfYKz7UbFWV4qxD8xvzR8tfl/Z2d3rqXLxX0jRQ/VY1kP&#xA;JF5HlyZKbYq+FtT1bT73zrd6uyu2n3OpSXbKw+MwyTmShFevE+OKX15of/OT/wCW+s61p+j2kWoi&#xA;71K5htLcyQRqnqTyCNOREpoOTb7YoR/m/wD5yG8g+U/NF15b1VL36/ZmITPFCjRfvoklUhjIp+zI&#xA;K7YqiPzG/PfyL5Euxp+oSTX2rcQ7afZKrvGGFVMrOyIletK8qb0xVjHlj/nLD8vtX1KKx1C2u9GM&#xA;7BI7q4Eb24JNB6jo3JO2/Gg7kYqzf8w/zf8AJXkKCE61cvLeXK+pbafaqJZ3TpzoSqqtehZhXtXF&#xA;Xnmmf85f+Q7i9EN9peoWNuxoLqkUoUeLorcgP9Xlir2b/EugfoD/ABD9fh/QnofWv0hyHpejSvPl&#xA;/me2Kvg78n//ACaflT/tp23/ACcGKX3T528yw+WPKWra/KocadbSTJGejyAUjQ0/mchcUPhjynoH&#xA;mH80fzEjtJ7ovf6rM9xqF+45enEo5SPSv7Kjii/IYpfVNr/zi9+T8OnLay6ZPc3AXi1/JdXCzE/z&#xA;cUdIa/7CmKHzX+dP5UXX5b+ZoI7SeSfSL0GbS7xvhkUxkc43ZaDnGSDUdQQcUvevLH5tarrv/OPG&#xA;ta4JS3mPR7Seyup1JD+qEAjudt+RSQPXpyBxQ+fvyN8o+WvNv5h2mkeY5SLB45ZVgDmM3EqAFYeY&#xA;IYctz8Jrttil7/8Amd/zjD5Sv/L0knkrT107X4WQwR+vIYZl5AOknrM4WiksGHcUxQt/I/8AJLzp&#xA;5TtvMFh5lurb9Da/Zm2ktLSZ3lWQgpz+KMRr+7kYVBPbFXjP/OQf5YeW/IGtaVZaE1w8N7bPNMbm&#xA;RZG5LJxHEqqbUxSzP8jvyD8jedvIkeuazJeretczQkW8yInGMjjs0bmu/jih79+Xf5aeXfIOm3Wn&#xA;aG1w9vdzfWJTcusjc+ATYqqbUXFWV4qxD8xvyu8tfmBZ2dprr3KRWMjSw/VZFjPJ14nlyV67Yq+G&#xA;b3RbOHz1PoaF/qUeqPZKSRz9JbgxDen2uPtil9c6H/zjB+W+ja1p+sWkuom7025hu7cSTxsnqQSC&#xA;ROQEQqOS774ofOv/ADkp/wCTq8x/9GX/AFAQYpenflV/zjxpnnDQU85eeL26ur7XC1zDbwuI6RsT&#xA;xeRuJJZ6VULQBafQoeSfnd+WkH5fec/0VZzyXGm3Vul5YyTU9RUdmQxuVADFWjO9BtTFL0H8l/yV&#xA;X8yrB/NnnS+uprNOFhp8EbhXkS0jWIM8hDfAgUIANyQST4qGN/8AOQn5PaV+X2o6ZcaLLK+k6qso&#xA;WKdg7xTQceQ5ALVWEgIrv1xShf8AFV//ANC3/oX1X4f4j9Dr8P1b6t9Y9Pr/AL/+LFWOfk//AOTT&#xA;8qf9tO2/5ODFX1p/zku86/kxr3pAFWazExrQhDeQ9P8AZUGKHif/ADh6Lc/mDqpenrjSn9KvWn1i&#xA;HlT8MUl9d4oeSf8AOT/lT9Oflfc3sUYa70OVL6MgVb0h+7nAPhwfmf8AVxV4n/zi7rNlJ5i1nyVq&#xA;nx6X5psZIWhJoGliVvhFehaF5OngMVKn51/5xc/MPRL6Wby9GNd0xW5wSwukd0i12DxOUqw/4rrX&#xA;rt0Cm2NQfmB+dvkO7it7nUNW01k3js9TWR4yo2PGO6DLx91+jFX03+RP51D8w9PubTUYUtfMOnKr&#xA;3KRVEU0THiJYwSStG2Za+FOtAoeTf85kf8pT5e/5gZf+T2Kh6b/zin/5KWH/AJjrn9a4q9hxV2Ku&#xA;xV+fOqf+TYu/+29J/wBRhxS/QbFD4Z/5yU/8nV5j/wCjL/qAgxS+wPyv/wDJaeUv+2Lp/wD1Cx4o&#xA;fN//ADmL/wApzov/AGzB/wBREuKh7T/zjWB/ypXy77/Xa/8ASdPirzz/AJzN/wCOb5V/4zXn/EYc&#xA;VeJ/+UU/8GT/ALEMUpL5Q1r/AAv500rV7q3eT9EXsU9xbA8XPoyAum/RtsVfYtt5o0H86/y68yaf&#xA;osFzawuhs45L1Y0P1kIJo24xyS/Cr8K4ofJfkvzPrv5befodRktWjvdMle31HT5fgZoz8EsTdaGm&#xA;6nxocUvqmH/nKb8on0xbt726iuSPi042spmBp05KDD/yUxQx/wAk/wDOQNr+Yn5gXHlK508WnlnV&#xA;rG4trWKUgzyy8eTeqwPFQ8IcBV79zir5883+V/NH5XefREDJb3NhcC60fUKfDNEj1ilX9k1pR18a&#xA;g4pfSHk7/nK/yBqNhGPMvq6HqSik9Ipbi3ZgOsbQiSQA+DLt4nrihjn55/nv+V/mPyLfaBpDyaxf&#xA;3RjNtN9XkhjgdHVjJynWN6hQQOK718MVY7/zh3pV8/nTWdWWNvqEGmm1kl/Z9aaeKRFr48YWOKUy&#xA;/wCcytMuRqXlvVApNq8NxalwNlkRlkAJ/wAoOafI4oCD/IT8/PKPkzyfL5f8wRXMckVzJcW09vGJ&#xA;VdJQtVYclKsGB9qYq9y/Kr83NJ/MVNXm020ltIdMnSJBOymSSOVSUkZFqEqVYU5Hp1xV8z/mD/zk&#xA;H+Zs/nTUTpmqy6VYWV1LBZ2MKoFVIXKgyhlPNm41blt26Yq+pfyj843vnH8vdI8w30SxXt0kiXIQ&#xA;EI0kErws6g9mMfL26Yq+KNU/8mxd/wDbek/6jDil+g2KHwz/AM5Kf+Tq8x/9GX/UBBil9gflf/5L&#xA;Tyl/2xdP/wCoWPFD5v8A+cxf+U50X/tmD/qIlxUPav8AnGv/AMkr5c/6Pf8AqPnxV53/AM5m/wDH&#xA;N8q/8Zrz/iMOKvE//KKf+DJ/2IYpfU3nj/nGv8u/Neqz6u31rS9RumMlw9k6LHJIxqzvHIkg5N34&#xA;0qd8UMp/Lf8ALLy9+X2k3GmaJLczQ3U31iaS7dHcvxCbemkSgUXwxVB/mB+S/kLz1J9Z1izaHUgA&#xA;o1OzYRXHECgDEhkenbmpp2xV5yv/ADhz5M9fk2uaiYNv3YEAfrv8fAjp/k4q9G8h/kt+X3kiUXWj&#xA;2Bk1IAr+krtvWuADseJICJUbHgoriqf+a/JflfzZp36P8w6dFf2wqY/UBDxsRQtHItHQ+6kYq8j1&#xA;P/nEDyBPIz2Gp6lZcukbNDMg+XKNW+9sVb0r/nEH8vraVZL/AFHUb8LSsXOKGNj3rwQvT5Nir2Ly&#xA;75a0Hy3pUelaHZR2GnxElYIgd2PVmYkszHuzEnFVLzZ5R8v+bNFl0bXrRbuxlIYKSVZHWvGSNxur&#xA;rXqPl0xV4zP/AM4deSmuS8Ot6jHbmtIm9B2Fenx8F6f6uKvTPy4/Kbyj+X0F1HoK3DTXvAXdzcy+&#xA;pJIIq8AQoSMcebfZQdcVY95t/wCcbfy38z+Ypdeu1vLS6uXMt5DZypHDNITVndXjkYFu/Blr164q&#xA;9H0bR9M0XSrXStLt1tdPs4xFbwJ0VR89yT1JO5OKvMZ/+cY/y4m16TXHl1H67JdG9YCePh6rSeqd&#xA;vS+zy98VetYq8w85/wDOO3kHzf5lvPMWqyX63996frCCZEj/AHUSQrxUxsR8MY74q9C0PSLXRtF0&#xA;/R7QsbTTbaG0tzIQz+nBGI05EAVPFd9sVYb+Yn5J+TvP2qW2pa5JeLcWsH1aIW0qRrw5s+4ZH3q5&#xA;xVkvkzyjpXlDy1Z+XdKMrWFj6nomdg8n72V5m5MAoPxSHtiqT/mP+VPlj8wYbGHXXuUTT2keD6rI&#xA;sZrKFDcuSPX7AxVjX/QtP5d/4a/w76uofUPrn6Qr68fqet6Xo/a9KnHj2pir1fFXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVoliMhjDqZFFWSo5AHuRgsXSeE1f&#xA;RdhQ7FXYq7FXYq7FXyD+XN5dt580BWnkZTfQAgsxB+Me+c/iHrj7x97692vjiNJl2H0H7n19nQPk&#xA;LsVdirsVdirsVdirsVSzWfNHlzROI1bUraxdxyjjmlVHZRtVUJ5EfIZXPLGPMuVp9Fmzf3cJS9wV&#xA;NF17SNcsvr2lXK3dpzaP1kBC8l6j4gPHDjyRmLix1OlyYJcOQcMkfk3HdirsVfNv5zfmdrd95hvN&#xA;B066ktNK0+RreZYWKNNKhpIZGXfirVUL02rmn1WcykY9A+kezvYuKGGOWYEskxe/QdK/WkNt+Tv5&#xA;lTWMepw6W4V1EsamWJJ6HcHgXDg96dcqGmyEXWznz9oNEJmBn5cjXzp9H/l7Y6jY+StHttSaVr5b&#xA;dWuPrBZpVaSr8G5b1TlxoelKZttNEjGAXzjtbLCepnKFcPFtXLu+3myHL3XuxV2KuxV2Kvjv8t/+&#xA;U+8v/wDMfB/xMZz+L64+8fe+w9sf4pl/qH7n2JnQPjzGPN/5keU/KgCardE3bDkllAPUmI8eOwUe&#xA;7EZRl1MIbHm7TQdj6jVb4x6e87D8e5gjf85LeXBNRNIvDD/OWiDf8DyI/wCGzF/lAXyd6PY3NX1x&#xA;v4st8p/m/wCSvM1ylna3D2l/JtFaXaiNnPgjAujH25V9svx6uEzXIuo1/YGp00eKQ4oDrHf9rNcy&#xA;nSvP/NX53eSvL93JY85dRvYiVljtFVlRgaFWkdkWo/ya5iZNbCJobvQaH2b1OoiJbQif536khs/+&#xA;ck/K0kvG60y8gjJoJE9OSg8SOSfhlQ7QHUOfk9js4HpnEn4h6Lp/m/QNR8vTa/p9yLrT4InmlMY+&#xA;NfSTmyMhoQ4HY5lDPExMhyDzuXs/LjzDDMcMyQPnt8nzl+cfnvRPOGqafdaSsyx2sDRSCdAh5F+W&#xA;1GbNVqcwySsdz6L7PdmZdJjlHJVyN7Mm/Kr83vKvlbymmlaml010J5ZSYY1dOL0puXXw8Mt02qjj&#xA;iQQebre3OwNRqtR4kOHhoDc/sev+S/POi+b7Ge80pZlht5fRkE6BG5cQ2wDNtQ5sMOcZLp4/tHsz&#xA;LpJCOSrIvZkOXOvY5518+6H5Ptra41ZZ2ju3aOL0EVzVRU15MuUZtQMdXe7suzuy8usJGOvT3vk+&#xA;+1C0ufM9xqLBms5717gqR8RieUvQivXifHNHLd9XxYpRwCH8QhXxp9G6V+fHknU9Us9Nto70XF7P&#xA;HbQl4kC85XCLyIkO1Wzbx1sZECjv7v1vnOf2X1WKEpyMKiCTv3b9yL8yfnN5Q8u69caJqCXX1u2M&#xA;YlaONWj/AHsayLRi6n7Liu2HLrIwlwkFp0fs7qNRiGWHDwyvrvsa7vJX87fm15U8pXAs7t5LvUaB&#xA;ms7YKzID0MjMVVa+Fa+2SzaqMDXMsOzewdRqxxRqMO8/oSHQf+chfKGo30dpe29xpnqsFS4l4PCC&#xA;TQc2U1X58aeOVQ18SdxTn6r2T1GOJlExnXQc/gyrzn+ZPlfyjFEdTmaS5nHKGztwHlZf56Eqqr7s&#xA;RXtl2XUxhzdV2d2Pn1ZPAKA5k8mGWH/OSPlOa6Ed3p95aQMaCf4JAB4sqkMPormPHXi9w7nL7H6g&#xA;RuMoyPduHpv6e0f9Dfpr65F+ivS9f65y/d+nSvKv8OvbM3xI8PFezzP5XJ4nhcJ8S6rrb5J/Lf8A&#xA;5T7y/wD8x8H/ABMZosX1x94+99a7Y/xTL/UP3PrDzTrkeg+XdR1h1DCygeVUPRnAoi/7JiBm8zZO&#xA;CJk+UaHTHPmjjH8Rr9b5R8u6PrHnzzmltLOWu9Qkaa8u3FeCD4nem3QbKPkM0kImcq6l9W1eox6H&#xA;TcQHpgKA+59AW/5D/ltFZC3ksJZ5aUN29xMJSfGiMsf/AAubQaLHVPAT9qNaZWJADu4RX6/teH/m&#xA;f+X0/kjXYkt5Xl066BlsLltnBQjkjEUHJKjceIzW58Jxyro9v2L2sNbiJIqcdpD9PuL1zQvzEv8A&#xA;VvyZ1TVBKTrem20trcSqfj9QKAk/z4uGr/MDmbHUE4T3jb9ryWp7Ihi7Shjr91OQI/TH9HuePflT&#xA;5d0PzD5zttO1tyLR0kcRByhmkUfDHyBB367b7Zg4ICUwDyew7c1eXT6YzxfVt8B3vYPPf5E+XbzR&#xA;XbyvZLZaxEVMS+q/pyryAZX9RmAopJBGZ+bRR4fQN/x3vH9l+0+aGX9/LixnyFj5Lfyr/KzzP5eh&#xA;1mz1y4g/Rmr2xge3tpHaQOarz+JAg+B2Fantg0+lkLEuUhSe3O28GoOOWIHjxyuyNvvvm8y/OPyJ&#xA;onk/VNPtdJaZo7qBpZDO4c8g/HairmJqcIxyodz03s92nl1eOUslXE1syb8qvyh8q+afKaarqb3S&#xA;3RnliIhkVE4pSmxRvHxy3TaWOSJJJ5ut7c7f1Gl1Hhw4eGgdx+16/wCS/I2i+ULGez0ppmhuJfWk&#xA;M7h25cQuxCrtQZsMOAY7p4/tHtPLq5CWSrArZkOXOvY5518haH5wtra31Zp1jtHaSL0HVDVhQ15K&#xA;2UZtOMlXezsuzu1MujJOOvV3vlC60y2i81y6WvL6sl81qCT8Xpib0+tOtM0ZFPq0M0jgGT+Lgv7L&#xA;fRmlfkP5J0zVLPUraS9NxZTx3MIeVCvOJw68gIxtVc28dFGJBs7e79T51n9qNVlhKEhCpAg7d+3e&#xA;8Y/O/wD8mhrX/Rr/ANQkOYOr/vD+Oj2fs1/iOP8Azv8AdSZ1+X/5M2PmXSF8y+arqe4utVJnihic&#xA;JRGOzu1DUt1AFAB+Fun0gnHikebou1faKemyeBpwBGG2/wCh53+afkeHyd5n/R9rK81jcQrc2rSU&#xA;LhWZlKMQACVZD26UzHz4vDlT0XYfaZ1mDjkKkDRZj+WP5Xr54tH8w+Z7ueS2XjaWcSMFd1t0WMFn&#xA;Ib4VACim5IP03abTeJuTs6ftrtr8lLwcERxfUfLiN/Pqkn5x/ltp/k69sZtLkkfT9QWQCOYhmjki&#xA;41HIAVVg4p9OQ1ODwyK5FzfZ7tiesjIZAOOFcuoKG/xBd/8AKlP0Xzbj+mvS6/D6Hoetw6/79+LI&#xA;cf7vh/pNn5SP8p+J/tX28VX8kl/Lf/lPvL//ADHwf8TGQxfXH3j73N7Y/wAUy/1D9z6I/PJpV/LH&#xA;VvTHwlrYSHoQv1mPp9NBm21l+GXzz2ZA/PQv+l/uS8u/5xtEP+MtQLU9Uae/p1609aLlT8MwtD/e&#xA;fD9T1Hthf5aPdx/oL6NzbvnLzr8+PL/6V8hz3UaBrjSpFu0NPi9P7Eo+XFuR/wBXMPXQuF9z0Xsv&#xA;q/C1YieWQcPx5j9XxeXfkLqVq+tan5Yv/isNftHiaMmnKSNW2FfGNnzC0hHEYnlIPU+1GGQxQzw+&#xA;vFK/gf20s80fkJ5z0q6kk0dBq1gp5QyRMqTqtdg8bFasP8iuOTRzjyFhOi9qNNliBk/dy8+Xz/Wk&#xA;cfm780vKVwkM95qFiy/Ytr0O0ZA/lScMtP8AVyoZJwNWR+O5zjoNDq42Iwl5xq/mHun5TfmgPOVn&#xA;PbXsSwazZKGmWOvpyxk0EiA140OzD/MbPS6nj2PN4Xt7sT8nISibxy5d4Pc88/5yX/47+j/8wj/8&#xA;nMxNf9Y9363ofY3+5n/W/Qzr/nH3/wAl5H/zFz/rXMnQfQff+p0ftX/jh/qh6Vma807FXYq+Ob//&#xA;AMmDcf8AbWf/AKiTnOy5l9jxf4oP+F/719jZ0T44+Uvzv/8AJoa1/wBGv/UJDml1f94fx0fVvZr/&#xA;ABHH/nf7qT6Q8h/8oN5d/wC2ZZ/9Q6ZtsP0D3B837U/xrL/wyf8Aui8S/wCclP8AlLNM/wCYAf8A&#xA;J6TNZrv7z4fre29jv8Xn/X/QHqH5Hgf8qv0X3+s1/wCkuXM7Sf3Y/HV5j2l/x7J/m/7mLDP+cm/9&#xA;4vL/APxluf8AiMeY3aHOPx/Q7n2M+rL7o/peW/8AlMP+33/2KZg/w/F6n/kd/wAkv98lnlzU/wBA&#xA;+Z9P1G4hZ/0ddRyzQD4WPpOCy79DtghKiD3FydZh8fBKAP1xIv3vpSDX9J/NLyXrlnpkM9vGyG2R&#xA;7oIp9fiJENEeT4VbjXfNqZjPCQD5tLS5Oy9TjlMgnn6b5cjzA83zx5Y13VvJHm6K9e3ZLqxkaG8s&#xA;5PhLIfhkjPgfA+NDmrhMwlfUPoet0uPW6cxv0yFg/cXv8f5+/ly1iLl7meOcjeyMEhlBp/MB6X/D&#xA;5tPz0Kvd4A+y2sE+GhXfYr9f2JP5W/OGDzn5wm8uz2YttC1G1mgt45CDNJJxq3qMNhyjDDiPvOVQ&#xA;1PiT4T9JFOZrvZ86PTDMJXlhIE9w93xp455k0DXfIfm4R1eGezmFxpt5TaSNWrHIOx6fEPGozBnC&#xA;UJUeYex0eqxa7T3zEhUh3HqP1PbPLX/OQvlC9tIxrgk0u9ApKRG80JIHVDGHeh8CubHHron6ti8T&#xA;rPZPUQkfCqcfeAft2Sb81/za8h635Tu9I01m1K7uOHoSmF40iZXDF+UqowNAR8I/DKtVqYTjwjdz&#xA;ewuwdXh1Eck/REXe935bJN/zjXp923mfU9QCH6pFZG3eTt6kssbqP+BibI6Aes+5zPbHLEYIQ/iM&#xA;7+AB/WjP+cmLCcX2iX9CYGimgLU2DqwcAn3DbfLHXx9QPk0+xuUcGSHWwUN+UX5veXPLHluTR9Yj&#xA;nR45nmgmhQSKyyAVUioIYEfLBptSMYIIbe3+wM2pzDJjI5Ub25PVvy//ADF0/wA6LqUllbPbxWEq&#xA;Rp6rAu6SKSrsq7LUq21Tmbg1HiXtVPKdq9kT0XAJGzIdPJ4b5x/OLz1L5nvfqOoSafaWs7xW1pGq&#xA;gBY3Kj1AwPJjSp5ZrcmpmZXdPc9n+z+lGCPFETlIAk+/ue+flz5luvMvkzTdYu0CXU6us/EUVnik&#xA;aIsvs3Cvt0zaafIZwBPN4HtfRx02pnjj9I5fEW+Xb/8A8mDcf9tZ/wDqJOaSXMvqOL/FB/wv/evs&#xA;bOifHHyl+d//AJNDWv8Ao1/6hIc0ur/vD+Oj6t7Nf4jj/wA7/dSfSHkP/lBvLv8A2zLP/qHTNth+&#xA;ge4Pm/an+NZf+GT/AN0XiX/OSn/KWaZ/zAD/AJPSZrNd/efD9b23sd/i8/6/6A9Q/JD/AMlfov8A&#xA;0df9Rc2Z2k/ux+OrzHtL/j2T/N/3MWGf85N/7xeX/wDjLc/8RjzG7Q5x+P6Hc+xn1ZfdH9Ly3/ym&#xA;H/b7/wCxTMH+H4vU/wDI7/kl/vnv/mj8kPJXmDUZdRcXFhdzsXna0dFV3O5ZkdJBU9+NK5tcmjhI&#xA;3yeA0XtLqdPAQHDKI5cXT5EJ95J8i6N5O0+ax0uSeWO4l9aR7lldy3EL+wqClB4ZbhwDHdOB2l2n&#xA;k1kxLIACBW39pQ3nD8sPKPmtxPqVs0d6AF+vW7enMVAoAxoytTtyU5HLpoTNnm29n9tajSioH0/z&#xA;TuPx7mFj/nGryt6tTqt8YtvgHohqV3+LhTp7Zj/kBfN3J9sc9fRC/j+tmvlL8sfJ/laT19NtC97S&#xA;n124b1ZgDseJ2VP9iozIxaaENxzdLr+2tTqhU5enuGw/b8U38weWNB8w2f1PWbKO8gFSnMEMhPUo&#xA;60ZD/qnLMmKMx6g4mk1uXTy4sUjE/jmOrzm9/wCcb/J0she1vr62Br+7LRyKD2pVA33nMQ6CPQl6&#xA;LH7YakD1RhL5j9K6x/5xw8mQyh7q8vrpRSkXOONT414py+4jEaCPUlcvtfqSKjGEfmf0vSdF0PSN&#xA;E09NP0m1S0s4ySsUY6k9WYmrMT4k1zMhjjAUA81qdTkzz48h4pKfmHy5o/mHS5NM1a3FxaSUPEkh&#xA;lcfZdGG6sK9cGTGJiiy0mryafIJ4zUg8zl/5xr8qtMWj1O+SE1pGfSZh0/a4D9WYZ0A73po+2Oet&#xA;4Qv4/rZx5K/Lzy75OinTSRM0l1xFxPPJzdwleNQoVBTkei5k4dPHHydH2l2tm1hHiVUeQA/B+1Jv&#xA;MX5I+Sde1qTV7gXNvcTt6lzHbSKkcrnqzBkcgt34kZXPRwkb3czSe0mqwYhjjwkDlY3H2/ezbTNM&#xA;sdL0+DT7CFYLO2QRwxL0VR8+vucyYQERQ5OlzZp5Zmczcpc2Ey/kf5Fk1V9TZLn6085uWImPH1C/&#xA;PpTpXMQ6GBPMu7j7S6oY+D08NVy6cmf5mvPsI8yfk75N8w61caxqKXBvLrh6pjl4r+7jWNaLT+VB&#xA;mLk0kZy4iS7zR+0Gp0+IY4cPDHy7zbLtM0+303TbTTraotrKGO3gDGrcIkCLU9zQZkRjwgDudRmy&#xA;nJOU5c5Ek/Fjnm/8sfK/my+hvdXWZp4IvRj9KTgOHItuKHu2UZtLHIbNux7P7az6SJjjqib3CdeW&#xA;/L2neXtFt9H04OLO15+kJG5N+8kaRqt/rOcux4xCPCHC1mrnqMpyT+qX6BSXecfIXl/zdHax6wsr&#xA;LZl2h9J+G8gAauxr9kZXm08clX0cjs/tTNpCTjr1c7Hckv8AypPyP+hv0Pwufqf1n63T1jy9Xh6f&#xA;WnTjlX5GFVZc7/RJqvE8T08XDw8ul2z3Mx0DsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVYZe/lxLc6hb3CeZdYgtouXq2cVyURqmqhfTCKtN1NVao8DvhVR078rpbe2e2uvNOt3U&#xA;TRvCEN0VX02SaIAqQ4qqTjcU+JFNNqYFai/KpQVebzTr7SKskYMd8YlEcj8uKhVJWihVqp7Yqibj&#xA;8s7OdbUvr2tieyWVbe6W+b1QJozGeTFTzKg1UtWh3xVRs/yrt7S5E8PmbXwPrAu5IvrqhJJBTl6g&#xA;WMFw9ByDHfFV9z+Wpmnglj8xatZBLVLSeOzuDCr+lAYEkUfFwI5F6b/FQ+NSqk35VxrdRy23mPWb&#xA;ZeRa6aO7YTXBoAvqy/tcOI41U9W8RxbVUufyutZvUKeYdctjOvG6MN4q+sfTSPlJWNgW4xjf3Pjj&#xA;asevIbTRtRuJZtR85XZ0y9hjYCUPb3DTW7P8IIRWhjWM8z8NG8a4qkMS+V79JHstU82TW73fAwwk&#xA;rJBOQpecgrWIxrMtBwWQFT1xQj3l0eLRLkl/N9tb2so9V0NJYf3E6I8RCVJdJ6njX41Wp2HJVFWu&#xA;qaKLi2u7aHzNMUH1N3lVXZYokPAmNq/DKl4aN1/d12O7qpfqmn6Ys11aadqfnH6wvNbXUrRvUtib&#xA;8wP6kQhMQKVugafDurftBaqsssPJFrrekW+qWOs6/o36S4XkkH1qSGQepuyvCS4RuB47HagPxb1U&#xA;op/yutnaaT/Emviean+kC/rIgAA4xsUPBdtwOtTjatTfldbyiRZte1adZlaN5J7hXmRDFJEFhlCK&#xA;yU9UtU8t8bVp/wArLdypbzN5grGZGipf04GStCgEdE4KSq8f2dumBWv+VYzNpNhaSeZ9Y+vWT831&#xA;GO5dJJQ8kTyqwqxo6wkU5UBYmnQBVfF+V1tBCkUOv6uyRx3CRxT3CSw8rmMxs7xmMVYc2NQQdzvv&#xA;htVa/wDy1sbue5kj1nV7JLySWW5t7W6EcLmaQSMDHwK9uPiVJBJGC1UtN/LQ6fqtveReZNZmtYkk&#xA;EljcXTOjyyEfvtuADfa5fDuWJ61OKpl/gm1/QP6G/Smpel9b+vfW/rH+k8/rH1nh6vGvDn26074q&#xA;/wD/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:F82EE824FE5BDD118679F4803E0A7CD6</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:08D1C6CEF463DE11A347C0A27A150833</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:F72EE824FE5BDD118679F4803E0A7CD6</stRef:instanceID>
            <stRef:documentID>uuid:F52EE824FE5BDD118679F4803E0A7CD6</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.000002</stDim:w>
            <stDim:h>419.999945</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 1797 U</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 1797 U</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>99.000000</xapG:yellow>
                           <xapG:black>4.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -836.677 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 836.677 li
558.917 836.677 li
558.917 0 li
cp
clp
[1 0 0 1 0 0 ]ct
3.87842 812.683 mo
3.87842 818.786 li
7.04492 818.786 li
7.04492 819.746 li
2.77539 819.746 li
2.77539 812.683 li
3.87842 812.683 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
8.88281 816.952 mo
8.88281 818.343 9.37451 819.038 10.334 819.038 cv
11.3052 819.038 11.7969 818.343 11.7969 816.952 cv
11.7969 815.597 11.2935 814.948 10.334 814.948 cv
9.38623 814.948 8.88281 815.597 8.88281 816.952 cv
cp
7.81543 816.939 mo
7.81543 815.057 8.81055 814.073 10.334 814.073 cv
11.8691 814.073 12.8643 815.057 12.8643 816.939 cv
12.8643 818.835 11.8691 819.89 10.334 819.89 cv
8.81055 819.89 7.81543 818.835 7.81543 816.939 cv
cp
f
16.1182 817.191 mo
16.8496 817.191 17.3296 816.808 17.3296 816.028 cv
17.3296 815.249 16.8496 814.853 16.1182 814.864 cv
15.3867 814.864 14.9546 815.284 14.9546 816.028 cv
14.9546 816.724 15.3745 817.191 16.1182 817.191 cv
cp
16.0103 821.509 mo
17.1377 821.509 17.8691 821.294 17.8691 820.598 cv
17.8691 820.178 17.6411 819.866 16.9336 819.866 cv
15.7344 819.866 li
14.9429 819.866 14.499 820.13 14.499 820.706 cv
14.499 821.294 15.1348 821.509 16.0103 821.509 cv
cp
17.7251 814.517 mo
17.9893 814.373 18.0732 814.085 18.145 813.677 cv
19.0806 814.001 li
18.9966 814.528 18.6128 814.889 18.1567 814.997 cv
18.3247 815.284 18.4087 815.632 18.4087 816.04 cv
18.4087 817.323 17.3774 817.959 16.1299 817.959 cv
15.854 817.959 15.5664 817.923 15.4106 817.863 cv
15.1348 818.007 15.0386 818.198 15.0386 818.438 cv
15.0386 818.751 15.2427 818.895 15.6265 818.895 cv
16.9814 818.895 li
18.2407 818.895 18.9126 819.446 18.9126 820.442 cv
18.9126 821.894 17.3535 822.276 15.9023 822.276 cv
14.6787 822.276 13.4795 821.965 13.4795 820.825 cv
13.4795 820.106 13.9951 819.626 14.9067 819.554 cv
14.4028 819.494 14.1392 819.134 14.1392 818.69 cv
14.1392 818.247 14.3672 817.875 14.9546 817.72 cv
14.2832 817.419 13.8755 816.855 13.8755 816.04 cv
13.8755 814.793 14.7866 814.073 16.1182 814.073 cv
16.7778 814.073 17.3174 814.218 17.7251 814.517 cv
cp
f
20.5229 816.952 mo
20.5229 818.343 21.0146 819.038 21.9741 819.038 cv
22.9453 819.038 23.437 818.343 23.437 816.952 cv
23.437 815.597 22.9336 814.948 21.9741 814.948 cv
21.0264 814.948 20.5229 815.597 20.5229 816.952 cv
cp
19.4556 816.939 mo
19.4556 815.057 20.4507 814.073 21.9741 814.073 cv
23.5093 814.073 24.5044 815.057 24.5044 816.939 cv
24.5044 818.835 23.5093 819.89 21.9741 819.89 cv
20.4507 819.89 19.4556 818.835 19.4556 816.939 cv
cp
f
28.8735 819.566 mo
28.5137 819.782 28.0459 819.89 27.5303 819.89 cv
26.5347 819.89 25.9351 819.362 25.9351 818.331 cv
25.9351 815.069 li
25.1318 815.069 li
25.1318 814.205 li
25.9351 814.205 li
25.9351 813.03 li
27.0264 812.897 li
27.0264 814.205 li
28.6699 814.205 li
28.6699 815.069 li
27.0146 815.069 li
27.0146 818.114 li
27.0146 818.715 27.2905 818.966 27.7461 818.966 cv
28.106 818.966 28.3579 818.87 28.6699 818.667 cv
28.8735 819.566 li
cp
f
31.2866 817.251 mo
31.6221 818.331 31.7183 819.003 31.7183 819.003 cv
31.7661 819.003 li
31.7661 819.003 31.8623 818.343 32.186 817.251 cv
33.1094 814.205 li
34.2368 814.205 li
32.1978 820.202 li
31.6343 821.833 30.9268 822.241 29.9434 822.241 cv
29.6792 822.241 29.3794 822.192 29.1396 822.108 cv
29.2354 821.185 li
29.4756 821.306 29.6914 821.353 29.9551 821.353 cv
30.543 821.353 30.8789 821.042 31.2026 820.069 cv
29.1514 814.205 li
30.3389 814.205 li
31.2866 817.251 li
cp
f
36.2783 817.599 mo
36.2783 818.667 36.998 819.075 37.6216 819.075 cv
38.4492 819.075 39.1328 818.403 39.1328 816.939 cv
39.1328 815.608 38.5933 814.961 37.7417 814.961 cv
36.9502 814.961 36.2783 815.548 36.2783 816.579 cv
36.2783 817.599 li
cp
36.2783 822.181 mo
35.1992 822.181 li
35.1992 814.205 li
36.0864 814.205 li
36.2183 815.272 li
36.542 814.373 37.3579 814.073 38.0532 814.073 cv
39.4087 814.073 40.2363 815.057 40.2363 816.844 cv
40.2363 818.534 39.3726 819.89 37.8374 819.89 cv
36.9858 819.89 36.4702 819.494 36.2783 819.015 cv
36.2783 822.181 li
cp
f
44.9053 816.424 mo
44.9175 816.34 44.9175 816.269 44.9175 816.196 cv
44.9175 815.488 44.4614 814.925 43.7178 814.925 cv
42.9263 814.925 42.4229 815.464 42.3149 816.424 cv
44.9053 816.424 li
cp
44.9893 818.14 mo
45.937 818.391 li
45.709 819.507 44.7734 819.89 43.7178 819.89 cv
42.2427 819.89 41.2476 818.87 41.2476 817.023 cv
41.2476 815.165 42.231 814.073 43.7778 814.073 cv
45.2051 814.073 45.9727 815.057 45.9727 816.437 cv
45.9727 816.747 45.9248 817.036 45.8647 817.204 cv
42.291 817.204 li
42.3389 818.282 42.8423 819.038 43.7778 819.038 cv
44.3896 819.038 44.7974 818.799 44.9893 818.14 cv
cp
f
50.4985 817.779 mo
50.6426 818.643 51.2061 819.038 51.9736 819.038 cv
52.7295 819.038 53.2451 818.69 53.2451 818.031 cv
53.2451 817.407 52.9331 817.107 51.7817 816.676 cv
50.6787 816.292 49.7192 815.837 49.7192 814.528 cv
49.7192 813.054 50.8706 812.526 51.9736 812.526 cv
53.269 812.526 54.2524 813.03 54.3726 814.386 cv
53.2813 814.601 li
53.209 813.821 52.6934 813.413 51.9858 813.413 cv
51.3262 813.413 50.8462 813.773 50.8462 814.433 cv
50.8462 815.141 51.4102 815.38 52.3936 815.74 cv
53.4731 816.136 54.3726 816.567 54.3726 817.888 cv
54.3726 819.278 53.269 819.89 51.9141 819.89 cv
50.5225 819.89 49.6948 819.339 49.4673 818.056 cv
50.4985 817.779 li
cp
f
57.0981 817.251 mo
57.4336 818.331 57.5298 819.003 57.5298 819.003 cv
57.5776 819.003 li
57.5776 819.003 57.6738 818.343 57.9976 817.251 cv
58.9209 814.205 li
60.0483 814.205 li
58.0093 820.202 li
57.4458 821.833 56.7383 822.241 55.7549 822.241 cv
55.4907 822.241 55.1909 822.192 54.9512 822.108 cv
55.0469 821.185 li
55.2871 821.306 55.5029 821.353 55.7666 821.353 cv
56.3545 821.353 56.6904 821.042 57.0142 820.069 cv
54.9629 814.205 li
56.1504 814.205 li
57.0981 817.251 li
cp
f
61.3101 818.211 mo
61.394 818.847 61.8496 819.122 62.5093 819.122 cv
63.145 819.122 63.6128 818.882 63.6128 818.379 cv
63.6128 817.923 63.4092 817.671 62.7495 817.503 cv
61.9336 817.312 li
60.9263 817.071 60.5425 816.556 60.5425 815.74 cv
60.5425 814.493 61.5742 814.073 62.6294 814.073 cv
63.793 814.073 64.5122 814.493 64.6201 815.572 cv
63.5649 815.692 li
63.5288 815.141 63.1934 814.889 62.5576 814.889 cv
61.9458 814.889 61.5859 815.165 61.5859 815.632 cv
61.5859 816.028 61.7417 816.28 62.3418 816.412 cv
63.1094 816.592 li
64.0928 816.831 64.6445 817.288 64.6445 818.259 cv
64.6445 819.446 63.709 819.89 62.4976 819.89 cv
61.2383 819.89 60.5068 819.507 60.3506 818.499 cv
61.3101 818.211 li
cp
f
68.9165 819.566 mo
68.5566 819.782 68.0889 819.89 67.5732 819.89 cv
66.5776 819.89 65.978 819.362 65.978 818.331 cv
65.978 815.069 li
65.1748 815.069 li
65.1748 814.205 li
65.978 814.205 li
65.978 813.03 li
67.0693 812.897 li
67.0693 814.205 li
68.7129 814.205 li
68.7129 815.069 li
67.0576 815.069 li
67.0576 818.114 li
67.0576 818.715 67.3335 818.966 67.7891 818.966 cv
68.1489 818.966 68.4009 818.87 68.7129 818.667 cv
68.9165 819.566 li
cp
f
73.2007 816.424 mo
73.2129 816.34 73.2129 816.269 73.2129 816.196 cv
73.2129 815.488 72.7568 814.925 72.0137 814.925 cv
71.2217 814.925 70.7183 815.464 70.6104 816.424 cv
73.2007 816.424 li
cp
73.2847 818.14 mo
74.2324 818.391 li
74.0044 819.507 73.0688 819.89 72.0137 819.89 cv
70.5381 819.89 69.543 818.87 69.543 817.023 cv
69.543 815.165 70.5264 814.073 72.0732 814.073 cv
73.5005 814.073 74.2681 815.057 74.2681 816.437 cv
74.2681 816.747 74.2202 817.036 74.1602 817.204 cv
70.5864 817.204 li
70.6343 818.282 71.1377 819.038 72.0732 819.038 cv
72.6851 819.038 73.0928 818.799 73.2847 818.14 cv
cp
f
81.5986 814.073 mo
82.5342 814.073 83.2417 814.577 83.2417 815.74 cv
83.2417 819.746 li
82.1621 819.746 li
82.1621 816.101 li
82.1621 815.417 81.8623 815.009 81.2388 815.009 cv
80.603 815.009 79.9795 815.452 79.9795 816.567 cv
79.9795 819.746 li
78.9004 819.746 li
78.9004 816.101 li
78.9004 815.417 78.6001 815.009 77.9766 815.009 cv
77.353 815.009 76.7173 815.464 76.7173 816.567 cv
76.7173 819.746 li
75.6377 819.746 li
75.6377 814.205 li
76.4893 814.205 li
76.6216 815.272 li
76.9092 814.421 77.5928 814.073 78.3486 814.073 cv
79.1401 814.073 79.7158 814.421 79.8594 815.296 cv
80.1353 814.409 80.855 814.073 81.5986 814.073 cv
cp
f
85.7656 818.187 mo
86.2217 818.187 86.5815 818.534 86.5815 819.003 cv
86.5815 819.458 86.2217 819.817 85.7656 819.817 cv
85.3101 819.817 84.9502 819.458 84.9502 819.003 cv
84.9502 818.534 85.3101 818.187 85.7656 818.187 cv
cp
85.7656 814.193 mo
86.2217 814.193 86.5815 814.541 86.5815 815.009 cv
86.5815 815.464 86.2217 815.824 85.7656 815.824 cv
85.3101 815.824 84.9502 815.464 84.9502 815.009 cv
84.9502 814.541 85.3101 814.193 85.7656 814.193 cv
cp
f
94.0806 818.019 mo
92.7495 815.572 li
92.3418 814.805 92.2217 814.36 92.2217 814.36 cv
92.1738 814.36 li
92.1738 814.36 92.2334 814.793 92.2334 815.632 cv
92.2334 819.746 li
91.1304 819.746 li
91.1304 812.683 li
92.4136 812.683 li
94.0928 815.944 li
94.3687 816.483 94.4521 816.808 94.4521 816.808 cv
94.5005 816.808 li
94.5005 816.808 94.5723 816.483 94.8604 815.944 cv
96.5273 812.683 li
97.7627 812.683 li
97.7627 819.746 li
96.647 819.746 li
96.647 815.632 li
96.647 814.793 96.7192 814.36 96.7192 814.36 cv
96.6714 814.36 li
96.6714 814.36 96.5513 814.805 96.1313 815.572 cv
94.812 818.019 li
94.0806 818.019 li
cp
f
102.924 816.424 mo
102.937 816.34 102.937 816.269 102.937 816.196 cv
102.937 815.488 102.48 814.925 101.737 814.925 cv
100.945 814.925 100.442 815.464 100.334 816.424 cv
102.924 816.424 li
cp
103.008 818.14 mo
103.956 818.391 li
103.728 819.507 102.792 819.89 101.737 819.89 cv
100.262 819.89 99.2666 818.87 99.2666 817.023 cv
99.2666 815.165 100.25 814.073 101.797 814.073 cv
103.224 814.073 103.992 815.057 103.992 816.437 cv
103.992 816.747 103.944 817.036 103.884 817.204 cv
100.31 817.204 li
100.358 818.282 100.861 819.038 101.797 819.038 cv
102.409 819.038 102.816 818.799 103.008 818.14 cv
cp
f
108.959 816.315 mo
108.959 815.333 108.216 814.913 107.581 814.913 cv
106.765 814.913 106.093 815.477 106.093 817.036 cv
106.093 818.343 106.669 819.038 107.568 819.038 cv
108.18 819.038 108.959 818.547 108.959 817.54 cv
108.959 816.315 li
cp
108.948 811.734 mo
110.039 811.734 li
110.039 819.746 li
109.08 819.746 li
108.959 818.786 li
108.648 819.626 107.988 819.89 107.197 819.89 cv
106.033 819.89 105.002 818.942 105.002 817.071 cv
105.002 815.188 105.901 814.073 107.484 814.073 cv
108.192 814.073 108.792 814.47 108.948 814.948 cv
108.948 811.734 li
cp
f
112.849 814.205 mo
112.849 819.746 li
111.77 819.746 li
111.77 814.205 li
112.849 814.205 li
cp
112.297 811.71 mo
112.717 811.71 113.053 811.999 113.053 812.431 cv
113.053 812.838 112.717 813.149 112.297 813.149 cv
111.914 813.149 111.578 812.838 111.578 812.431 cv
111.578 811.999 111.914 811.71 112.297 811.71 cv
cp
f
117.889 818.739 mo
117.625 819.554 117.061 819.89 116.186 819.89 cv
115.178 819.89 114.506 819.374 114.506 818.056 cv
114.506 814.205 li
115.586 814.205 li
115.586 817.888 li
115.586 818.702 115.897 819.087 116.581 819.087 cv
117.181 819.087 117.865 818.547 117.865 817.479 cv
117.865 814.205 li
118.944 814.205 li
118.944 819.746 li
118.021 819.746 li
117.889 818.739 li
cp
f
126.635 814.073 mo
127.57 814.073 128.278 814.577 128.278 815.74 cv
128.278 819.746 li
127.198 819.746 li
127.198 816.101 li
127.198 815.417 126.898 815.009 126.275 815.009 cv
125.639 815.009 125.016 815.452 125.016 816.567 cv
125.016 819.746 li
123.937 819.746 li
123.937 816.101 li
123.937 815.417 123.636 815.009 123.013 815.009 cv
122.389 815.009 121.753 815.464 121.753 816.567 cv
121.753 819.746 li
120.674 819.746 li
120.674 814.205 li
121.525 814.205 li
121.658 815.272 li
121.945 814.421 122.629 814.073 123.385 814.073 cv
124.176 814.073 124.752 814.421 124.896 815.296 cv
125.171 814.409 125.891 814.073 126.635 814.073 cv
cp
f
132.938 822.181 mo
132.938 811.723 li
133.861 811.723 li
133.861 822.181 li
132.938 822.181 li
cp
f
139.405 816.22 mo
139.405 817.911 140.101 818.931 141.432 818.931 cv
142.763 818.931 143.447 817.911 143.447 816.22 cv
143.447 814.541 142.751 813.509 141.432 813.509 cv
140.101 813.509 139.405 814.541 139.405 816.22 cv
cp
138.242 816.22 mo
138.242 813.857 139.489 812.538 141.432 812.538 cv
143.375 812.538 144.61 813.857 144.61 816.22 cv
144.61 818.571 143.375 819.89 141.432 819.89 cv
139.489 819.89 138.242 818.571 138.242 816.22 cv
cp
f
147.084 817.599 mo
147.084 818.667 147.804 819.075 148.428 819.075 cv
149.255 819.075 149.939 818.403 149.939 816.939 cv
149.939 815.608 149.399 814.961 148.548 814.961 cv
147.756 814.961 147.084 815.548 147.084 816.579 cv
147.084 817.599 li
cp
147.084 822.181 mo
146.005 822.181 li
146.005 814.205 li
146.893 814.205 li
147.024 815.272 li
147.349 814.373 148.164 814.073 148.859 814.073 cv
150.215 814.073 151.042 815.057 151.042 816.844 cv
151.042 818.534 150.179 819.89 148.644 819.89 cv
147.792 819.89 147.276 819.494 147.084 819.015 cv
147.084 822.181 li
cp
f
155.711 816.424 mo
155.724 816.34 155.724 816.269 155.724 816.196 cv
155.724 815.488 155.268 814.925 154.524 814.925 cv
153.732 814.925 153.229 815.464 153.121 816.424 cv
155.711 816.424 li
cp
155.795 818.14 mo
156.743 818.391 li
156.515 819.507 155.58 819.89 154.524 819.89 cv
153.049 819.89 152.054 818.87 152.054 817.023 cv
152.054 815.165 153.037 814.073 154.584 814.073 cv
156.011 814.073 156.779 815.057 156.779 816.437 cv
156.779 816.747 156.731 817.036 156.671 817.204 cv
153.097 817.204 li
153.145 818.282 153.648 819.038 154.584 819.038 cv
155.196 819.038 155.604 818.799 155.795 818.14 cv
cp
f
159.133 815.272 mo
159.433 814.444 160.068 814.073 160.908 814.073 cv
161.82 814.073 162.587 814.577 162.587 815.788 cv
162.587 819.746 li
161.508 819.746 li
161.508 816.112 li
161.508 815.429 161.196 815.009 160.536 815.009 cv
159.865 815.009 159.229 815.368 159.229 816.567 cv
159.229 819.746 li
158.149 819.746 li
158.149 814.205 li
159.001 814.205 li
159.133 815.272 li
cp
f
165.205 819.746 mo
165.205 813.642 li
163.154 813.642 li
163.154 812.683 li
168.383 812.683 li
168.383 813.642 li
166.32 813.642 li
166.32 819.746 li
165.205 819.746 li
cp
f
170.617 817.251 mo
170.952 818.331 171.048 819.003 171.048 819.003 cv
171.096 819.003 li
171.096 819.003 171.192 818.343 171.516 817.251 cv
172.439 814.205 li
173.567 814.205 li
171.528 820.202 li
170.964 821.833 170.257 822.241 169.273 822.241 cv
169.009 822.241 168.709 822.192 168.47 822.108 cv
168.565 821.185 li
168.806 821.306 169.021 821.353 169.285 821.353 cv
169.873 821.353 170.209 821.042 170.533 820.069 cv
168.481 814.205 li
169.669 814.205 li
170.617 817.251 li
cp
f
175.608 817.599 mo
175.608 818.667 176.328 819.075 176.952 819.075 cv
177.779 819.075 178.463 818.403 178.463 816.939 cv
178.463 815.608 177.923 814.961 177.072 814.961 cv
176.28 814.961 175.608 815.548 175.608 816.579 cv
175.608 817.599 li
cp
175.608 822.181 mo
174.529 822.181 li
174.529 814.205 li
175.417 814.205 li
175.548 815.272 li
175.872 814.373 176.688 814.073 177.383 814.073 cv
178.739 814.073 179.566 815.057 179.566 816.844 cv
179.566 818.534 178.703 819.89 177.167 819.89 cv
176.316 819.89 175.8 819.494 175.608 819.015 cv
175.608 822.181 li
cp
f
184.235 816.424 mo
184.247 816.34 184.247 816.269 184.247 816.196 cv
184.247 815.488 183.791 814.925 183.048 814.925 cv
182.256 814.925 181.752 815.464 181.645 816.424 cv
184.235 816.424 li
cp
184.319 818.14 mo
185.267 818.391 li
185.039 819.507 184.103 819.89 183.048 819.89 cv
181.572 819.89 180.577 818.87 180.577 817.023 cv
180.577 815.165 181.561 814.073 183.107 814.073 cv
184.535 814.073 185.302 815.057 185.302 816.437 cv
185.302 816.747 185.254 817.036 185.194 817.204 cv
181.621 817.204 li
181.668 818.282 182.172 819.038 183.107 819.038 cv
183.719 819.038 184.127 818.799 184.319 818.14 cv
cp
f
189.457 819.746 mo
189.457 812.683 li
193.618 812.683 li
193.618 813.642 li
190.56 813.642 li
190.56 815.8 li
193.246 815.8 li
193.246 816.76 li
190.56 816.76 li
190.56 819.746 li
189.457 819.746 li
cp
f
197.975 816.424 mo
197.987 816.34 197.987 816.269 197.987 816.196 cv
197.987 815.488 197.531 814.925 196.787 814.925 cv
195.996 814.925 195.492 815.464 195.384 816.424 cv
197.975 816.424 li
cp
198.059 818.14 mo
199.006 818.391 li
198.778 819.507 197.843 819.89 196.787 819.89 cv
195.312 819.89 194.317 818.87 194.317 817.023 cv
194.317 815.165 195.3 814.073 196.847 814.073 cv
198.274 814.073 199.042 815.057 199.042 816.437 cv
199.042 816.747 198.994 817.036 198.934 817.204 cv
195.36 817.204 li
195.408 818.282 195.912 819.038 196.847 819.038 cv
197.459 819.038 197.867 818.799 198.059 818.14 cv
cp
f
203.255 817.275 mo
201.768 817.239 201.12 817.575 201.12 818.271 cv
201.12 818.727 201.42 819.075 202.007 819.075 cv
202.583 819.075 203.255 818.727 203.255 818.079 cv
203.255 817.275 li
cp
204.346 818.438 mo
204.346 818.858 204.538 818.954 204.754 818.954 cv
204.886 818.954 204.982 818.931 205.065 818.895 cv
205.065 819.733 li
204.91 819.794 204.718 819.83 204.478 819.83 cv
203.842 819.83 203.435 819.566 203.339 818.942 cv
203.051 819.638 202.403 819.89 201.695 819.89 cv
200.724 819.89 200.041 819.339 200.041 818.391 cv
200.041 817.167 200.988 816.46 203.255 816.567 cv
203.255 815.884 li
203.255 815.2 202.847 814.937 202.259 814.937 cv
201.66 814.937 201.3 815.249 201.252 815.824 cv
200.22 815.669 li
200.304 814.493 201.336 814.073 202.355 814.073 cv
203.435 814.073 204.346 814.505 204.346 815.776 cv
204.346 818.438 li
cp
f
209.207 819.566 mo
208.847 819.782 208.379 819.89 207.863 819.89 cv
206.868 819.89 206.268 819.362 206.268 818.331 cv
206.268 815.069 li
205.465 815.069 li
205.465 814.205 li
206.268 814.205 li
206.268 813.03 li
207.359 812.897 li
207.359 814.205 li
209.003 814.205 li
209.003 815.069 li
207.348 815.069 li
207.348 818.114 li
207.348 818.715 207.624 818.966 208.079 818.966 cv
208.439 818.966 208.691 818.87 209.003 818.667 cv
209.207 819.566 li
cp
f
213.563 818.739 mo
213.298 819.554 212.735 819.89 211.859 819.89 cv
210.852 819.89 210.18 819.374 210.18 818.056 cv
210.18 814.205 li
211.26 814.205 li
211.26 817.888 li
211.26 818.702 211.571 819.087 212.255 819.087 cv
212.855 819.087 213.539 818.547 213.539 817.479 cv
213.539 814.205 li
214.618 814.205 li
214.618 819.746 li
213.694 819.746 li
213.563 818.739 li
cp
f
219.455 815.296 mo
219.323 815.272 219.143 815.249 218.963 815.249 cv
218.184 815.249 217.428 815.86 217.428 816.939 cv
217.428 819.746 li
216.349 819.746 li
216.349 814.205 li
217.26 814.205 li
217.392 815.704 li
217.608 814.709 218.303 814.025 219.539 814.085 cv
219.455 815.296 li
cp
f
223.655 816.424 mo
223.667 816.34 223.667 816.269 223.667 816.196 cv
223.667 815.488 223.211 814.925 222.468 814.925 cv
221.676 814.925 221.172 815.464 221.064 816.424 cv
223.655 816.424 li
cp
223.739 818.14 mo
224.687 818.391 li
224.458 819.507 223.523 819.89 222.468 819.89 cv
220.992 819.89 219.997 818.87 219.997 817.023 cv
219.997 815.165 220.98 814.073 222.527 814.073 cv
223.955 814.073 224.722 815.057 224.722 816.437 cv
224.722 816.747 224.674 817.036 224.614 817.204 cv
221.041 817.204 li
221.088 818.282 221.592 819.038 222.527 819.038 cv
223.139 819.038 223.547 818.799 223.739 818.14 cv
cp
f
226.512 818.211 mo
226.596 818.847 227.052 819.122 227.711 819.122 cv
228.347 819.122 228.815 818.882 228.815 818.379 cv
228.815 817.923 228.611 817.671 227.952 817.503 cv
227.136 817.312 li
226.128 817.071 225.745 816.556 225.745 815.74 cv
225.745 814.493 226.776 814.073 227.832 814.073 cv
228.995 814.073 229.714 814.493 229.822 815.572 cv
228.767 815.692 li
228.731 815.141 228.396 814.889 227.76 814.889 cv
227.148 814.889 226.788 815.165 226.788 815.632 cv
226.788 816.028 226.944 816.28 227.544 816.412 cv
228.312 816.592 li
229.295 816.831 229.847 817.288 229.847 818.259 cv
229.847 819.446 228.911 819.89 227.7 819.89 cv
226.44 819.89 225.709 819.507 225.553 818.499 cv
226.512 818.211 li
cp
f
231.972 818.187 mo
232.428 818.187 232.788 818.534 232.788 819.003 cv
232.788 819.458 232.428 819.817 231.972 819.817 cv
231.516 819.817 231.156 819.458 231.156 819.003 cv
231.156 818.534 231.516 818.187 231.972 818.187 cv
cp
231.972 814.193 mo
232.428 814.193 232.788 814.541 232.788 815.009 cv
232.788 815.464 232.428 815.824 231.972 815.824 cv
231.516 815.824 231.156 815.464 231.156 815.009 cv
231.156 814.541 231.516 814.193 231.972 814.193 cv
cp
f
237.708 817.779 mo
237.852 818.643 238.416 819.038 239.183 819.038 cv
239.939 819.038 240.455 818.69 240.455 818.031 cv
240.455 817.407 240.143 817.107 238.991 816.676 cv
237.888 816.292 236.929 815.837 236.929 814.528 cv
236.929 813.054 238.08 812.526 239.183 812.526 cv
240.479 812.526 241.462 813.03 241.582 814.386 cv
240.491 814.601 li
240.418 813.821 239.903 813.413 239.195 813.413 cv
238.536 813.413 238.056 813.773 238.056 814.433 cv
238.056 815.141 238.62 815.38 239.603 815.74 cv
240.683 816.136 241.582 816.567 241.582 817.888 cv
241.582 819.278 240.479 819.89 239.123 819.89 cv
237.732 819.89 236.904 819.339 236.677 818.056 cv
237.708 817.779 li
cp
f
245.938 819.566 mo
245.579 819.782 245.111 819.89 244.595 819.89 cv
243.6 819.89 243 819.362 243 818.331 cv
243 815.069 li
242.197 815.069 li
242.197 814.205 li
243 814.205 li
243 813.03 li
244.092 812.897 li
244.092 814.205 li
245.735 814.205 li
245.735 815.069 li
244.08 815.069 li
244.08 818.114 li
244.08 818.715 244.355 818.966 244.811 818.966 cv
245.171 818.966 245.423 818.87 245.735 818.667 cv
245.938 819.566 li
cp
f
248.352 817.251 mo
248.687 818.331 248.783 819.003 248.783 819.003 cv
248.831 819.003 li
248.831 819.003 248.927 818.343 249.251 817.251 cv
250.174 814.205 li
251.302 814.205 li
249.263 820.202 li
248.699 821.833 247.992 822.241 247.008 822.241 cv
246.744 822.241 246.444 822.192 246.205 822.108 cv
246.3 821.185 li
246.541 821.306 246.756 821.353 247.02 821.353 cv
247.608 821.353 247.943 821.042 248.268 820.069 cv
246.217 814.205 li
247.404 814.205 li
248.352 817.251 li
cp
f
254.135 819.746 mo
253.847 819.817 253.655 819.843 253.463 819.843 cv
252.768 819.843 252.192 819.47 252.192 818.643 cv
252.192 811.734 li
253.271 811.734 li
253.271 818.415 li
253.271 818.763 253.475 818.907 253.763 818.907 cv
253.919 818.907 254.027 818.882 254.147 818.847 cv
254.135 819.746 li
cp
f
256.475 814.205 mo
256.475 819.746 li
255.396 819.746 li
255.396 814.205 li
256.475 814.205 li
cp
255.923 811.71 mo
256.343 811.71 256.679 811.999 256.679 812.431 cv
256.679 812.838 256.343 813.149 255.923 813.149 cv
255.54 813.149 255.204 812.838 255.204 812.431 cv
255.204 811.999 255.54 811.71 255.923 811.71 cv
cp
f
258.624 818.211 mo
258.708 818.847 259.163 819.122 259.823 819.122 cv
260.458 819.122 260.926 818.882 260.926 818.379 cv
260.926 817.923 260.723 817.671 260.063 817.503 cv
259.247 817.312 li
258.24 817.071 257.856 816.556 257.856 815.74 cv
257.856 814.493 258.888 814.073 259.943 814.073 cv
261.106 814.073 261.826 814.493 261.934 815.572 cv
260.878 815.692 li
260.842 815.141 260.507 814.889 259.871 814.889 cv
259.259 814.889 258.899 815.165 258.899 815.632 cv
258.899 816.028 259.055 816.28 259.655 816.412 cv
260.423 816.592 li
261.406 816.831 261.958 817.288 261.958 818.259 cv
261.958 819.446 261.022 819.89 259.811 819.89 cv
258.552 819.89 257.82 819.507 257.664 818.499 cv
258.624 818.211 li
cp
f
266.23 819.566 mo
265.87 819.782 265.402 819.89 264.887 819.89 cv
263.891 819.89 263.292 819.362 263.292 818.331 cv
263.292 815.069 li
262.488 815.069 li
262.488 814.205 li
263.292 814.205 li
263.292 813.03 li
264.383 812.897 li
264.383 814.205 li
266.026 814.205 li
266.026 815.069 li
264.371 815.069 li
264.371 818.114 li
264.371 818.715 264.647 818.966 265.103 818.966 cv
265.462 818.966 265.714 818.87 266.026 818.667 cv
266.23 819.566 li
cp
f
268.355 814.205 mo
268.355 819.746 li
267.275 819.746 li
267.275 814.205 li
268.355 814.205 li
cp
267.803 811.71 mo
268.223 811.71 268.559 811.999 268.559 812.431 cv
268.559 812.838 268.223 813.149 267.803 813.149 cv
267.419 813.149 267.084 812.838 267.084 812.431 cv
267.084 811.999 267.419 811.71 267.803 811.71 cv
cp
f
274.341 818.343 mo
274.149 819.458 273.262 819.89 272.17 819.89 cv
270.719 819.89 269.724 818.858 269.724 817.012 cv
269.724 815.165 270.719 814.073 272.254 814.073 cv
273.43 814.073 274.197 814.696 274.27 815.8 cv
273.286 816.005 li
273.19 815.309 272.818 814.961 272.207 814.961 cv
271.259 814.961 270.768 815.8 270.768 817.012 cv
270.768 818.187 271.343 819.026 272.254 819.026 cv
272.842 819.026 273.238 818.751 273.406 818.114 cv
274.341 818.343 li
cp
f
278.735 817.779 mo
278.879 818.643 279.443 819.038 280.21 819.038 cv
280.966 819.038 281.481 818.69 281.481 818.031 cv
281.481 817.407 281.17 817.107 280.019 816.676 cv
278.916 816.292 277.956 815.837 277.956 814.528 cv
277.956 813.054 279.107 812.526 280.21 812.526 cv
281.506 812.526 282.489 813.03 282.609 814.386 cv
281.519 814.601 li
281.446 813.821 280.931 813.413 280.223 813.413 cv
279.563 813.413 279.083 813.773 279.083 814.433 cv
279.083 815.141 279.647 815.38 280.63 815.74 cv
281.71 816.136 282.609 816.567 282.609 817.888 cv
282.609 819.278 281.506 819.89 280.15 819.89 cv
278.759 819.89 277.932 819.339 277.704 818.056 cv
278.735 817.779 li
cp
f
287.266 816.424 mo
287.278 816.34 287.278 816.269 287.278 816.196 cv
287.278 815.488 286.821 814.925 286.078 814.925 cv
285.286 814.925 284.783 815.464 284.675 816.424 cv
287.266 816.424 li
cp
287.35 818.14 mo
288.298 818.391 li
288.069 819.507 287.134 819.89 286.078 819.89 cv
284.603 819.89 283.608 818.87 283.608 817.023 cv
283.608 815.165 284.591 814.073 286.138 814.073 cv
287.565 814.073 288.333 815.057 288.333 816.437 cv
288.333 816.747 288.285 817.036 288.226 817.204 cv
284.651 817.204 li
284.699 818.282 285.202 819.038 286.138 819.038 cv
286.75 819.038 287.157 818.799 287.35 818.14 cv
cp
f
292.702 819.566 mo
292.342 819.782 291.874 819.89 291.358 819.89 cv
290.362 819.89 289.763 819.362 289.763 818.331 cv
289.763 815.069 li
288.96 815.069 li
288.96 814.205 li
289.763 814.205 li
289.763 813.03 li
290.854 812.897 li
290.854 814.205 li
292.498 814.205 li
292.498 815.069 li
290.843 815.069 li
290.843 818.114 li
290.843 818.715 291.118 818.966 291.574 818.966 cv
291.935 818.966 292.187 818.87 292.498 818.667 cv
292.702 819.566 li
cp
f
297.263 816.244 mo
297.263 817.804 297.886 818.991 298.942 818.991 cv
299.997 818.991 300.633 817.804 300.633 816.244 cv
300.633 814.649 299.997 813.497 298.942 813.497 cv
297.886 813.497 297.263 814.649 297.263 816.244 cv
cp
296.171 816.22 mo
296.171 814.205 297.215 812.538 298.954 812.538 cv
300.692 812.538 301.736 814.205 301.736 816.22 cv
301.736 818.343 300.753 819.89 298.954 819.89 cv
297.155 819.89 296.171 818.343 296.171 816.22 cv
cp
f
304.079 819.746 mo
304.079 813.869 li
302.556 814.121 li
302.556 813.138 li
305.194 812.67 li
305.194 819.746 li
304.079 819.746 li
cp
f
306.755 821.113 mo
306.755 820.598 li
307.343 820.514 307.728 820.25 307.728 819.71 cv
307.235 819.806 306.863 819.507 306.863 819.038 cv
306.863 818.559 307.199 818.295 307.667 818.295 cv
308.159 818.295 308.579 818.69 308.579 819.351 cv
308.579 820.538 307.858 821.054 306.755 821.113 cv
cp
f
314.218 812.683 mo
314.218 818.786 li
317.385 818.786 li
317.385 819.746 li
313.115 819.746 li
313.115 812.683 li
314.218 812.683 li
cp
f
319.595 814.205 mo
319.595 819.746 li
318.516 819.746 li
318.516 814.205 li
319.595 814.205 li
cp
319.043 811.71 mo
319.463 811.71 319.799 811.999 319.799 812.431 cv
319.799 812.838 319.463 813.149 319.043 813.149 cv
318.659 813.149 318.323 812.838 318.323 812.431 cv
318.323 811.999 318.659 811.71 319.043 811.71 cv
cp
f
322.308 815.272 mo
322.606 814.444 323.242 814.073 324.082 814.073 cv
324.993 814.073 325.761 814.577 325.761 815.788 cv
325.761 819.746 li
324.682 819.746 li
324.682 816.112 li
324.682 815.429 324.37 815.009 323.71 815.009 cv
323.038 815.009 322.403 815.368 322.403 816.567 cv
322.403 819.746 li
321.323 819.746 li
321.323 814.205 li
322.175 814.205 li
322.308 815.272 li
cp
f
328.511 814.205 mo
328.511 819.746 li
327.432 819.746 li
327.432 814.205 li
328.511 814.205 li
cp
327.959 811.71 mo
328.379 811.71 328.715 811.999 328.715 812.431 cv
328.715 812.838 328.379 813.149 327.959 813.149 cv
327.575 813.149 327.239 812.838 327.239 812.431 cv
327.239 811.999 327.575 811.71 327.959 811.71 cv
cp
f
331.224 815.272 mo
331.522 814.444 332.158 814.073 332.998 814.073 cv
333.909 814.073 334.677 814.577 334.677 815.788 cv
334.677 819.746 li
333.598 819.746 li
333.598 816.112 li
333.598 815.429 333.286 815.009 332.626 815.009 cv
331.954 815.009 331.319 815.368 331.319 816.567 cv
331.319 819.746 li
330.239 819.746 li
330.239 814.205 li
331.091 814.205 li
331.224 815.272 li
cp
f
338.23 817.191 mo
338.962 817.191 339.442 816.808 339.442 816.028 cv
339.442 815.249 338.962 814.853 338.23 814.864 cv
337.499 814.864 337.067 815.284 337.067 816.028 cv
337.067 816.724 337.487 817.191 338.23 817.191 cv
cp
338.122 821.509 mo
339.25 821.509 339.981 821.294 339.981 820.598 cv
339.981 820.178 339.753 819.866 339.046 819.866 cv
337.847 819.866 li
337.056 819.866 336.611 820.13 336.611 820.706 cv
336.611 821.294 337.247 821.509 338.122 821.509 cv
cp
339.837 814.517 mo
340.102 814.373 340.186 814.085 340.257 813.677 cv
341.192 814.001 li
341.108 814.528 340.726 814.889 340.269 814.997 cv
340.437 815.284 340.521 815.632 340.521 816.04 cv
340.521 817.323 339.489 817.959 338.242 817.959 cv
337.966 817.959 337.679 817.923 337.522 817.863 cv
337.247 818.007 337.151 818.198 337.151 818.438 cv
337.151 818.751 337.354 818.895 337.739 818.895 cv
339.094 818.895 li
340.353 818.895 341.024 819.446 341.024 820.442 cv
341.024 821.894 339.466 822.276 338.015 822.276 cv
336.791 822.276 335.592 821.965 335.592 820.825 cv
335.592 820.106 336.107 819.626 337.019 819.554 cv
336.515 819.494 336.251 819.134 336.251 818.69 cv
336.251 818.247 336.479 817.875 337.067 817.72 cv
336.396 817.419 335.987 816.855 335.987 816.04 cv
335.987 814.793 336.899 814.073 338.23 814.073 cv
338.89 814.073 339.43 814.218 339.837 814.517 cv
cp
f
346.054 816.244 mo
347.073 816.244 li
348.117 816.244 348.44 815.716 348.44 814.913 cv
348.44 814.062 347.962 813.605 347.062 813.605 cv
346.054 813.605 li
346.054 816.244 li
cp
344.951 819.746 mo
344.951 812.683 li
347.086 812.683 li
348.837 812.683 349.581 813.497 349.581 814.853 cv
349.581 816.269 348.776 817.155 347.194 817.155 cv
346.054 817.155 li
346.054 819.746 li
344.951 819.746 li
cp
f
353.913 815.296 mo
353.781 815.272 353.602 815.249 353.421 815.249 cv
352.642 815.249 351.886 815.86 351.886 816.939 cv
351.886 819.746 li
350.807 819.746 li
350.807 814.205 li
351.718 814.205 li
351.851 815.704 li
352.066 814.709 352.762 814.025 353.997 814.085 cv
353.913 815.296 li
cp
f
355.522 816.952 mo
355.522 818.343 356.015 819.038 356.974 819.038 cv
357.944 819.038 358.437 818.343 358.437 816.952 cv
358.437 815.597 357.933 814.948 356.974 814.948 cv
356.026 814.948 355.522 815.597 355.522 816.952 cv
cp
354.455 816.939 mo
354.455 815.057 355.45 814.073 356.974 814.073 cv
358.509 814.073 359.504 815.057 359.504 816.939 cv
359.504 818.835 358.509 819.89 356.974 819.89 cv
355.45 819.89 354.455 818.835 354.455 816.939 cv
cp
f
361.954 817.599 mo
361.954 818.667 362.674 819.075 363.298 819.075 cv
364.125 819.075 364.809 818.403 364.809 816.939 cv
364.809 815.608 364.269 814.961 363.417 814.961 cv
362.626 814.961 361.954 815.548 361.954 816.579 cv
361.954 817.599 li
cp
361.954 822.181 mo
360.875 822.181 li
360.875 814.205 li
361.763 814.205 li
361.894 815.272 li
362.218 814.373 363.034 814.073 363.729 814.073 cv
365.085 814.073 365.912 815.057 365.912 816.844 cv
365.912 818.534 365.048 819.89 363.513 819.89 cv
362.661 819.89 362.146 819.494 361.954 819.015 cv
361.954 822.181 li
cp
f
367.99 816.952 mo
367.99 818.343 368.481 819.038 369.441 819.038 cv
370.413 819.038 370.904 818.343 370.904 816.952 cv
370.904 815.597 370.401 814.948 369.441 814.948 cv
368.493 814.948 367.99 815.597 367.99 816.952 cv
cp
366.923 816.939 mo
366.923 815.057 367.918 814.073 369.441 814.073 cv
370.977 814.073 371.972 815.057 371.972 816.939 cv
371.972 818.835 370.977 819.89 369.441 819.89 cv
367.918 819.89 366.923 818.835 366.923 816.939 cv
cp
f
376.448 815.296 mo
376.317 815.272 376.138 815.249 375.957 815.249 cv
375.178 815.249 374.422 815.86 374.422 816.939 cv
374.422 819.746 li
373.343 819.746 li
373.343 814.205 li
374.254 814.205 li
374.386 815.704 li
374.603 814.709 375.298 814.025 376.532 814.085 cv
376.448 815.296 li
cp
f
380.612 819.566 mo
380.253 819.782 379.785 819.89 379.27 819.89 cv
378.274 819.89 377.675 819.362 377.675 818.331 cv
377.675 815.069 li
376.871 815.069 li
376.871 814.205 li
377.675 814.205 li
377.675 813.03 li
378.766 812.897 li
378.766 814.205 li
380.409 814.205 li
380.409 815.069 li
378.754 815.069 li
378.754 818.114 li
378.754 818.715 379.03 818.966 379.485 818.966 cv
379.845 818.966 380.097 818.87 380.409 818.667 cv
380.612 819.566 li
cp
f
382.737 814.205 mo
382.737 819.746 li
381.658 819.746 li
381.658 814.205 li
382.737 814.205 li
cp
382.187 811.71 mo
382.606 811.71 382.942 811.999 382.942 812.431 cv
382.942 812.838 382.606 813.149 382.187 813.149 cv
381.802 813.149 381.467 812.838 381.467 812.431 cv
381.467 811.999 381.802 811.71 382.187 811.71 cv
cp
f
385.175 816.952 mo
385.175 818.343 385.666 819.038 386.626 819.038 cv
387.597 819.038 388.089 818.343 388.089 816.952 cv
388.089 815.597 387.585 814.948 386.626 814.948 cv
385.678 814.948 385.175 815.597 385.175 816.952 cv
cp
384.106 816.939 mo
384.106 815.057 385.103 814.073 386.626 814.073 cv
388.161 814.073 389.155 815.057 389.155 816.939 cv
389.155 818.835 388.161 819.89 386.626 819.89 cv
385.103 819.89 384.106 818.835 384.106 816.939 cv
cp
f
391.511 815.272 mo
391.81 814.444 392.445 814.073 393.285 814.073 cv
394.196 814.073 394.964 814.577 394.964 815.788 cv
394.964 819.746 li
393.885 819.746 li
393.885 816.112 li
393.885 815.429 393.573 815.009 392.913 815.009 cv
392.241 815.009 391.606 815.368 391.606 816.567 cv
391.606 819.746 li
390.526 819.746 li
390.526 814.205 li
391.378 814.205 li
391.511 815.272 li
cp
f
399.429 817.275 mo
397.942 817.239 397.294 817.575 397.294 818.271 cv
397.294 818.727 397.594 819.075 398.182 819.075 cv
398.757 819.075 399.429 818.727 399.429 818.079 cv
399.429 817.275 li
cp
400.521 818.438 mo
400.521 818.858 400.712 818.954 400.929 818.954 cv
401.06 818.954 401.156 818.931 401.24 818.895 cv
401.24 819.733 li
401.084 819.794 400.892 819.83 400.652 819.83 cv
400.017 819.83 399.608 819.566 399.513 818.942 cv
399.226 819.638 398.577 819.89 397.87 819.89 cv
396.898 819.89 396.215 819.339 396.215 818.391 cv
396.215 817.167 397.162 816.46 399.429 816.567 cv
399.429 815.884 li
399.429 815.2 399.021 814.937 398.434 814.937 cv
397.834 814.937 397.474 815.249 397.427 815.824 cv
396.395 815.669 li
396.479 814.493 397.511 814.073 398.529 814.073 cv
399.608 814.073 400.521 814.505 400.521 815.776 cv
400.521 818.438 li
cp
f
404.253 819.746 mo
403.966 819.817 403.774 819.843 403.582 819.843 cv
402.886 819.843 402.311 819.47 402.311 818.643 cv
402.311 811.734 li
403.39 811.734 li
403.39 818.415 li
403.39 818.763 403.594 818.907 403.882 818.907 cv
404.038 818.907 404.146 818.882 404.266 818.847 cv
404.253 819.746 li
cp
f
408.502 822.181 mo
408.502 811.723 li
409.426 811.723 li
409.426 822.181 li
408.502 822.181 li
cp
f
418.147 819.746 mo
415.929 816.64 li
415.377 816.64 li
415.377 819.746 li
414.274 819.746 li
414.274 812.683 li
415.377 812.683 li
415.377 815.681 li
415.965 815.681 li
418.028 812.683 li
419.323 812.683 li
416.864 816.112 li
419.503 819.746 li
418.147 819.746 li
cp
f
423.632 816.424 mo
423.644 816.34 423.644 816.269 423.644 816.196 cv
423.644 815.488 423.188 814.925 422.444 814.925 cv
421.653 814.925 421.149 815.464 421.042 816.424 cv
423.632 816.424 li
cp
423.716 818.14 mo
424.663 818.391 li
424.436 819.507 423.5 819.89 422.444 819.89 cv
420.97 819.89 419.974 818.87 419.974 817.023 cv
419.974 815.165 420.958 814.073 422.505 814.073 cv
423.932 814.073 424.699 815.057 424.699 816.437 cv
424.699 816.747 424.651 817.036 424.591 817.204 cv
421.018 817.204 li
421.065 818.282 421.569 819.038 422.505 819.038 cv
423.116 819.038 423.524 818.799 423.716 818.14 cv
cp
f
429.176 815.296 mo
429.044 815.272 428.864 815.249 428.685 815.249 cv
427.905 815.249 427.149 815.86 427.149 816.939 cv
427.149 819.746 li
426.069 819.746 li
426.069 814.205 li
426.981 814.205 li
427.112 815.704 li
427.329 814.709 428.024 814.025 429.26 814.085 cv
429.176 815.296 li
cp
f
431.325 815.272 mo
431.625 814.444 432.261 814.073 433.101 814.073 cv
434.012 814.073 434.779 814.577 434.779 815.788 cv
434.779 819.746 li
433.7 819.746 li
433.7 816.112 li
433.7 815.429 433.388 815.009 432.728 815.009 cv
432.057 815.009 431.421 815.368 431.421 816.567 cv
431.421 819.746 li
430.342 819.746 li
430.342 814.205 li
431.192 814.205 li
431.325 815.272 li
cp
f
437.528 814.205 mo
437.528 819.746 li
436.449 819.746 li
436.449 814.205 li
437.528 814.205 li
cp
436.978 811.71 mo
437.397 811.71 437.733 811.999 437.733 812.431 cv
437.733 812.838 437.397 813.149 436.978 813.149 cv
436.593 813.149 436.258 812.838 436.258 812.431 cv
436.258 811.999 436.593 811.71 436.978 811.71 cv
cp
f
440.241 815.272 mo
440.541 814.444 441.177 814.073 442.017 814.073 cv
442.928 814.073 443.695 814.577 443.695 815.788 cv
443.695 819.746 li
442.616 819.746 li
442.616 816.112 li
442.616 815.429 442.304 815.009 441.644 815.009 cv
440.973 815.009 440.337 815.368 440.337 816.567 cv
440.337 819.746 li
439.258 819.746 li
439.258 814.205 li
440.108 814.205 li
440.241 815.272 li
cp
f
447.249 817.191 mo
447.979 817.191 448.46 816.808 448.46 816.028 cv
448.46 815.249 447.979 814.853 447.249 814.864 cv
446.517 814.864 446.085 815.284 446.085 816.028 cv
446.085 816.724 446.505 817.191 447.249 817.191 cv
cp
447.141 821.509 mo
448.269 821.509 448.999 821.294 448.999 820.598 cv
448.999 820.178 448.771 819.866 448.063 819.866 cv
446.864 819.866 li
446.073 819.866 445.63 820.13 445.63 820.706 cv
445.63 821.294 446.265 821.509 447.141 821.509 cv
cp
448.855 814.517 mo
449.12 814.373 449.203 814.085 449.275 813.677 cv
450.211 814.001 li
450.127 814.528 449.743 814.889 449.287 814.997 cv
449.455 815.284 449.539 815.632 449.539 816.04 cv
449.539 817.323 448.508 817.959 447.261 817.959 cv
446.984 817.959 446.696 817.923 446.541 817.863 cv
446.265 818.007 446.169 818.198 446.169 818.438 cv
446.169 818.751 446.373 818.895 446.757 818.895 cv
448.112 818.895 li
449.371 818.895 450.043 819.446 450.043 820.442 cv
450.043 821.894 448.483 822.276 447.032 822.276 cv
445.81 822.276 444.61 821.965 444.61 820.825 cv
444.61 820.106 445.126 819.626 446.037 819.554 cv
445.533 819.494 445.27 819.134 445.27 818.69 cv
445.27 818.247 445.497 817.875 446.085 817.72 cv
445.413 817.419 445.006 816.855 445.006 816.04 cv
445.006 814.793 445.917 814.073 447.249 814.073 cv
447.908 814.073 448.448 814.218 448.855 814.517 cv
cp
f
452.036 818.187 mo
452.493 818.187 452.853 818.534 452.853 819.003 cv
452.853 819.458 452.493 819.817 452.036 819.817 cv
451.581 819.817 451.222 819.458 451.222 819.003 cv
451.222 818.534 451.581 818.187 452.036 818.187 cv
cp
452.036 814.193 mo
452.493 814.193 452.853 814.541 452.853 815.009 cv
452.853 815.464 452.493 815.824 452.036 815.824 cv
451.581 815.824 451.222 815.464 451.222 815.009 cv
451.222 814.541 451.581 814.193 452.036 814.193 cv
cp
f
458.097 816.22 mo
458.097 817.911 458.792 818.931 460.124 818.931 cv
461.455 818.931 462.139 817.911 462.139 816.22 cv
462.139 814.541 461.442 813.509 460.124 813.509 cv
458.792 813.509 458.097 814.541 458.097 816.22 cv
cp
456.934 816.22 mo
456.934 813.857 458.181 812.538 460.124 812.538 cv
462.066 812.538 463.302 813.857 463.302 816.22 cv
463.302 818.571 462.066 819.89 460.124 819.89 cv
458.181 819.89 456.934 818.571 456.934 816.22 cv
cp
f
465.776 817.599 mo
465.776 818.667 466.496 819.075 467.12 819.075 cv
467.947 819.075 468.631 818.403 468.631 816.939 cv
468.631 815.608 468.091 814.961 467.239 814.961 cv
466.448 814.961 465.776 815.548 465.776 816.579 cv
465.776 817.599 li
cp
465.776 822.181 mo
464.697 822.181 li
464.697 814.205 li
465.585 814.205 li
465.716 815.272 li
466.04 814.373 466.856 814.073 467.552 814.073 cv
468.907 814.073 469.734 815.057 469.734 816.844 cv
469.734 818.534 468.87 819.89 467.335 819.89 cv
466.483 819.89 465.968 819.494 465.776 819.015 cv
465.776 822.181 li
cp
f
474.103 819.566 mo
473.743 819.782 473.275 819.89 472.76 819.89 cv
471.765 819.89 471.165 819.362 471.165 818.331 cv
471.165 815.069 li
470.361 815.069 li
470.361 814.205 li
471.165 814.205 li
471.165 813.03 li
472.256 812.897 li
472.256 814.205 li
473.899 814.205 li
473.899 815.069 li
472.244 815.069 li
472.244 818.114 li
472.244 818.715 472.521 818.966 472.976 818.966 cv
473.335 818.966 473.587 818.87 473.899 818.667 cv
474.103 819.566 li
cp
f
476.228 814.205 mo
476.228 819.746 li
475.148 819.746 li
475.148 814.205 li
476.228 814.205 li
cp
475.677 811.71 mo
476.097 811.71 476.433 811.999 476.433 812.431 cv
476.433 812.838 476.097 813.149 475.677 813.149 cv
475.292 813.149 474.957 812.838 474.957 812.431 cv
474.957 811.999 475.292 811.71 475.677 811.71 cv
cp
f
482.214 818.343 mo
482.022 819.458 481.136 819.89 480.044 819.89 cv
478.593 819.89 477.597 818.858 477.597 817.012 cv
477.597 815.165 478.593 814.073 480.128 814.073 cv
481.303 814.073 482.07 814.696 482.143 815.8 cv
481.159 816.005 li
481.063 815.309 480.691 814.961 480.079 814.961 cv
479.132 814.961 478.641 815.8 478.641 817.012 cv
478.641 818.187 479.216 819.026 480.128 819.026 cv
480.716 819.026 481.11 818.751 481.278 818.114 cv
482.214 818.343 li
cp
f
486.247 817.275 mo
484.761 817.239 484.112 817.575 484.112 818.271 cv
484.112 818.727 484.412 819.075 485 819.075 cv
485.575 819.075 486.247 818.727 486.247 818.079 cv
486.247 817.275 li
cp
487.339 818.438 mo
487.339 818.858 487.53 818.954 487.747 818.954 cv
487.878 818.954 487.975 818.931 488.059 818.895 cv
488.059 819.733 li
487.902 819.794 487.71 819.83 487.471 819.83 cv
486.835 819.83 486.427 819.566 486.331 818.942 cv
486.044 819.638 485.396 819.89 484.688 819.89 cv
483.717 819.89 483.033 819.339 483.033 818.391 cv
483.033 817.167 483.98 816.46 486.247 816.567 cv
486.247 815.884 li
486.247 815.2 485.839 814.937 485.252 814.937 cv
484.652 814.937 484.292 815.249 484.245 815.824 cv
483.213 815.669 li
483.297 814.493 484.329 814.073 485.348 814.073 cv
486.427 814.073 487.339 814.505 487.339 815.776 cv
487.339 818.438 li
cp
f
491.071 819.746 mo
490.784 819.817 490.593 819.843 490.4 819.843 cv
489.704 819.843 489.129 819.47 489.129 818.643 cv
489.129 811.734 li
490.208 811.734 li
490.208 818.415 li
490.208 818.763 490.412 818.907 490.7 818.907 cv
490.856 818.907 490.964 818.882 491.084 818.847 cv
491.071 819.746 li
cp
f
495.32 822.181 mo
495.32 811.723 li
496.244 811.723 li
496.244 822.181 li
495.32 822.181 li
cp
f
502.268 819.746 mo
502.268 813.642 li
500.217 813.642 li
500.217 812.683 li
505.446 812.683 li
505.446 813.642 li
503.383 813.642 li
503.383 819.746 li
502.268 819.746 li
cp
f
509.298 815.296 mo
509.167 815.272 508.987 815.249 508.807 815.249 cv
508.027 815.249 507.271 815.86 507.271 816.939 cv
507.271 819.746 li
506.192 819.746 li
506.192 814.205 li
507.104 814.205 li
507.235 815.704 li
507.452 814.709 508.147 814.025 509.382 814.085 cv
509.298 815.296 li
cp
f
513.114 817.275 mo
511.628 817.239 510.979 817.575 510.979 818.271 cv
510.979 818.727 511.279 819.075 511.867 819.075 cv
512.442 819.075 513.114 818.727 513.114 818.079 cv
513.114 817.275 li
cp
514.206 818.438 mo
514.206 818.858 514.397 818.954 514.614 818.954 cv
514.745 818.954 514.842 818.931 514.926 818.895 cv
514.926 819.733 li
514.77 819.794 514.577 819.83 514.338 819.83 cv
513.702 819.83 513.294 819.566 513.198 818.942 cv
512.911 819.638 512.263 819.89 511.556 819.89 cv
510.584 819.89 509.9 819.339 509.9 818.391 cv
509.9 817.167 510.848 816.46 513.114 816.567 cv
513.114 815.884 li
513.114 815.2 512.706 814.937 512.119 814.937 cv
511.52 814.937 511.159 815.249 511.112 815.824 cv
510.08 815.669 li
510.164 814.493 511.196 814.073 512.215 814.073 cv
513.294 814.073 514.206 814.505 514.206 815.776 cv
514.206 818.438 li
cp
f
520.325 818.343 mo
520.134 819.458 519.247 819.89 518.155 819.89 cv
516.704 819.89 515.708 818.858 515.708 817.012 cv
515.708 815.165 516.704 814.073 518.239 814.073 cv
519.414 814.073 520.182 814.696 520.254 815.8 cv
519.271 816.005 li
519.175 815.309 518.803 814.961 518.19 814.961 cv
517.243 814.961 516.752 815.8 516.752 817.012 cv
516.752 818.187 517.327 819.026 518.239 819.026 cv
518.827 819.026 519.222 818.751 519.39 818.114 cv
520.325 818.343 li
cp
f
526.241 819.746 mo
524.91 819.746 li
522.979 817.264 li
522.644 817.264 li
522.644 819.746 li
521.564 819.746 li
521.564 811.734 li
522.644 811.734 li
522.644 816.424 li
522.919 816.424 li
524.755 814.205 li
526.062 814.205 li
523.831 816.784 li
526.241 819.746 li
cp
f
528.259 814.205 mo
528.259 819.746 li
527.18 819.746 li
527.18 814.205 li
528.259 814.205 li
cp
527.708 811.71 mo
528.128 811.71 528.464 811.999 528.464 812.431 cv
528.464 812.838 528.128 813.149 527.708 813.149 cv
527.323 813.149 526.988 812.838 526.988 812.431 cv
526.988 811.999 527.323 811.71 527.708 811.71 cv
cp
f
530.972 815.272 mo
531.271 814.444 531.907 814.073 532.747 814.073 cv
533.658 814.073 534.426 814.577 534.426 815.788 cv
534.426 819.746 li
533.347 819.746 li
533.347 816.112 li
533.347 815.429 533.034 815.009 532.374 815.009 cv
531.703 815.009 531.067 815.368 531.067 816.567 cv
531.067 819.746 li
529.988 819.746 li
529.988 814.205 li
530.839 814.205 li
530.972 815.272 li
cp
f
537.979 817.191 mo
538.71 817.191 539.19 816.808 539.19 816.028 cv
539.19 815.249 538.71 814.853 537.979 814.864 cv
537.247 814.864 536.815 815.284 536.815 816.028 cv
536.815 816.724 537.235 817.191 537.979 817.191 cv
cp
537.871 821.509 mo
538.999 821.509 539.729 821.294 539.729 820.598 cv
539.729 820.178 539.502 819.866 538.794 819.866 cv
537.595 819.866 li
536.804 819.866 536.36 820.13 536.36 820.706 cv
536.36 821.294 536.995 821.509 537.871 821.509 cv
cp
539.586 814.517 mo
539.851 814.373 539.934 814.085 540.006 813.677 cv
540.941 814.001 li
540.857 814.528 540.474 814.889 540.018 814.997 cv
540.186 815.284 540.27 815.632 540.27 816.04 cv
540.27 817.323 539.238 817.959 537.991 817.959 cv
537.715 817.959 537.427 817.923 537.271 817.863 cv
536.995 818.007 536.899 818.198 536.899 818.438 cv
536.899 818.751 537.104 818.895 537.487 818.895 cv
538.843 818.895 li
540.102 818.895 540.773 819.446 540.773 820.442 cv
540.773 821.894 539.214 822.276 537.763 822.276 cv
536.54 822.276 535.341 821.965 535.341 820.825 cv
535.341 820.106 535.856 819.626 536.768 819.554 cv
536.264 819.494 536 819.134 536 818.69 cv
536 818.247 536.228 817.875 536.815 817.72 cv
536.144 817.419 535.736 816.855 535.736 816.04 cv
535.736 814.793 536.647 814.073 537.979 814.073 cv
538.639 814.073 539.179 814.218 539.586 814.517 cv
cp
f
542.767 818.187 mo
543.224 818.187 543.583 818.534 543.583 819.003 cv
543.583 819.458 543.224 819.817 542.767 819.817 cv
542.312 819.817 541.952 819.458 541.952 819.003 cv
541.952 818.534 542.312 818.187 542.767 818.187 cv
cp
542.767 814.193 mo
543.224 814.193 543.583 814.541 543.583 815.009 cv
543.583 815.464 543.224 815.824 542.767 815.824 cv
542.312 815.824 541.952 815.464 541.952 815.009 cv
541.952 814.541 542.312 814.193 542.767 814.193 cv
cp
f
547.952 816.208 mo
550.71 816.208 li
550.71 817.12 li
547.952 817.12 li
547.952 816.208 li
cp
f
556.518 819.746 mo
551.948 819.746 li
551.948 818.895 li
553.867 817.347 555.294 816.292 555.294 814.757 cv
555.294 813.894 554.827 813.438 554.071 813.438 cv
553.327 813.438 552.907 813.894 552.907 814.553 cv
552.907 815.009 553.171 815.417 553.507 815.692 cv
552.608 816.136 li
552.284 815.884 551.853 815.296 551.853 814.541 cv
551.853 813.534 552.548 812.538 554.106 812.538 cv
555.39 812.538 556.409 813.186 556.409 814.721 cv
556.409 816.747 554.395 818.114 553.243 818.739 cv
553.243 818.786 li
556.518 818.786 li
556.518 819.746 li
cp
f
220.257 832.011 mo
219.813 832.635 219.237 832.935 218.35 832.935 cv
217.114 832.935 216.167 832.167 216.167 830.608 cv
216.167 829.12 217.114 828.281 218.446 828.281 cv
219.381 828.281 219.909 828.642 220.257 829.36 cv
219.429 829.816 li
219.25 829.325 218.925 829.073 218.41 829.073 cv
217.63 829.073 217.126 829.612 217.126 830.608 cv
217.126 831.567 217.594 832.132 218.434 832.132 cv
218.938 832.132 219.25 831.927 219.549 831.472 cv
220.257 832.011 li
cp
218.362 833.942 mo
220.185 833.942 221.672 832.563 221.672 830.62 cv
221.672 828.677 220.185 827.286 218.362 827.286 cv
216.539 827.286 215.052 828.677 215.052 830.62 cv
215.052 832.563 216.539 833.942 218.362 833.942 cv
cp
218.35 826.938 mo
220.377 826.938 222.032 828.485 222.032 830.62 cv
222.032 832.755 220.377 834.29 218.35 834.29 cv
216.323 834.29 214.68 832.755 214.68 830.62 cv
214.68 828.485 216.323 826.938 218.35 826.938 cv
cp
f
226.511 832.61 mo
226.595 833.247 227.051 833.522 227.71 833.522 cv
228.346 833.522 228.814 833.282 228.814 832.778 cv
228.814 832.323 228.61 832.071 227.951 831.903 cv
227.135 831.712 li
226.127 831.472 225.744 830.956 225.744 830.14 cv
225.744 828.894 226.775 828.474 227.831 828.474 cv
228.994 828.474 229.713 828.894 229.821 829.972 cv
228.766 830.093 li
228.73 829.54 228.395 829.288 227.759 829.288 cv
227.147 829.288 226.787 829.564 226.787 830.032 cv
226.787 830.429 226.943 830.68 227.543 830.812 cv
228.311 830.991 li
229.294 831.231 229.846 831.688 229.846 832.659 cv
229.846 833.847 228.91 834.29 227.699 834.29 cv
226.439 834.29 225.708 833.906 225.552 832.899 cv
226.511 832.61 li
cp
f
234.118 833.966 mo
233.758 834.183 233.29 834.29 232.774 834.29 cv
231.779 834.29 231.179 833.763 231.179 832.731 cv
231.179 829.469 li
230.376 829.469 li
230.376 828.604 li
231.179 828.604 li
231.179 827.43 li
232.271 827.298 li
232.271 828.604 li
233.914 828.604 li
233.914 829.469 li
232.259 829.469 li
232.259 832.515 li
232.259 833.114 232.535 833.366 232.99 833.366 cv
233.35 833.366 233.602 833.271 233.914 833.066 cv
234.118 833.966 li
cp
f
234.396 828.604 mo
235.571 828.604 li
236.531 831.651 li
236.854 832.694 236.962 833.415 236.962 833.415 cv
237.01 833.415 li
237.01 833.415 237.094 832.706 237.418 831.651 cv
238.342 828.604 li
239.481 828.604 li
237.586 834.146 li
236.327 834.146 li
234.396 828.604 li
cp
f
242.266 831.591 mo
242.998 831.591 243.478 831.208 243.478 830.429 cv
243.478 829.648 242.998 829.253 242.266 829.265 cv
241.534 829.265 241.103 829.685 241.103 830.429 cv
241.103 831.124 241.522 831.591 242.266 831.591 cv
cp
242.158 835.909 mo
243.286 835.909 244.017 835.693 244.017 834.997 cv
244.017 834.577 243.789 834.267 243.082 834.267 cv
241.882 834.267 li
241.091 834.267 240.647 834.53 240.647 835.105 cv
240.647 835.693 241.283 835.909 242.158 835.909 cv
cp
243.873 828.917 mo
244.137 828.772 244.221 828.485 244.293 828.077 cv
245.229 828.401 li
245.145 828.929 244.761 829.288 244.305 829.396 cv
244.473 829.685 244.557 830.032 244.557 830.44 cv
244.557 831.724 243.525 832.358 242.278 832.358 cv
242.002 832.358 241.714 832.323 241.559 832.263 cv
241.283 832.407 241.187 832.599 241.187 832.839 cv
241.187 833.15 241.391 833.294 241.774 833.294 cv
243.129 833.294 li
244.389 833.294 245.061 833.847 245.061 834.842 cv
245.061 836.293 243.501 836.677 242.05 836.677 cv
240.827 836.677 239.627 836.364 239.627 835.226 cv
239.627 834.506 240.143 834.026 241.055 833.954 cv
240.551 833.894 240.287 833.534 240.287 833.091 cv
240.287 832.647 240.515 832.274 241.103 832.119 cv
240.431 831.819 240.023 831.255 240.023 830.44 cv
240.023 829.192 240.935 828.474 242.266 828.474 cv
242.926 828.474 243.465 828.617 243.873 828.917 cv
cp
f
246.958 832.587 mo
247.415 832.587 247.774 832.935 247.774 833.402 cv
247.774 833.858 247.415 834.218 246.958 834.218 cv
246.503 834.218 246.143 833.858 246.143 833.402 cv
246.143 832.935 246.503 832.587 246.958 832.587 cv
cp
f
253.677 832.743 mo
253.485 833.858 252.598 834.29 251.506 834.29 cv
250.055 834.29 249.06 833.259 249.06 831.411 cv
249.06 829.564 250.055 828.474 251.59 828.474 cv
252.765 828.474 253.533 829.097 253.605 830.2 cv
252.622 830.403 li
252.525 829.708 252.154 829.36 251.542 829.36 cv
250.595 829.36 250.103 830.2 250.103 831.411 cv
250.103 832.587 250.679 833.427 251.59 833.427 cv
252.178 833.427 252.573 833.15 252.741 832.515 cv
253.677 832.743 li
cp
f
255.995 829.661 mo
256.259 828.868 256.834 828.474 257.674 828.474 cv
258.585 828.474 259.353 828.978 259.353 830.188 cv
259.353 834.146 li
258.273 834.146 li
258.273 830.5 li
258.273 829.829 257.961 829.409 257.302 829.409 cv
256.63 829.409 255.995 829.757 255.995 830.968 cv
255.995 834.146 li
254.915 834.146 li
254.915 826.134 li
255.995 826.134 li
255.995 829.661 li
cp
f
262.979 829.469 mo
262.979 828.604 li
263.783 828.604 li
263.783 827.981 li
263.783 826.53 264.707 826.05 265.69 826.05 cv
266.134 826.05 266.518 826.146 266.841 826.278 cv
266.637 827.202 li
266.35 827.046 266.11 826.962 265.75 826.962 cv
265.198 826.962 264.875 827.237 264.875 828.029 cv
264.875 828.604 li
266.29 828.604 li
266.29 829.469 li
264.875 829.469 li
264.875 834.146 li
263.783 834.146 li
263.783 829.469 li
262.979 829.469 li
cp
f
267.791 831.352 mo
267.791 832.743 268.282 833.438 269.242 833.438 cv
270.213 833.438 270.705 832.743 270.705 831.352 cv
270.705 829.996 270.201 829.349 269.242 829.349 cv
268.294 829.349 267.791 829.996 267.791 831.352 cv
cp
266.723 831.339 mo
266.723 829.456 267.718 828.474 269.242 828.474 cv
270.777 828.474 271.772 829.456 271.772 831.339 cv
271.772 833.234 270.777 834.29 269.242 834.29 cv
267.718 834.29 266.723 833.234 266.723 831.339 cv
cp
f
276.249 829.696 mo
276.117 829.673 275.938 829.648 275.757 829.648 cv
274.978 829.648 274.222 830.261 274.222 831.339 cv
274.222 834.146 li
273.143 834.146 li
273.143 828.604 li
274.054 828.604 li
274.186 830.104 li
274.402 829.108 275.098 828.425 276.333 828.485 cv
276.249 829.696 li
cp
f
281.938 834.146 mo
281.649 834.218 281.458 834.241 281.267 834.241 cv
280.57 834.241 279.995 833.87 279.995 833.042 cv
279.995 826.134 li
281.074 826.134 li
281.074 832.815 li
281.074 833.163 281.278 833.307 281.565 833.307 cv
281.722 833.307 281.829 833.282 281.95 833.247 cv
281.938 834.146 li
cp
f
285.993 831.675 mo
284.506 831.64 283.858 831.976 283.858 832.671 cv
283.858 833.126 284.158 833.474 284.745 833.474 cv
285.321 833.474 285.993 833.126 285.993 832.479 cv
285.993 831.675 li
cp
287.085 832.839 mo
287.085 833.259 287.276 833.354 287.492 833.354 cv
287.624 833.354 287.72 833.331 287.804 833.294 cv
287.804 834.134 li
287.647 834.194 287.456 834.229 287.216 834.229 cv
286.581 834.229 286.173 833.966 286.077 833.343 cv
285.789 834.038 285.142 834.29 284.434 834.29 cv
283.462 834.29 282.778 833.738 282.778 832.79 cv
282.778 831.567 283.726 830.86 285.993 830.968 cv
285.993 830.284 li
285.993 829.601 285.585 829.337 284.997 829.337 cv
284.397 829.337 284.038 829.648 283.99 830.224 cv
282.958 830.068 li
283.042 828.894 284.074 828.474 285.093 828.474 cv
286.173 828.474 287.085 828.905 287.085 830.177 cv
287.085 832.839 li
cp
f
289.366 832.61 mo
289.45 833.247 289.906 833.522 290.565 833.522 cv
291.201 833.522 291.669 833.282 291.669 832.778 cv
291.669 832.323 291.466 832.071 290.806 831.903 cv
289.989 831.712 li
288.982 831.472 288.599 830.956 288.599 830.14 cv
288.599 828.894 289.63 828.474 290.686 828.474 cv
291.849 828.474 292.568 828.894 292.677 829.972 cv
291.621 830.093 li
291.585 829.54 291.249 829.288 290.614 829.288 cv
290.002 829.288 289.642 829.564 289.642 830.032 cv
289.642 830.429 289.798 830.68 290.397 830.812 cv
291.165 830.991 li
292.149 831.231 292.7 831.688 292.7 832.659 cv
292.7 833.847 291.765 834.29 290.554 834.29 cv
289.294 834.29 288.563 833.906 288.407 832.899 cv
289.366 832.61 li
cp
f
296.973 833.966 mo
296.612 834.183 296.146 834.29 295.63 834.29 cv
294.634 834.29 294.034 833.763 294.034 832.731 cv
294.034 829.469 li
293.231 829.469 li
293.231 828.604 li
294.034 828.604 li
294.034 827.43 li
295.126 827.298 li
295.126 828.604 li
296.769 828.604 li
296.769 829.469 li
295.114 829.469 li
295.114 832.515 li
295.114 833.114 295.39 833.366 295.845 833.366 cv
296.205 833.366 296.457 833.271 296.769 833.066 cv
296.973 833.966 li
cp
f
299.109 832.587 mo
299.565 832.587 299.925 832.935 299.925 833.402 cv
299.925 833.858 299.565 834.218 299.109 834.218 cv
298.653 834.218 298.294 833.858 298.294 833.402 cv
298.294 832.935 298.653 832.587 299.109 832.587 cv
cp
f
300.995 829.469 mo
300.995 828.604 li
301.799 828.604 li
301.799 827.981 li
301.799 826.53 302.722 826.05 303.706 826.05 cv
304.149 826.05 304.533 826.146 304.856 826.278 cv
304.653 827.202 li
304.365 827.046 304.126 826.962 303.766 826.962 cv
303.214 826.962 302.89 827.237 302.89 828.029 cv
302.89 828.604 li
304.306 828.604 li
304.306 829.469 li
302.89 829.469 li
302.89 834.146 li
301.799 834.146 li
301.799 829.469 li
300.995 829.469 li
cp
f
311.059 828.474 mo
311.994 828.474 312.702 828.978 312.702 830.14 cv
312.702 834.146 li
311.622 834.146 li
311.622 830.5 li
311.622 829.816 311.322 829.409 310.698 829.409 cv
310.063 829.409 309.439 829.853 309.439 830.968 cv
309.439 834.146 li
308.36 834.146 li
308.36 830.5 li
308.36 829.816 308.06 829.409 307.437 829.409 cv
306.813 829.409 306.177 829.864 306.177 830.968 cv
306.177 834.146 li
305.098 834.146 li
305.098 828.604 li
305.949 828.604 li
306.081 829.673 li
306.369 828.821 307.053 828.474 307.809 828.474 cv
308.601 828.474 309.176 828.821 309.319 829.696 cv
309.595 828.81 310.315 828.474 311.059 828.474 cv
cp
f
314.194 835.513 mo
314.194 834.997 li
314.782 834.913 315.166 834.649 315.166 834.11 cv
314.675 834.206 314.302 833.906 314.302 833.438 cv
314.302 832.958 314.638 832.694 315.106 832.694 cv
315.598 832.694 316.018 833.091 316.018 833.75 cv
316.018 834.938 315.298 835.453 314.194 835.513 cv
cp
f
324.548 834.146 mo
319.979 834.146 li
319.979 833.294 li
321.897 831.747 323.325 830.692 323.325 829.157 cv
323.325 828.294 322.856 827.837 322.101 827.837 cv
321.357 827.837 320.938 828.294 320.938 828.952 cv
320.938 829.409 321.202 829.816 321.538 830.093 cv
320.638 830.536 li
320.313 830.284 319.882 829.696 319.882 828.94 cv
319.882 827.934 320.578 826.938 322.138 826.938 cv
323.421 826.938 324.44 827.585 324.44 829.12 cv
324.44 831.147 322.425 832.515 321.273 833.139 cv
321.273 833.187 li
324.548 833.187 li
324.548 834.146 li
cp
f
326.71 830.644 mo
326.71 832.203 327.333 833.391 328.389 833.391 cv
329.444 833.391 330.079 832.203 330.079 830.644 cv
330.079 829.049 329.444 827.897 328.389 827.897 cv
327.333 827.897 326.71 829.049 326.71 830.644 cv
cp
325.618 830.62 mo
325.618 828.604 326.661 826.938 328.4 826.938 cv
330.14 826.938 331.183 828.604 331.183 830.62 cv
331.183 832.743 330.2 834.29 328.4 834.29 cv
326.602 834.29 325.618 832.743 325.618 830.62 cv
cp
f
333.55 830.644 mo
333.55 832.203 334.173 833.391 335.229 833.391 cv
336.284 833.391 336.919 832.203 336.919 830.644 cv
336.919 829.049 336.284 827.897 335.229 827.897 cv
334.173 827.897 333.55 829.049 333.55 830.644 cv
cp
332.458 830.62 mo
332.458 828.604 333.501 826.938 335.24 826.938 cv
336.979 826.938 338.022 828.604 338.022 830.62 cv
338.022 832.743 337.04 834.29 335.24 834.29 cv
333.441 834.29 332.458 832.743 332.458 830.62 cv
cp
f
340.413 828.881 mo
340.413 829.745 340.929 830.116 341.624 830.116 cv
342.32 830.116 342.836 829.745 342.836 828.881 cv
342.836 828.197 342.416 827.729 341.624 827.729 cv
340.833 827.729 340.413 828.197 340.413 828.881 cv
cp
340.257 832.215 mo
340.257 832.995 340.772 833.486 341.624 833.486 cv
342.476 833.486 342.979 832.995 342.979 832.215 cv
342.979 831.388 342.368 830.968 341.624 830.968 cv
340.881 830.968 340.257 831.388 340.257 832.215 cv
cp
339.19 832.358 mo
339.19 831.447 339.741 830.836 340.521 830.584 cv
340.521 830.524 li
339.682 830.261 339.334 829.636 339.334 828.856 cv
339.334 827.706 340.245 826.938 341.624 826.938 cv
342.991 826.938 343.915 827.706 343.915 828.856 cv
343.915 829.636 343.567 830.261 342.716 830.524 cv
342.716 830.584 li
343.507 830.836 344.06 831.447 344.06 832.358 cv
344.06 833.546 343.112 834.29 341.624 834.29 cv
340.138 834.29 339.19 833.546 339.19 832.358 cv
cp
f
124.935 130.508 mo
118.347 112.601 li
118.347 112.601 107.642 124.54 91.5889 124.54 cv
77.3843 124.54 67.2988 112.188 67.2988 92.4277 cv
67.2988 67.1099 80.0601 58.0527 92.6177 58.0527 cv
110.73 58.0527 116.494 69.7856 121.435 84.8125 cv
128.022 105.396 li
134.608 125.362 146.958 141.417 182.568 141.417 cv
208.094 141.417 225.384 133.596 225.384 113.013 cv
225.384 96.3398 215.914 87.6938 198.212 83.5767 cv
185.039 80.6948 li
175.982 78.6367 173.307 74.9316 173.307 68.7563 cv
173.307 61.7578 178.863 57.6411 187.922 57.6411 cv
197.802 57.6411 203.153 61.3467 203.977 70.1973 cv
224.561 67.7275 li
222.914 49.2017 210.153 41.5859 189.156 41.5859 cv
170.631 41.5859 152.517 48.5845 152.517 71.0205 cv
152.517 85.0181 159.31 93.8696 176.393 97.9863 cv
190.392 101.279 li
200.89 103.75 204.387 108.071 204.387 114.042 cv
204.387 121.656 196.978 124.744 182.98 124.744 cv
162.19 124.744 153.546 113.835 148.605 98.8086 cv
141.813 78.2256 li
133.168 51.4663 119.376 41.5859 91.9985 41.5859 cv
61.7412 41.5859 45.6846 60.7285 45.6846 93.2515 cv
45.6846 124.54 61.7412 141.417 90.5596 141.417 cv
113.818 141.417 124.935 130.508 124.935 130.508 cv
124.935 130.508 li
cp
f
36.8467 120.832 mo
34.7886 121.451 32.7295 121.862 30.0537 121.862 cv
25.1138 121.862 21.6143 119.599 21.6143 113.628 cv
21.6143 1.44043 li
0 1.44043 li
0 118.774 li
0 134.212 10.7046 140.597 23.2603 140.597 cv
27.3779 140.597 31.2896 139.977 36.2295 138.744 cv
36.8467 120.832 li
36.8467 120.832 li
cp
true sop
0 0 0 1 nzopmsc
f
297.223 117.54 mo
291.872 121.246 287.343 123.1 281.167 123.1 cv
273.345 123.1 269.022 118.982 269.022 108.896 cv
269.022 60.7256 li
297.43 60.7256 li
297.43 43.8472 li
269.228 43.8472 li
269.228 20.9961 li
247.409 23.6729 li
247.409 43.8472 li
233.616 43.8472 li
233.616 60.7256 li
247.409 60.7256 li
247.409 113.423 li
247.409 132.364 258.318 141.417 276.021 141.417 cv
285.696 141.417 294.341 139.567 301.134 135.656 cv
297.223 117.54 li
297.223 117.54 li
cp
f
315.997 124.949 mo
315.997 133.391 322.585 140.184 331.023 140.184 cv
339.876 140.184 346.463 133.391 346.463 124.949 cv
346.463 116.305 339.876 109.72 331.023 109.72 cv
322.585 109.72 315.997 116.305 315.997 124.949 cv
315.997 124.949 li
cp
f
368.839 60.7256 mo
368.839 138.948 li
390.452 138.948 li
390.452 60.7256 li
414.743 60.7256 li
414.743 43.8472 li
390.452 43.8472 li
390.452 35.2007 li
390.452 22.2334 396.011 18.1167 405.068 18.1167 cv
411.449 18.1167 415.772 19.5557 420.713 22.2334 cv
424.211 4.1167 li
418.448 1.44043 411.655 0 403.421 0 cv
385.306 0 368.839 8.64502 368.839 34.376 cv
368.839 43.8472 li
355.046 43.8472 li
355.046 60.7256 li
368.839 60.7256 li
368.839 60.7256 li
cp
f
500.868 62.5796 mo
498.396 47.1416 488.311 41.5811 475.137 41.5811 cv
461.963 41.5811 450.642 47.5513 445.699 62.1655 cv
443.024 43.8472 li
425.526 43.8472 li
425.526 138.948 li
447.142 138.948 li
447.142 85.2231 li
447.142 66.9004 456.61 59.9023 466.697 59.9023 cv
477.195 59.9023 481.519 66.9004 481.519 78.2231 cv
481.519 138.948 li
502.926 138.948 li
502.926 85.0171 li
502.926 66.9004 512.602 59.9023 522.688 59.9023 cv
532.98 59.9023 537.302 66.9004 537.302 78.2231 cv
537.302 138.948 li
558.917 138.948 li
558.917 70.6079 li
558.917 50.229 546.978 41.5811 531.127 41.5811 cv
517.748 41.5811 505.808 47.5513 500.868 62.5796 cv
500.868 62.5796 li
cp
f
124.935 470.352 mo
118.347 452.444 li
118.347 452.444 107.642 464.384 91.5889 464.384 cv
77.3843 464.384 67.2988 452.032 67.2988 432.271 cv
67.2988 406.954 80.0601 397.896 92.6177 397.896 cv
110.73 397.896 116.494 409.63 121.435 424.656 cv
128.022 445.24 li
134.608 465.206 146.958 481.261 182.568 481.261 cv
208.094 481.261 225.384 473.439 225.384 452.856 cv
225.384 436.184 215.914 427.538 198.212 423.421 cv
185.039 420.538 li
175.982 418.48 173.307 414.775 173.307 408.601 cv
173.307 401.602 178.863 397.485 187.922 397.485 cv
197.802 397.485 203.153 401.19 203.977 410.041 cv
224.561 407.571 li
222.914 389.046 210.153 381.43 189.156 381.43 cv
170.631 381.43 152.517 388.429 152.517 410.864 cv
152.517 424.862 159.31 433.714 176.393 437.83 cv
190.392 441.123 li
200.89 443.594 204.387 447.915 204.387 453.886 cv
204.387 461.5 196.978 464.588 182.98 464.588 cv
162.19 464.588 153.546 453.679 148.605 438.652 cv
141.813 418.069 li
133.168 391.31 119.376 381.43 91.9985 381.43 cv
61.7412 381.43 45.6846 400.572 45.6846 433.095 cv
45.6846 464.384 61.7412 481.261 90.5596 481.261 cv
113.818 481.261 124.935 470.352 124.935 470.352 cv
124.935 470.352 li
cp
false sop
/0 
<<
/Name (PANTONE 1797 U)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 1 0.99 0.04 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
36.8467 460.676 mo
34.7886 461.295 32.7295 461.706 30.0537 461.706 cv
25.1138 461.706 21.6143 459.442 21.6143 453.472 cv
21.6143 341.284 li
0 341.284 li
0 458.618 li
0 474.056 10.7046 480.44 23.2603 480.44 cv
27.3779 480.44 31.2896 479.82 36.2295 478.588 cv
36.8467 460.676 li
36.8467 460.676 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
f
297.223 457.384 mo
291.872 461.09 287.343 462.943 281.167 462.943 cv
273.345 462.943 269.022 458.826 269.022 448.739 cv
269.022 400.569 li
297.43 400.569 li
297.43 383.69 li
269.228 383.69 li
269.228 360.84 li
247.409 363.517 li
247.409 383.69 li
233.616 383.69 li
233.616 400.569 li
247.409 400.569 li
247.409 453.267 li
247.409 472.208 258.318 481.261 276.021 481.261 cv
285.696 481.261 294.341 479.411 301.134 475.5 cv
297.223 457.384 li
297.223 457.384 li
cp
f
315.997 464.793 mo
315.997 473.234 322.585 480.027 331.023 480.027 cv
339.876 480.027 346.463 473.234 346.463 464.793 cv
346.463 456.148 339.876 449.563 331.023 449.563 cv
322.585 449.563 315.997 456.148 315.997 464.793 cv
315.997 464.793 li
cp
f
368.839 400.569 mo
368.839 478.792 li
390.452 478.792 li
390.452 400.569 li
414.743 400.569 li
414.743 383.69 li
390.452 383.69 li
390.452 375.044 li
390.452 362.077 396.011 357.96 405.068 357.96 cv
411.449 357.96 415.772 359.399 420.713 362.077 cv
424.211 343.96 li
418.448 341.284 411.655 339.844 403.421 339.844 cv
385.306 339.844 368.839 348.489 368.839 374.22 cv
368.839 383.69 li
355.046 383.69 li
355.046 400.569 li
368.839 400.569 li
368.839 400.569 li
cp
f
500.868 402.423 mo
498.396 386.985 488.311 381.425 475.137 381.425 cv
461.963 381.425 450.642 387.396 445.699 402.009 cv
443.024 383.69 li
425.526 383.69 li
425.526 478.792 li
447.142 478.792 li
447.142 425.067 li
447.142 406.744 456.61 399.746 466.697 399.746 cv
477.195 399.746 481.519 406.744 481.519 418.067 cv
481.519 478.792 li
502.926 478.792 li
502.926 424.86 li
502.926 406.744 512.602 399.746 522.688 399.746 cv
532.98 399.746 537.302 406.744 537.302 418.067 cv
537.302 478.792 li
558.917 478.792 li
558.917 410.452 li
558.917 390.073 546.978 381.425 531.127 381.425 cv
517.748 381.425 505.808 387.396 500.868 402.423 cv
500.868 402.423 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 13.0.2%%For: (Hannah Donovan) ()%%Title: (lastfm_Logo.eps)%%CreationDate: 6/26/09 3:04 PM%AI9_DataStream%Gb!Q;pNGi5f'e"fh>ot,c1Dpi`g@fn9cu8k6B-PEcMIOMc[I1n?j!hlKJh'Nmau#^-!3]:;cC#:ra_R[fGrK&q0GYLrZ+nKSR/_K%l1V+ZI]qId\Q([rH=!:hQ]:>tVpbrVHL*i12ZT:nliC2'$,5H*A!dpWO5,[(.sel^0q/cggEec$%C6GAM</-P;!IJ.pPYInBkkPe%#(*c8Nks&s?`7+U2ji#:2>WmB33sYX%qE0R^.aSD/+@cg+8EUtmo=\K#K22MK``\4]DZ>a*7n<0heU4*UtY&DqUK^%BUC3TF+Qk)%25YPs0mbS[IUF4rD[>M.#3>b>IT5OqI(*_mqtXj[26g]Dkgai:f[GXnhOrKg<I7u<h&Qdr0E1%d"-/mRm.#<%C(FqN3SeSk@#r>9%IW;pG-gVXo-I`"=l$nE:Ku%H:hJ[QnQBS0@LugM>m&TaX!DErISG#2j(f3;b6-Sci3n`\]_ieWslhR,`,+]+H*>CDAH5TVm:;'KI%!G"$Arc@Wpf`nhb1Ssh2?oH11A-<_[iuYlU<r'QR)Qnd`*MBp=f<n<Td;<t%S5=/)=WSA)cj(?&kO\N":(QJb#Mh#?1Oqsc]@FaX%kYCaV2[.hSm-H]hh[d]8"QZ?!bbt&TaQ`As3R7H8;TsO4bDkDU%^81EAF'?5s2!aq/Cf7Oq`VXTf]7.&,mo#a(hPF#_5PKK33cW&%PlYp*,CjI/J_Ve8;teo/GOu#crNKkrJH#Oohgj9c)*smpGP!0M<E^HZUD1$pCbtD!7V0NYRj"md%JDT^Vs*euB2WfCZ%&e,Dh(XT%o7(HI1](Ro29GPnA"Wfre]$K+4kbNAF!'nd<=e[aICl9>#dT:a'?jlD;qEpsjb^_C7jg(&O3sl0rI;j)-1ln6EQrP#H6fZ0j[`d[%r7?o0>"anV*r\+mSes#Fo-lKJcK6@V!CWNO7Ui"G0c8R'%*a8DrH\<BJQVnS%6)K+DT,8Di02T>g!</]])$'KVcU?S,O#N=OTMtb%:Qt*okiHD,+S,0H?p.OL#L$5OCUd'%q0EHm#hmTe)`OfL[.W_LCp9`J\bd7u>#lAonT(iT0P^7UWCs1=JG]IsG-7"\cVC$W^OTc-%W]lnH?74V.Kcp6qR_o#q-1E#s\b5)lC\3BCUb[B!<Y#\`IFk9<]FS&Mg8]0mkJ2\ua!R1bW5:OK[fF0C<(BTG;]Vt`VJc>5Iq6AK%hr(8ZWBKNuqP/tJa5GEI70RO/CTMQ\*!r[q%PTI/(D-pb`05CdNhsQ)=<8@m;&ZI1HkAot:3GZlPX[-JLBi4qhl81[#^iaBS7k!I%E"D"#J-mI/YGR<u4L2h!N.&Y42qZCTiB@Gd?$n'J3CiD_Yp'GMJP,[u3;sA?!<+ht5pd)/5Nm%G7tD`-%kBO+pco^smMT\1NIV#,%qU>POp1hm2!;d;:DEE0JL&tuh&pN0DgS]3okeU/6g^_>6[LK*W&3uGYNN9m5_1(H-I^IjIp(sh85khK)!?]@E!E9oVgUWmRaNJue%g+4-8P;&e8N?@j5F_(Q['E^J<M]Mnoe6ARh)"hd\3\6CeS`i>p_%o;d%6"B$X<'Z7P+,dYOFILAV'm_-aT#QufANnCn;!DB%ssb?%gjq9*J8Otg]6H[BJl\Z"HoYePN]fo3+.pClq`e;F^IJ0Jp[uj_fnBV#,Ad5&@!O`?KqIfZg9"01`)3g%qs/_\GLi6@Xai.Lc"KD(%Q#Pm<nk"H/ke)Xk'O<d8bRFg_clfEu\33&blR+:a00/!Ujb0B(cNh?6X[MYsY3Q%aN?7pdnQ(E>s2,HYV`-rQQ2dp4qg3?#g's]j%#TX&P`KZ8??f)ZMQN&.,rdWRs]?.heMllN!GT6"8o?mS]>o[h\lor0;E-/F_juT:#e!ZBTF_^`E<PhM'45dh1WIN15qjEU-E=MrS%;mQ546/SdnrEIZ%r/XY8FEhh93e*AfkKeX(3iDIGC)Y"7*d@d4HEq24nOdD9rLNribE#V/F`Uq[1ccELO.1T+T`3CcXQ]Uj$p:6@%dLlC'*SN67Al0aXK#SV;%B!-QI&<M(2XguJ4bP12kTg9cb_mM9/PL7#khYTi.m_8g5qY^:qo'J,TUWi*4_9hSYc/R'lb%JpDa=L$%mTkFObFTTQGM</VlKAcBG<T'r:)P%DfB`-&VJ+IS0[GC"VGi45/tCPTE<W/m\cgjGCjJmdbV=FY8aNFQo5#RHqMk<+<nHPbn(#PM%Hp8InQh10Je#ICn?K^hKKD"jjR*t9JAp[do/$J)/+][c<HE[Y1J3IZo6gi<"1"CD]RGWr-9,PGPgBnnLTW8Ml]q-7ASt+5fUZHk2%GQC0tIfj"N!KG-a+O@L&D_O`=D#_kW4^d2eYT0`7f4i%,Y5gRhcI]FL%sTO!cM#?Qbs+%kKc/O6r"kB!n+Ot;6(e'fYY@S+Ak\8h%\Z^1hDt[h)caR;f</"Naoi`"AbV(qj,"&"rNFu"7</$QF;Q]_VDA.p6EUYm3n\#goJNQ;JFK#j*Rr*^a!];[.c_kp=Cq#dMLL=[0%-J:[&)K9+T6gB=b@^LXC0h-=BK]bVc1H@SgOe)LU)]clp3-2a$aCG?Y'$Pe5%pa:K=Af*,M)=)uiBbYUFmFrD,0lubZd<fra\j%X%d?'_+m(6>+4e;4Z6h,IP>4BHsq+j@$c5]<&.d8DcFA@leMd\^<S"*Zef6Ff<2od/om4Q,r\K!))4Ik"Wa%"`F0hn#+nVDt'-K]6o%&S\]nVH6.Ha)*N%T;6QPIj_WO^Uo/sA$b0q9n%k1Wr&21lI-e&ddu0<^6aSO8k2X\lqk'q=+>2KDj3IMnQNfdO<.BR0%>kN(0!46%g=]OCd],B*`mf7-dNN4"rNG43S916L@MrO]65*h::X&_Wk8?AXH?/)js26-:6^-mBOM"6YVS*H6:&dRm`Yf4o$[f_K<L\0Vda/nk%%k:lSgLqHN8)CO+1%TdH,Il%$[h/#Z^*T@)e>WS!0Lm'bm4:@<%2SHB\Ks8Xce+ANQt,&ek-+a1]U'WP93obL@k=5W4C?Y=5l+4F%E-CAEl$VGZ2ib(3L6^l&&9dhMT5Sechm&Z\EFtGT=r&:EWQ,U=h),2er!(m4FCX@X4Q.--olV&,N&E1\/H)C[4+h]_(JeQcg1JbO%o^9N+A3PCpW'@QO=X&jq8'!R;G#>`r[15kYl8*57P'm%n^@E35.7u-b4rYl<NH$"\G-qM%0o5$BNMXP.;1.k!&+tOCW-$\]-0%;+%>G>)Mq^p5ik1Jf&CU290k%_L`5]g4t,oTK]?"@dJ`q@f.MhK..mle%@-\=X67Dd6-!ZD[('*2C1!2o@h!ZTN.oU/cJOC*go,e]+]%Hl_,=#d9BJ(38EUr?MUM_^j[bf#tmmY#WN#$)0g_Wq2kX:H(+1km1(sp;Jeniu<3*?VX7Hn?h[/7=I21'(^%6,<T,nVGq#6Fohk;%qgO$+]]$m=<.@q/]U1Y@.+0rtZ+N(PR[&<*qYRD.Cl("R5O=&t^;(j4Y3fTc>'>D*T%X?\"ai9^7#TG4];gIR;bZOX\n#HTS%AHY%(l;+^EAnM]83]G'5W[+i$aC$30%]BYZbhDZ/d*[bZ.\Pq\-1q<jARt/_S<BO,V]nS2Vb3hPFNZ6,.3HSo\,5-KUfBdGGkXYb,F3d%&i3m+OgO3:'JHFn"11!`_c2h0.%tXbWE+=!26A;^SL&LZn>K[0r>eu2EXbY*A`Kl\QW2CF*<sKK,e0Lg$'c"('uh#^@A6&NaL;sp%e=r7\G,_p"!]Ed$Kt1*Q_R8Ik99cE_$r`t2j0D'OI@EjLcO7s31ng).f2)0X`<K4"G%\Bp7>$b`rmjbjn&Hqf\Sc6Qg8srS]#\#L%*Ggqjc+An^g\`.<AMQ&lYBBMkc]Xp*g<rAa$u$fVFu*X9@'\0P+&t9;+P3a+WVH+f"VlEW*-u3k]WN4@cJ.UR9'p++pg2Yu8>G^0%!0"cZhdittYqU(Y<$^Q^$?UWm@NGf#!c3]Y=Z`nI+_c?$C%@SPi[Kt"j5*!(jO)MYkCL>nSCpVe`ZAj-K_)GG^oREMJpSESqsd3<%@0]O'%A3mqHG\>qI,WUCc,2b7NI`,Q+0=JG.&:KW9=R2,m7==G=Sr'-JJQGs5N5ej\4V>p@fjh6a#Ns#[f$sE^U9foZU%jkR<(un%Dh(]</I1&IF2hqRpr.1@RjhHK^VbKs2uq\DgY%kom:$h"gGd54i>QXf;,62g7`'W$-nFko$N]dqDe'YoP,!aX#ni#>!AqShfP.'$%+]0S\b'q?QL1Z-/J`"1Pd>?r-61Y\K2kWAlQ]INlgY%!0!ZKU!i5Z'TA0i/NfS^i^(b#hp_"+gAGX(oM_g0OZ;9ftMHti%TLl5h(%NT/B^Nm%QXEm6hC7m<KKK5J[/aiY!S*'!LH%2*_ZZ6X)flu0oc\Yj(i6Eu(,+s@dY@aWTaKsTc-jdK?9!?=Oe=mTB*-][O)bS`;S%AL`iP_43LiSiCmRC[`?^]MfX0e-Ir]45Gt]fq>Q6G0j8(m2(5Zc<$:m*UJo*%QGW?<O`JE^BQWI:e8u1hs@qikP):YVS"%;\(I\M%13QiGr]BI)S0f9i6aS,oF:lR?:538JI)Y,aBL6YVlq@k\kH:EpY;L?9.W1np^sepcKE`ZWYCWgGk,Eg'*MPB&40W024U_LSf&$*-%4;W#MDeeUe`4YgZ:Q?2THIe;eg^3G`,TY/9h%!'kKejhe3tH!9U#a^8MQs<k.:`58D;8:$Kk]QVK/&a\*@`'bQhqqZ'-b/(]WrlB%nS4+&!Y9Gl?THG&Z(T_moStN<,.9\C\U<[e0n"Qp['<>cX>L7AZast)\C!kVV^-+SVKq&+H:ljXOCo!bKma/_K$[6U7"EVu`jW]0%[@+8efi88/&,;T1j![kjEC^o8P^p72mJJ:j;%T0]:[+4^M1X*-oD22pC4fGp6ft`-\$t9?Peb_mUq&@]lP?"?eB/EFNTKuSGP1u;%A:XgH@m$%U,]eXb!!Y+dM/rO39U'\U4`Z=_Cs(uYiKGr26"1r/jm6O?gHXWL"sOGr30*t43pgi:o/40_cN/"j]9<t)Se.loK&pXp%k;/_g5`/\?VB<nV=6Xu0s-ccq8>[.`)JlTt"=>uqi&Bsc[=&nsK9ib)rOgmt7$&$9YSnjB=-mn7q"F@#3NC#TY'=4cj<E-CR0Ll=%G]!Z_Y0KA'R!i^9JDdW7j6CjU@(LNcpPD>T!WnM4`,jWT+W)'gLkY.h_`p*e3u/a<Q5El(lrf;6,H+0(dsgT$:\D;2/X9Q_^oheD%Ju\l%=k6Zp8&.@3B8LXX??2IfX*9TN6X,>4hl@2'CEFWT^YKlj2gW]_3"/G^IVW;fG"%k1(n'-D(Lo[VA<lR.P#Rr[Ap$nJd#=Y!%_H8AELXBB/RfjBB6/TX5OX<0q!cqQ243cFsI.Zo93+k<9W-NjYEu`/.8SaiAaegMnam&olWX7Z(lZ`l?;h^s[9UZihWB2.=p=AbG%fqK#%/Cca7I_fqJk5t$uQ,#rFa=LihZSH\U0q)X;D0ajMB:UL+]e1D07huZu@;bI>2kP2Vhn9(Xi9gcBi+A.>n)cg$<NplOruq3%%\EHdUPV;7/X9"Xa\9m&W<$Je>9g[-UjrNf:;nKEWF)C*-?,jA/qj8A,K%?^d).,Y!*lH&e>0@g/gI;jaZ\\Z?He*T9L?Q@Ck4k/n%3JaNFiWPfQf?!>Ul.?U*l[`sEX/Ggp`(r8\+/3C1=fg:JmXWm]^$5SFJf/6CVTGO,1I(VBON.8bYrcU%o2FQrq4!(Tp"X_s/c?9*%P"t_.__9r;KV?8NR$&[%p5+-T_(ni:blI&;E5T;qnOTaa-Sqh!#N9O,m!.2gRc9U$K`_-?Qg4F(KlbHD>ntq`]K+'W8)=ZFN='D%%Zu`#m7XUl+J#uUU>()m1!.GO'^oNaE)GN]^gmn(%ng(*D"d"T!96g#2SV[d?!CjH%93TQRM9roO[G$'A]m/R[^H[^J#>720q"At?%7!sZsB"+<o12*o97k2AuEO)br6X0>W9L<ef\H#kq.o)5oZrq3[BC3>IPqLkJI!j'oC7+tgUN#at8XSq6(+>4ZHCorT8aE86"Ida(%`2d4ERp,4(#2&A@W*uj)8@nu4UbH:!R@(1C9"ZMiYm]7C:+mI/#B6/^.U\D!56C;8lO's#p,9B0*BF04=T^b<T/iP4NVZ4:aCX5O%42K\rp9Y`Y;XJB8o9WN3&8Y,S?Ulmk0c>T/!emee)/Y"[M8P/d6ciRq9PfES2b.#h(h[[$"4YG4gts-ePETD3OmLGAr<5E<hi+65%m!c-tDe;Eoi7PTESD5F_k9j%f+=`Zh84iHuk8"_mhuZ^*E.>*Dgr;!f;VhG4bc2#1g9d/<i8#iILefPcf/I=H%ltK9GSAm1*H0F_%""HY*"k3NHXF5q\Re/EXfJ6e^06o]QdUb2/[/s6*ROOdVlfOc4&kOY_.neBa8d"t]dg<KZ$fqSM1:`$OqD+.mDgf8QW>u+i7t'%m%Bs3J4n^.1-6K"Ad+#Vp`[8([20;n46K=g\^oiJs*S[%(VFNirTs2\s/,@j<UGTbJKh2\iPWFWs>WiH5)D#Y'I@ao`V0BF!X^(qaQ%.>=<^T]\Eui2Y<IjJ9eG?k8a."?S<Dlh47<8s>/hg>8EkC`'d?^]oA?S=8Bh:5__<@W$YlE:F<X%fA!mbIUg*C[6>-\\*h<R>U9C%i*lh;C^tX<kj2(#L+-VEgk<N*-e&_[P)f0BW,T!1!T<L4a)*`'!a[5/"C=sj)_X5Y2[Ha"Mg-MYeI)'1d1$/lN?&'Q@QSAG(Ti%I%\C[#s6UftH*X+DfK_?fq:"1N';#,6SjB[D#D0D*KZOF@Y>+iYLZqL/uT,>O;!M%I>Uq/5]mg5J<$5PS)Uc#hTd7uh<HZi\j"TO^6%a7`mSf@DqDMG[q-<.-;XC,90OT&0Gd)d>8JU%>O@P\S7*khqQo/hCqo:0,.N@!0'!dN<s-T`fS$l%=a!Ie*U*Mb;&KM(kiq$<%Li%Zj@tCbAI8'JELK;@((j4+Vld<4a=,"+8Z%F%VU):TnS7Z(gbnVpS>4l1Hp+WMo1BdTm]5%k`_bX?Pc*c)MUig.d9T=j!S-SUHgh%%=m>T%D#a5!^6"-U:]MCqBh+'j7Zm3i_TemQBWqI@p2"d:U'7b1F0At^at>TX8p;2c)36<tPL'QLm&V\Mn)+u\8\?F'I:Q/*d9S-@%.n?6aiKW2XAQ'O;..<2,2AG*ig1)AmC[(<h*U-eJrN0cH&#=AqGk>jJN*0@0iN05+@612kJN6e*_NCTX/*',cSK&TrkM#KW#DV!4%^a(%VgF3Z]^t7=KiQ6X_/lhA[9KE=63#rDPTi('%5L*XOptJf+MGJeb<tD_/D>EjuTGR,!`W65c5"uj_7j8,LC5mjgR@;aE;35`D%7u*Ea4CGM15_m^1+^Vr(X_GYY(ls*)HFFLU`tIXTlsoqp,HR5VV!RN3\Qn4WFBEqd2;jNm"+;pGmacsDkq?6pQh=to[!ZKeD!khl%=-h_*R1^RJi]C*)L!4,a5jYnsp=u[P)rq\Ap`QVfT8]#!0D]2(P,#s'6(6tsd?W!<WN25[3[q&SZXSG_a'\.J)&R=\j5D'1p\eL3%3>gj>D@[!cK!(9nnqJO4@%Z'?-9:a@(LW[)EC!KcD,N34P;]%_%b-sCL!>,fPuTRr*fk'0pYPC)ot,tsXAp*M$rCSb!Z.o>,o3<8%44tJ\4!Hh*!;k5'$En+[Y(kr;>H$4j5\6gu84W5HJT$C:"*"hZGW0Hd(#o*PRSMDI5hLDlPS'6da[(Dl!=Q=Bq<L1:opF)ob\B1q%V9N.9FTSs3<,d9<*uG/LU?3OI6B-0ZS3JUNNgjS4\;.p4n^U9B#M?A*lZqh,Ck.MnqNu:a#,>6e9FoUg1Z7s&#!gb_"g\#B-SChm%MSNJ<)p."%OAm@V&b"J@Rh960eOOk-CS0KkgQ"_/f"TTSlB2fiImA9`iTcao[?NC9"RomGgk5hgF!*Z$rPa$Z:'Bl<+W/+NYnm&^%b9\TXfPsK*0oUm/7Gp=;eeX\(9X(kqGo8Rk"j-i*8h-A='Ji>LEW3hVI;%KD:@T751CJdX@)Z/#H8V=U*2F4#gW`2;C]Y?#esdr$%-r`=t*1r_&AAid:LQo'@1&@C2=rV;_?m0?'T"L9tlsHP!Hqet3M7]013u?*uMBBp=p@FR:.SYA'JK>bU7ioM`+5)?hp!Z,)WqX)6%%8*dk+Fkfe0nEe(A&9R"[Xt:Dq;[0$3:#7C2SbaIR]V+/Z40L?IfR>L[HO,epBUI*"RBMg(+_c0Gn](C=)JPa&==C92gQs5F2=S1%F`@d^r,uff'h>#;AaZQ$P2`.lp@$7F__sR]NM#s\K/igY^J@s;-YudG(&BtF;!mq10=4^)f;K7&Z^W&[#]Bgt;%9-+B`4q\1'-]8%'3r4b7B52Y2.[/b*=]I(PRnV!Ss<HbX]*GO4GQA8n=C#rmeWXlqQ,(5rDF]&?G\cpi0R9:n)]n#@/+.jW'VQ0NMW%^h,^nA<6-Su%R:9d5c0sa0qlSW>HD#M*]4L=[,ZM?#'t,!dpHig&i'Hgo]$#6u5Z5DXP%l:r@Mqa`!bO>k&-&S"B)W=BAJHeiKjWo7!gm*IUC.^1%)[Rr)isTUT9(m2RoU_1eh9V7hY;TlnU7&97_bBI'1imLn%'^J0Cpb2kQLqGcS*g3;Tc>rD/k:De-%g%j>4:N3$/4b/b7dE6<!oP(%Kma2E)7e.,\>8BZNA`"nZ]uk_ZJO?VbHiK,D6l;4O0`k`NO6#Fl$qonbc]XPLT$YFL>8>J9hu"@+S;t!7[s&l?*YU%B'G!2A$E_r%*uF<fZb`#@BO9_U[Xoh)CO13(n:[qC]sXKK&&`\mg-CIH1uY+DAin`%BX!\g3bg?4.'aX*hils.ba8EY335Vj$32q%XOkM9?"@-p%d^#X55Z&Bap8VESUkc`^%JE%IIN#93@d2@;rl6<>+n5F^Z^K$uHUphF5o\`td.8KnlKi[?d7uXD-&l``R74gSGdh$$9a#KLNdq9&%?=@WP)8?A29t+WRRH7U,$/>!P52"IG209%u9[t->AI8),A?W)rrht4WI_U8'L:9DK9RJ(Vg9R*hS!ItKRI'/9X_+ntAtn4H0tj&P%f7PlXS7k9sO@'M!H*a205\8[ZG/O-)23:ZUYUS=]\H__`g0pXDJTnAS=#%gY$<s+WnfbX_<Sk0$)!K,u?kdE:!Ldu9@K)#q%uF=8%!YG&Oi=#\nQ\4[BVh&V2A*B'&Ut60_-G++sj,3O>^PFX>_#j#eqpT<7?/eU(C^TkfFL0:V2fV/-KPJ5maI!CcN"K<qG0=6C=N'0K%fu^I]G<Wh!&SM7MNDBmI6!NKq.D=88W"aWBbuY!ZYreje6/rX/$JGic<m^\0Pt<rK>@t0DbAC2=(9QNOhoRN+E-^[G\Nb_Z,;DuG%\Psk'H4t'S<MFT.qnq]hr=tPo]H%BU]]#*Fm8[$$_>5ch:qYOSO,TS5(A'UjrK5QNI)F3X-B:%'O3Iia_d>]PY<uF^Q%PWo8F!7[%=`6bcB!\5Rc+hir<Bum*ZD]FW*+US>7$u;N_m>GDLa#;)CdTKT]r'4i3Bm^FUANtAIM%uZ$IB<Xr-rRN7@s67]V>6f+j+)NBQTqi%!_FKh84$eSn>;7Fi"@d&3Lbi`]ge(H:(j]L^Ll^/E.#1k8"StfOOQI^@CaLPe4=JkQ8O6V.h0!H7^b?6"tMm0b`CLF>\b;a9eh8b%ddh[UKN*3HlZ,Qf2F#[&3@r=KnmT=$n`<8(TB\Rl*cD%o5r:eGm+L^BPqUD4-KKhVOn'%uM#5c"-C9<DP0/oBY0k#>HO</I'RYBP%R=r?kbH1tR7k"b+82Vg0,=??R0nmn+M>T9DOSJ.kEb5X1%UDJqj.@"i+3,_$MjBtW!W6sfk^p5?m,[;0Tr/(X:FY)3@a(&,a,aT/%1%Q,"UNn(]HJ5T2DeDgoq-E8aRJ_n6JF(K_V?0Ur65)rZp2`.KI@&1dnJV`\0HcEkVos$ahOEX3^.tCP]Xq6k%?MD=2uMd,[sc?D%S%F1HcV;5FXfM?8H9>RLM!.]bN\:'cPlcm\hXKNhp%,2=+k1!E5cDI%;p*4p0PlrC@Z;7A[n#mjIQaB,?7i)Ql4_#o;mIk87b%WC%#2L'idq'T0k?-Wh8:53)]Y(L-""%(Yn(7jT^7%]kWH[-51t;Pod;/Dmn.1bZ_-.;UV[7h>W'[1,;\+'@)1S$"]MZeR#"-7V_9X.u%g0(n72@&mjGhHh>+)%Se^_i.=[a42G^/iS3k\Fpaf!_TpYc$rn_$[7;)q`Jm<mT0Ml9N$&TWe<FQT9V>"U::#6G(-K#-#kK8X/Gu%qdRTW7g%am!#0>u4>l`$qQO;A/*cNM^@5!pN0sEATn\2hGHdu\ZbpOf*mBskfn_G`<oe!$[%#FcOHi+>[@?e"^:Zl`.0=EeM/ObD%as=U_M8>Lkk\8=L-=d6d@=sETaU4Z$!F:\CcuM3M+4"Q9f23fCYQ+EXnrQ-1VKmF!H@2SVKF:!V]cRJ&0onb#UBtK]]5WF9nAL4_%.(T[19S[_*oHs]_;#U=.5\VbkfYqKh=C^R1>g'esYLKLS4LFJ[I3%4FUXC;n$0hqX(Z+-$6f!R%LXR:<*EWE1CF6Ft'-4/QbJs:<%kSMB$DV\-TA2Ec(Ehr5#%Sut2$*"d4[,R*oA-ZmiU[T=_PU/6B]2^nq-=JBNG-2jc:,?p3M2`oZU`?C58LO+%=pI8$[P3qXLdTTg%a>_4G7T0aq%Z(6UH=O,iiDPHg.)j*3o"jbHH.1X30_n(Z-uU$.47*LAaI$Q461j&?<IZVBZ[tD3[L7C@C-:&Sr/Ct7WR5A*QSOO#%:\*b+[;Ci<;P5IFX6H'l]Ga2TG`i0k6\d/FGOK1:Fps2a>ch#F2m^-f_$F@QX<u%d1H'iEPDSNT@0qB=RL`A1aS1;#_0c_V4Rd+t%,H&qiF@Tq#!aqIJPj?]a&&Fkb'/nFN8T&PERlJ<=G:f\-+q'dep)QKk@oo;$,\Z[A9?6Y`$CQ<Rg2)>h/b4OoFA013,Pbb$#5+;<%$V"mX51BJ`f-LVq%"4Clc%Q@5='mX4ZO8U\;M1i05omZN+#NP_h\f`Z>HpK1>Rl2ZX)[o<q%T;K7U`QX`1T<]CEP_GM@\udIpuB:%.&0)El<hd.L"_9'`He.$3bV-ta\*+YaQ>VhYsH32!/'U]kK&pB_hP?4r6f]Q]R'_te7QC)D`@;,jT[:S$l<^EWVKIc1oO%01ulL7%q5SV+DIZe2(c:mHXcK@id6W,fg:Q"1.NKGYn!I&`B\9@O,8q6%$X%Z4K9lEu:MZ9*M@I-Q7,+dc6#Cm-=7=@D+R#'bTUp<GUOq.1%kb'TYeGi]T\V_2U_HM"+9&2*G_-im9[oaFZ;M,I`PdTB[+#J]1#289ZX)t'EhJ95JDU>i:Gd1sln".!aG0o=5JiXjX'>a6gRhH8M%i<NBI\7*kYk."JIgSOi15<8n'6%)r:@SHHj"spO+\I7jZ3$4G*2"MB<Il$O.d6XgAK3NBC**m\s(P@<:\7%U<=S9l0,!KZm9tu1"%9LdDq)i"#bEmX*Qg`I_u/2l+@'\:?B,N=@<h7>W^O1^;[]$7ro%#RO5L2D=7?M79L(9qI&7u@g\LaKl_j_e.Acu*ic!P;6EY2=*b%R$&<Y1OsUl9:P^Ln))l"0c4m$K*!RC&,VWsXX+3`FB+5g@aK9=9?pUAd6Rm'[MP3('CXY<?s'o:Eml#Br*S6P6au;he!N2lJJep^%1.7,do9naG^,^ka6)0q\_[d-drVk2+ZX5RDW6]HphDY3hDU<gUE\UK%0_?]8:nm@$S1?qaoeF()<!.o8?YcKsm5WRNo3tNh3;qiH%#E:`b[L5N;h0RrTBMeG=.$9-_9K;Ah_[M983%/c$.)Y!8js[utqbmH?^I&,_BW,a^@'<2sZD%.Qf"f[c0Aecel+4U<#t[<tQ^t13%eC,;$mct@Q'bbp(<%k5;pbl4V]d9B4Spo/fMl4:>oBSs?D@sD4Q+lqXV02<5TG1%ed&5sRJBM3^90QA?!jb2=+Sd"$krU-3Vg6HH%k)t0S/5F&0Na4k&^5Re\M/NXIqK/OIA"QL)5J`9Heh-L_2ttht'"[()I@..>0:iQY*,.EZR3GFr\tMJ9q,F2+IZgB`ale(Xci5Kj%oQss!VBqie)D7b3jI"$[eUi\PUqR:M?OhE/T4VB#BM4e(]$Yh+btEIhYL-uHc&tkdG[X-95#m0=@kUTVkIAP)C'mNpoqo"TS,#&,%O>2.Qe5@gc@OI0^m#d4h[=68WF5O]X3]"OjNpa.(do[u('Ku]JgF9:I^QpGXRlTH^DgPb$B[pMe!.Tn2e$%Zl!@JgE7(9&7ecP;^%8@W!`qP=(oCW.6VHM-6Q:Lh\(SJj"]Bkj`/?<(M6)V6gc&(:RY<WW?888)hM0/)JY]kl^<6hQ^E_+q'p`QR[!n<6_"BSjH?(?e)T%Ls>;7i45-[H2ub$osOf>`5>gB$^nD9]uR,:=87O:!>3qp%4HJ@rLKc(.Wlt4b``;kMS\$l-T)N=0h3Ck2R(*9YT>dV%ZFKc^:3Q>%-98HP.ED@'BL;5CkA#XZl_OMO]P:`bJe#ptQf5%\Ksr;kcn`H4CV`NE;WN*sT46ke')+`cCm)`1Rl<@u0T,?7Dit@b]X9j!Fd'=Y%O!bE`Y`e(D1gU?u_bqq\I3L:pDgpuKMa:di#N?j,:U$C*$1f0=$_a-=(&?-_TPP>.$EX5PB9r%mrdLn(O/]11/eh"d]KW=?g)l25%l_\So&ou4Fr_h/^%(U7NZ:uk/(pf]D[C85u.%grnH:g.tQImZDbZJO[<+;""*<-^$JC)9e+C7gj(W2;m#<ZVj[A.Z>r/7Eb4!%5V%'sKReXa#ZM%Cf_rhX@sm]rf:!o6gum$^2@tfWNZ]7;&\.5!?Pt/Z60+?IuoV5i:5;#rq>14PfbZO!RC=(sYelSLJGr[_2h0ciP40%G?X<-lflFpZH+=6Q_!(JLKf5J#ASQP+]\CZ$ns(!3TVB+a7O/Gcg6D%&IiTO>N9scD@'\cKeJ?(Maeg-9\&)rK'Bujr:i=?&UC)L%:FRQnCk<Oho\7P,3+'_eBa06#7[(F4Ns_U'KiD=>l6NqUfURW"(sJ(D(K;RoWZpPMM@Fau+ugV;_cf=SfQ#:XU?fmUj%L,F8gcjT%HY0jQS1/69d9O*WC5K$WE2G@"18ef_n-9q9V$#cnJeI,^1_24W"``m68/OT,T!f2=o*'-\MM[OpFW"Xj#0n\Cb`/qEZK)+gp-HPD%WM+i%Q%44e9=o24M/S:-h<oLm\mft1(Nn<50p_LtFQ`s/REZ,r$1c2.+\oGSc]bu#F7<p8UYCkP+n(l001M*aY[?fFcUDr-ft3&=%l-@Ba;.8LYZjKHT-8+!;h)^.a$hgTbc(Jp==2MU`lIh_L/sVr%#/g.tXQU!OTf$(o!o=/j76e:VK@965RjRsad.!7[Z9;[GjF.M@%,b.\7@ajt4malD102J*q>ptXag%B/PE\0OJ&^?CKf*nXKShm*Ro7M@JSKV_C%HmPd_$iX$Jg<WW8I86AP3dCT,d:`Z7"K<br>Rqk%8A\=eGrGc!pN6]g=XOA,GhJu_f.WR2m_lOE([hIcMe1c832tr>aAF8K2FhB!Dnnd]\i0P,\QFGR[]WPbM?]oMS0nn)<4Z<#\8>%H%0<Kl>!atc:!CU,qIKh6X[2MlEmX`I$mg]7$7pO/DJ8qD6Gm1,:"liS`ap;AK#IGf@dIlfH\K*8D:2@L`$J+=e4^A2n1ul!k<pK1M%+NGlU@o?pnR^<ENE,%HR&6IVE_#Bc$=:-f6IESNJ,7aNZP2lc]pg[JUT+:[b6B3XL0=%-S`X+S9.cP`FCWlSj,5A0;8q80;+]![P%.7`0-/k7'sNMES-U=:`H"`)c$eUQ/Y82[1FZBIMM=IG.I0I,G#U*Ks\jFI5uJXkPO/A+km^LNq`SoL@MQ+nos5V[VoO8_]'ZS^I&%7uR*,!6I[:`g?B-dEc%X9:&o5<ri3C2#"p/Q.(2mlt>j/Wuo:^3DCaaW[N>,Yce\'ge.nFU@F-EZe@)/qjA`mHTfgKFlbF%`jXm]%C`hJAA&BG2Es\t_>UUo;D\71q=u9ZB7,66eh]9a08`c<)g4Og47Fr-;O?k@eBIGFj$)ba)iL=h5210\l;`V-J@`84.NSW.@%>i$I%TAH;$6QAlkd,KFc/f%T1M,hD1Y_>/?1WV\A/j%fhB9M'+rS63%QgBgT7faDnbHL[i#Q(`kcR;>N*O@oGP`IYHqRZln&$7L"8%DWB%`u;A&I0ghV2,0?:pZF+SB1hS<P?Y9Rl2gJD9Q%u6/J39;]aG"^Ys*Y,5.u)'mk0c-2g+[KGp:A4h,H/?jaIYV%p,ebT(fddgkn+5%=-:BLDA5K1\!&ADm"<D3nJKsX)R<^RhoCpbX/npk+MDnZ\WrFUDOkJYfsD2j`ZOQ`j;*5KbtUqa]lefO$'OA`f#`t`g]0nQP?TL?%7!TO<8LpBi3m5?+aqFCY7EjaciiP%/$`-Eo3mgkg+>Hrkrll<OSS`1a0K7kEV1'r:3>e,rDG.:P-m).2TQ$'Go;,AS[g77E2<B<@%e$8b=8YNTZS+K768BjqOSL+p=?0GMLir!peYEYihg]\tg=i-9sr)%d/E/RL!%)K=V/)c-D,dYnh556#97!rrUASI6`h@lPPj6Ed5%OUi[ZJcu"ZV^taJS\0;uDGd8joPRYtgh+ZlOkXb0S>fCJX1C#e0[ofV,ea>27/!IaK$.I"[5NTLR')ukXl35pIE,MX]'h`;OuuA=%bBUaN+5OVHA-"2,428%^(EC%Ns-;T2PWfXuOaB;.l+39^FcBr3,,b)&@4SE,OS76XrFB=;KnO_EJ2l,VoH[:X>^\V$M0a:!Dh9VZ%/^3mY=O"pl]!8fk=GZEjl19>>1]YSU:Qa_X7\tIkGrtZ'71\dGR$#!L!'DZ8An*-"Wm]#8ofBkWR!fRI`H`j7B[nEb*0I>qc*\6G%Zac^E`T'S#N0`d__B[9VXE*+;>MaMnNdA?91U')pN%*sf9O$rG[W$SO[dYkcWN^t&!?Pc(;_5RhT4d)#/:;gAe>r_9,5H<NqmJ3,%A*qI0kX4X8]p7Bi='<$PEqrhnN*+rBebDk?E[bL;$X]Lo5N7BJI]W*E=E,mHQmK?*']^&U3VLOfJ`MrE9#h,e'Bb9B111+i+Ks"(%9&p-$cbtAjq4)usU(TsGY#HIH1rTN^a7K4JV@P!X0<7.m>j9jQCmE<g5$YX(%4/bhS1ce*JE;?n4ug</;?ue_,pZU4B*Bi:=m+`N%CFd`sL'T"O?@lp\ZRpCSj&M!+Z9RPWb4[6LEr^ks-+>SlWd\Y>JW)aZfS?@Enlsa$gK<</C/:ZfbOA(Yk"DMq6bGpor_=7)XN+t"%k^^@<)jQNZR<Pk\$dftH?$C:@JP+a?jCR/)pgBeSmB4[=A;90'\TNXGh];jtSK@iNLnX]l'\u+_]1m;VJR(jSH?Z7p-25c*-ane`%\I3\N([Y)Y*`BR"LE\Sdb4j7_D%C0]dK::SHO,qtgj`WZ1L9*kZ@\02ZoU^#&"Q^ES5]."4bRu)kjcYIRaO@;Q*3J8S?F5oNmS2@%O),cn>C)WkJs]0D\r04#Y?#Y/=uHRlUiq,V;Sgt0O/bWAagbi!J6-L]gLQ(Sf>p]B@L&N6n?%J!I?[86Nh"&ih]PVHrIu>h0j!<s%<tJI-q:52H\'>W]bhg1??!gBf&i=9'S<`$&)jK"jFc"mB,ll47Mp+P$")2V#]DT/BSW.;HPi-iij\SNN%jMCO[=h&h_F_bC@E2tc%7'i"$%f6)CQEm=qG!'pr_=bZ\Tm5STH)1Z1(g[b2\.(Of.j.T`gV'D!5ll6aD,2>.)?#LI([T1dpcK&/UG":Ihd2XO=')FErHV[s%aEPWDqG-o^]"hLgS)u<k_+IPt64IgVk0q1_RX4OH6&nemd:lo>e&'KLhVd$ZlIDe_@mGn!7fVfjqqoRK"a"HB[D)K3NWn9\%4.Ra%]=+/a/AAuE&VNH)UMq:\7)5&NN*#RW'`D5(YZcs5NTHPW(Ob#0?F!SDG<G=&hTI_70DAE0+r8C(3aST^21I_e:C[Tc+KLkWBuc#b%Am-eYfs,kmkT>fWeqc_2@4T0@$7_UFpMk3e,lMSBlA)ZUD@t]FVVg/:FLVuXHntjX%<YWH*GI*AcFe/]cBR6S\BZA33hgDnM_je=%31R>BTGUt8^ni8E8i&kJW_rsY<J9Lr@2liT-gYU4o%[QI0\rfAPUsnM8lqtJ+`26b%KS%R.=#""T>H"&&r@\r`4%E?DaU94pbg::%a<J0ZD2':iAFc]$r/3Dd7!)HujufGV]i6dq?*7Z=ANK,eoWUq8O(*N4Y(T<s2AD`H5(XhfmJd&%j873@VqN23>jR[$_sI>3^FugU%7h=KWD>Q#5paY,:4TP:0H<<AfIhm?4T_Scd@2X5:;E30[m1m`Jh.;"iDWqLDI`5;ZXY1u$^b3`8*]S]d9_;'pl=PmD9TNY<c77Z?%f_KkF=iW.\m_0&rG#8E+:<?kjTtn'!,OT'&L]`+s'-M1C3*GRIdbU2Q#(mD(iqP,7U?%_%k_tfrob8pS'U+]JJgfjj/H;2n\B;UF%+<U&S#R*I5SiE#'-@+2\pq&gc!^2i9[;/Qj<fU+kjV"(/4s!<]XRB.Yr-+=Z\>lR?bs3t?%,1G6^.0%CO`(Qbddj;e[i$TK!@1ic%*6%.lh0#MW9e/I0.eCZXBs_9Wd'\76iX<M^.ClU34V`+\5s:J5LQS`Z8hLU'Nm'eErsE^I)CL!`X&>nKHQlY8RU1fu]rG5$M4p_l%q5,*T`+%0ngr'W%'_S6bnc>.bd&r'#>ku-qbj)dhR63rdP)eS+i50,=)05'Z[\t>iWC$OAICiAunp:%i,f6_0OX\;Gr/Ds\3]lfq%Im6h5FJdZ8(spqNMX"WYOa@eN/(a]>!WI:4?30P?Z*US'/!07S#:k(lP,l3a\Y$r$Z+BJGfd>fDaD%%!ie*LqgaU?#\mIfX8uc)q%2dp.?gsm]9+rN8WIWAIT)5-OPm*$?M29]R?=/?'a2pb?'YtXjYkbje(HVdN>W!)rJZ=b8Zk=6fR?%O_u]?&jQL>5X2!pP:O7+Z+K%hdMe]Rb>Z'(#GtLNn&82'<qnRCTMF$4pf3-TT2eCSR&d5Dq@Y;X77(,h/2Rh]0;[kcJ>m6jfgiQdef!jRR7fXiZ%T/@F.P_fDDcY%\HfUE7*QGJ)aA8Qnp/F8<p"W4_F\YjhB\lfMnC@SDI/l#5DW%A.C!>SrF?11%G`G/4P^.CjGX@rN??%0?e6]X\]S9PW>)./jYs=r%e,(80<l$MQ9'KNJIKR@sGY/6SCjd5.KY(=:^*ouB"<>%%)2BoO:j=!N8[\u'-?f!7#j,E,:)&;>'j_EO;Ncfe)&op13u!AH*SDXB%?XSp%'r>#n@Z4@P&?A*uidI#"FoBq4E^E?H+uK(H^#F58f?iGGchQp\#0Yg6niUUT"Yf^1;3D>EptiOO0kde97DuO+_)H,3ScfM:%kYJ%=mI=%en?(FaPat6.E9&%RN_FR#>]U)#B.<@nfXd!ZF6d8M9[A,-W@@s<BNNN$.YnWoof6.Y,T'<+MIFoF2c)F,TR$!Y-q`Br%dWf59iQ*`"-].To3adT<@Zi*q#\j+1ar#p7Xk]lB;%D?FpMfO_7u!p-="3(bgcl#+3n-?+VCLDc9^pu:+RR;.<Bl5ViXoS5(lAt.%Aq+NH"__J0GM,+$X;`fqJ2u8/9X*/B(2fU`oQGs.-MS]rK"i-+km!DN'AU01Jq];lbORdC)\6*rQ1'TW'^Lg.UOi'nK_NK!?]8*7%-=L6q`+P9q;=Tp9a0R&E#qN3)Q*:Y5Hnltn/q6lpZ?sII_OfutZ$?:l/a$]+o!&.'RE[,:>9+'UP#=eZd-QX7j,[5_9;$k?'lFOi%Gb9tsruETa9&^M-mrOWa,+%s%#$EU3$@W7`IlAiZdd)60.Td)mr!R&K"=feV"J6\i*OXuB:r,gF:]"m00hefDpM<g5(af%OgOAT[%"gdk0dVo#2%OtQh'.j$hhhP%E@`57;NX?Q>"KQXj7Kn]YK)*rH(+NFf/!]PUW*h>RYSbE0LC+g7"Q/4krMX*aN]dmf/-bNBl(3kA%(Af#+`1Mtq(;g9-eUK>(=?I4G2C_f;'.f#3r=peabVN*Z*>Nt^bi23m?nk?Za?<V>6j8LR:%=X*@T9S;2rsrR'eEmbfEq"f:r-UW%'6*;0W*h@>,i1*J$WO>I-5bktSr3pk>>r()aN%,n;RP(2X/Z;V+pMor4VbX@?$q,I$9@g=G7u&77iY_aEm""#]8>Xq;H-G<2mIa*%ONigbrnYN`fOE6t-m!UlYrkSjHiNMX'2+Ml,KqOje>`LQHs[@AGo'GFcQ8XLniZnh@egZO-21\MU5SJ9D4[Bg.mk-1O"H[!L/NU,%<fAV"=IqV%`V3l#++*&2^"?fE4eP:T?$nk);(Mg!$XJ-E[eTRNjf["MpLB-7e\;W#Hp>',I1tppki2K9KYr](KeC(]>:^gAh=2[o%7G-VKh6qO#MslG@MI`i-U5SK\(+X[6kWK=g`tgmu7_]=8XO;sFFL(,iqm"*ih&TfbLG$:_>C:>-PbF$(`tk^tpS3ZBW@>e%/#qm!%Ik@o,Cbb7lhM3_LS=1_3=<\NEmcU'WgeZ0`%D9P:'&SU!QHYHGmcP'rYoJ@".cS,`>KiWah.`0$hT>t^\#rK1`GX+&'(Oh>;-&eE%HNHZ>V#\('H]7MM&jJl8s45V'@[*]7q7.>R`AmBp@?`EaiZ(Sdfbe;rgJ4>o;&6^G:J1Tc!i%<$'.<P#`[K_k?_7b]B^+_MjM!gO%WV[F]=fRA;\QELY+AN9/p'e%oM4Z2?n[GaJ^WB_0a#Y`dn33NqR7B=<^3WTol[6G@rta0goIT7k=D&Ze,^p^%F0Nsf%YJo.IgbQn%>=%m<XL"'/W.'eM5-#h&CKP4uZ1#a&5-eH_XOu"+cMVka-&PV:l[7UeOrhS'96j.U`B*T]B=)%F'%Zk&5PCGJcI,b[R98Xa:95MV%3qG-jU!ioAf(o"YVOi?]<ef]3/_6=s6l%BLGHfB-Y#&,OFV^PprB75<5:DSpIQl>Nc\\@)!;n.EZcIUk$Wq$_l)`>34fktdP5cTS%=krF0)sb_?3$)k;rs%'MU=T/o@@_l],q6kqhi'(XJp$4<c=41Ecb_a7R12&irHGKkI".m`r(k0j5Bnr(-e;Gg[Zfl_SU%$;;AA:=%=D*)[kGJX4`B*V&:@^Q\cc@T+ONpXKF0VgMF5NIF++50qjW-a`=QfQf>(".@AJrJ-Z-Ku_^3H^F;mFWo\4c3IesSJ4>Ree^_)h/l%=R=;Ocb_a7#5D4okr2`-bPL;7K67s/\,6V9kMP/\-]W>8170Q5oYBq#c?t,CN;Xcu1N.fsFnn+$B>-T]L3Yi2R?,[)ht6k?XL!S.%Gr!rRWo!<W=D)&+q<qa_`T$jZA"EGpUi>>>^cID1&b0tE1G>@S')u0<B/,tTI&s[6H`hgOFVZu1q?pD<?87A0^-)egbTiZirT%<p%SOF`\k?sja2%2f4"._!#FcJJ)GN#"P;9^THF)]CpaBY"u3Oi[H<&6j\4os7dO(oHMaM5PKbG1Mg,X2=]/<=P3I7*EC\E7#a'RgOp%=WZ+@ohOHNER"'QB%aXIhgoRWq%i+ji0rb)buYm3&D&IoC'M<@.C`u8<3tL7beM"PbG1NRl9>=$/<=Q.1sE.Cc13_uaA[BdY#ufY%H?uLY06,6'o]7s1=mQ@K7rZ]`e\If^9aRt*hK_1ME;p!kHo][If]QjpZ9hg&Hp+]+VkBJJ!NoR3g9)%CO5ZPh;9^THF)]A2ho>Fa%>dO?sML+:ni0rb)br>,FEL(*l$8KRgRE@-9V8UW&%4J#6q3b*+nh-PqCg4)LO7f!bY2jXS]>4?0@Q/5`Fe;XdQ$cbH(Bh95V6VWI%[)t!hdW6nMOuFo'DIn\Xc<h^R>.um_Bp<t!!^enB?CdE&#9?W:XR$j%:JAS)WkY^!>`Tt'JsfrGBMnJ0+s3YEHa$$%$RU.WVH@kW%&_K\Vd8M70>JK]m(4i$hE=g$!bJ(ShM1_f&9s]W@/DRG5RlA#SeYSh&l"hHbb&hfqUdEjP:`_]oA0D)o6&/G@RR?=+"JoB0@6XJs%&?QS[<</_(1VIfWA0iA:>LPasP9C99(@HZ2$5n2r,[[/oLuOTc5TqZJ@':Cq<Mos:G[5jo0E[G4DHrH\aD[.Z-RelUc\7MskcqKM%26.un94+X9LCpM0?,Iqq0)M"[]OTjLF2B#I=YWU.ifY@;-j&BreVk\?WY!k;IaR&6ZG)9(dn58Y)fL<l^Mr0%2bMs@9>en)l$i&G%l`,%[n4rjnoQ.(q8-E9K")4(Q&L&(ol2-\=dG:po7aQ%b"!+MlrT5-G9$u%Dm^l<JRC'Da4@`HE%VMUR:c]4jndai00NO7L_c\EL%>$?t9H&&_Hc*%g'r>V+W]D@T&_c\ELqDYkd-q?c8l7O-&LU0me$+u08ph6$WW/E_?,*#@@RGICn%(e->]U4+R3FnG"A7Y"jDUuM3%?UMiV/!iZpKSo4@>%R0CU[V`;<GN&bEuLVN7EudSIK%:D-nTI>M^[I_2`VuX\LQjURj=6c!CT)I#SN:G>4;Cq)Z<]skIRl+E_O?@%J<]ltYBpr;Y3]DR)`C[L9;QiQ^Y,cV*c17)85"0.maPNfY[SPPfll36'Ppj9ipoK&?HDo#pE[aFA^b]seed*6iV1&PW4^P.mi1_D%"%5:`]<_3[V<+AZpa!7Q75,rF]miS>s/tb3H:kY>/P@VY;G2gNPoiu%]67@'9.`f;#@Xi<p&%)14ZC30MYA[?1';H!+oXnrW"3Ji%H(XPR-WY2`ER>_5mQRmBOCi'ip,4ndoV?h)d*%nID]6?S0nk^$q1</=Dj?#ik'P@TjR,GV6Q&6[*4tBWK--"BYmt,$>[9S#EgZj'%75DQkW#Q$#YNnYlY/G2K;Rd4hUJfIkq0N`mZC2A8[/dc6`-9kaJ)f=S]djQ1_[>%i**R'ro*;+ieOlL"Fnoeu<'',EBt$q*:>A)B%et3/K"C`NtA)!c?Ad.m,an\+%+TL^VFTGsMIP]5o+0;9`<sVC3cf0,/U:sBL/*?.;mo=nj<<ZSqRBP)r?ED];fXKpSnM6XZl0AV\%4d+Ysj4@9p(UgW_rUnnQN\gX`hN#R>6COO1<F?up^Ff-;hnf8]<u<&Fo9HNNi*A8Qc)fiN<;u$G$]ZYq+-lSCKUJm)$/Wjni6S%m%l[>RKI*F%pj>:kjLt!jP`WV26%nTe4.P\ca]5DYPI:p7bjXJ#e$Xp-.A:fA78DW?Kp[&D$dX66E.um5S!+Z8"?783kIkgNWQ1p^)%VIYhW4]kQY'E#hj+?Mq[qfNYG_^>.OjKAH>pV&(E@L@Fo)qc[$(&_U5';(hCR#k20r?@,\S`fI&OL</%OI]a;!bA3$hD1UbGP).H%V9$pi*sTgJNVhT#6["(\DSBWETpf&-<+hDtm=As&hT^uXPgubNTq"($rNf]@GR9XW%2*j[,FXPb,q8+V6.i+5j;g#FkN2f:1@**>%$/&?s?Z0S?^iV7$^nPcDQ92SgWqs/%40.AM\:eiqfH'O3nsOf'nt('XUN2'hr0A?7-$=E!64-fG\TLZd*Dp+Vo&F2kWc[$NXbRlo%7q)eH)nm%.Q4(A6+uJak>Bn]Pg>J7h0Lsas9^/'0+?%t\2_glR^5+(p^E"]Y1fC3V$]k>+7Nm4hq3PN^hD)rD:=)*IesoYf7grqT%lNdtlqE)=*CGfB28Le$sN'58`o>.'`f)Wk$:HRneLR\Ci42O$oN$"pL`o\rhm-]8Jbqgm2)ApWeLb8"Fkf^?0<Z3Y1h5<]F0`\PW%1%`mMNW&5`[tLM@5t`J.JNC>"?YlrWo%S^A^MP-Qb*>PWg<B.jWZ8BSq98^PQ=!@`=E-pYY\Lup`+k]c"0:m&'<HcPQWU$WG/0QT%L(W`RlR&\pHmrO<?>G.@<SVr&mqr/d@Jte_bV2`=_<a?E@HQKQ2jhKa^pl2qoaKu?;,oA-=@="G[5Zb#j)d$S*h:.fh9Ju0f'?M9%f0FRPkXsB)<^0gP?=&5DGGB=AdUbO,I<#&<+sU]b0'N--W,QGCkYKXt(3okpSDD&@n="_5M\Ck%75R9d`NJV5\995PhLZ79AANW>%GC-V_iHa\tIiA^$/st"98e>l!8'NeW8FSV"!F.bb@/WXB`%^X<$R-')\0Y;=0srPE[ipc/7#o']aXE(DMXRU:[c\UH=bZ@FG%s8B%>XOtZ9\TDirHH%!9B:o*^MI>@a#I'$18_rqkqNb/Z5]u`iWJ[4[u+9AZ?P^@6!\!V;5Q6]9^TU'CFVZ1SQBk2[ag4NMXVLp2X9T2%dTX9NRjd\0].b8RXY9P04^jcQcc>s<OFH6\,b)_J,OX3R+X/f-)*3SL.ieke(:*I%^%RJaIJn@_d/+TRK!1GZU79[W!.E_]Ye:aL%IR3GcoO2XBV]n_4#Q#IS>ebf_\mNg+]_^qWC>b"f5Cdrd+g&<XAP?_lkgMfaP@tR:I:+--k;=qFrbA+In+e(IC)Q2f/K>6t?`&lh%YbZ%\&Gr$Lkqib$"c^W4D&r^=2e!'A"pg0*G!CM*dH9EE-WemoG3:Em+%%q%Mu($aGc5;OafNkq_f>XF1?L82R9:"`L]s3dfP&Hb%Oko)kT6\7gM%:M\@F.\CC`c)&(Z28X3!jp-[P$'>e7%T[]!8ND2>F/%(#1@m5MrE3FCOqu3q/bqE__CB12cq`e/;F]0S>1I,->-(%obGFNjJ:Q&'?g1!%B"d:*"BPJ(%`0.-cd/oH93b/@jJI@[ZeU'g4kqTRf\sH.``7kZ5Ha68?CphCY;'/3El=`J]TG?`0l`n&,Y32%a._^Sn9EQ^j:D^rn^Su$6T7k!fAm)#fMgU%@jjWE9D)4JQK-t<G>r%7F+OXO.^@'E1TUkPehg>CP[d\`kL1e\k@S.l6):Q'Pf@Gp%,j#2a'6Buh)R,m>+5pi_UOb1\54-D\\orr^FW?&d6uUa*:9=C]Al`h'E%Z!J;X4P_Tu*!npf4-mk(mur=2f"oa?^&o>R7'<Jk<Cm%acSHTBC.'BA##Q4!G.!;i9'Stp/B(qG8!N-7Tpn%ai*IhXg,4PRJFpWLdU#YcB&pDo5^Wb!pIq;-Gg(KIWVRVCX:!4D_OoUlH!q[%Mg8YIY=tf%'F&6D])h24s68JXEOh,UB"gC0dZKdN<$o8;nt+':1pB$,glY`t=\F"./ctqW't(UJ"+gK;e)D)29't(-0D^2Q*pba*%U3)#HUWqNe[I^fbM&A3Zm0mC;&EOGI(YAu<$Iq(h89fK"&Nr0=GY9DkD6kSO%Ti>AZr:jq-\i>iOLZq,BU/O(msj'-:_OsNPuX+7%\s(<F.8/0O>I4%BkqTo12rha):IV_3_=aJ`7FEs[m![SUn`r1)A)EomnK,bMlkSmSbSi5J55ji^F`U,^?c]4k35bn_5EMFZc,scI%f05,q*AVJcZc&e6`HJ3neShg7+9sb7>]'VHg0P/D_V7,&dOekkniNRN0%Pm,qTqTV5Hp`.\s($PM`nDffmPS^/!WY+4F:soF7!OJ%gpAu]8U:%6rK'(*F>C%qFmoKIm+=kL+JKB@f7l>ZbA/Bf?-L3$:q+FX"FTLL@r>@s:OQ@b+kGg0$UY'%/<qaCUlqm"!&#[TdetBm%M_$Wl_N?;*puXQ.(eCbFa;n9=LUQ$3YPo;0i,sIXO.&>)N3A`?4'?$lX47j3ktV?E/d,9V3:cc;rl-^c3nooA2=P*5TH^@r'J]gT%ZdAS+49lpB?ihB/NSIhB_h6L;kF7Ns0(o#LP\\^jGD;n*kilpd/N4C".S7*CmaIeV@c;X^*,S-u!:M6P'2*\k!oea5$%/&gK<=''%!^1.k@pOI</"4"^lhH8kNk[fgq_p:5%EmEk]!7&IWR[0URX/Pn?5^<#;gEj2Y.fQZIIm]c0>L?5?fU+iWr8SXJ2G$N9*"=m-N\aT%AE/^+2MSjGnh;I,'fcD$gs0h9YV)HnEugF=c5Ql]>lb-^_SH+1LMMu;%Nij>_]<)o?&.pJA\2U\oUTo@]#c@Qg;1s.T[-u`[KS'm%m&.S8b!"g%1GI@\m65e.@%Ve)R*5=^_?8BV-=Z:>)e<5O]0L>qR,HNnp42<eV>q5moGPRo^eZKH`Fj4i2h.[]52Ara#qZ(C7RZcS%0LB?:-7?JC?r/=%4%\KtS&fbM`pC/H0P5rW"!#HS!l;mqX:?U[E9,dS>6u#%<""t:(9Htc*gi8%&[*apB$R@LE#Td3N_Cr3f/g_$%`F#:&"Q2Eu'jr#$)D^Ut3]t2C=W7dMgZXeb_IXF6-%0;**1bq#\4/,-?tm_aOZMFh`&D]*+tb+s*Rt8A#=kTjFs,/u?IJNR8,e2<%oaP7=#CWg`=O1P#rSd_=UCh5nWW#u`e^n'=O206O%:4,,Bu8?8%U^TV#tEB$9Q]f\pNmB%6l.QM/I^<e'?bpGR<WWsf.]\^NfE7$%+G_Xo4>b-_M-7U_8^-_N5#C&%P@HoBa;iTO;pBb*9^$%^"dda&1[%K"7bfRWbnc-Wp`iMj(\HGE:qr=4\l`_]8$YMNopjl!`+S&N%nqXie%,!UQ&F[Xal%C(#(?Y6]HXhiLJagMp?RP"-g)`6nE,-6aT]m;M.ukI"QaNY]>-kV'UGdugC7,*f%$YI>%B.a..:-f(g49X*%ol:q55epBtJ5!^W!F)NX&B&aV:"*lFXX\FZCj9r'mNjHk?3b@BGSW?VLuiAeA+sFo\'>$E8UMo#CAVnsZ?,>-OZ8/ZJQ8__J@Up<%J;(E[k?Ht^*/(B)3"3@%`;JBQ!.Iu?+R#m_U+qCJ)sR03o$+ZQcTu)+e\lrVD*/lENlU>n.2BEK.BW3SP@Yon=5u.@(R)DIZWHY`%G>C?n^'G@jdWQ[E%O"!)-ID+=3t0l+%-L'>Ve&t!E#]ILLLiZOp1)T!_%SYb_m&cSF/Bn_0QSO#=#BKk9/MrtSS;AYVI2$S\RNZO%0mPM*bF-d3?AF]315)F<LC0,Q5_WM7<hIs@q;Ne6SHH3:\,/37FpQR)IYICJ\-G`!bm_g7Wtdg(]n#m2r76F)3NV??@CfO/!Bp2F%E[F#GH)_t?GUR(KB1gl/S*_[".QCA?.0dPhkFPkb/#^FF0%5^I$Qkme9r6ma\Ekr,fccPNRd(ch_J00,iI2=kRo<]PL=e":R?ZNn%A>>EEMSoX0OKjPFfL,h13-r5+%Mg#4,1ZSGY_FOtN\,gSloS2%:#Q%a^g<Oq]Ves7Jb-VSk^hA0h2+';oeP'AiEeE0&db`k+J^J.%aOK'B6RCM!4G@ti!p`e=!:(:<OBM/\7!pOKaS;CbFseOB=A;2J-qWs+Gp#lqbk=R?[B.,M&>b2YP(%O>'(de9U=(X<`fZK29&nTQ%kjRLE:X[dqJ3p!af!Q3amNW$ObBo&.+_g/o81pH*BDu:hCF$T<Y%_$n:PY"**(b=C:lbp>=p2:^o(3bj^fK;Ze.kQj.8d<kd'pYl%SmnD4>)&h=XE[#Dn<=J]0dFe2oBE`a!*0Te/PcpAGF+-'qd?&$mpnrrQ1c]`F7u.e8O10AhKQ3\)g+g4j@E7+fkrTu(=em6%Mp&G%%J\&ZG7=7Ve>K5V7t%6:3U(.Rn@mWn]X4\6WPk`uJ;N[%^uW,/oTJ^_Rm/S]g>b6MXfG:<c@uMYL7G/Z>NB>dDEdNt$U'hiddk*i%M$s`0U(+[Ho/FMf%'[-`WKUsAA*d]NF<(MKWu-eY;R"oEaIo/Q\!#<t>CCs&rjd%D>5;]1^MFC0MHQS#C$g70h#5[@6TZ65BolKO%^*k^^&"5U`qZ9EO*YYO]OV3l=7tk^!$^I))5@:?A7#J1U((-=bBXMnZ6If'Y<#6a$.EUC9KIZGqbNj6-of^X3PLNMRhA6OLll[`V%)RmJkO;9=#BR`S<.CAr4$IqOBW5,('*%t3/>qX^[F`@=`W%LIFpgZRfi\5=I8dSMdL/>_ZQ./b%1?./1ogOR,G]C5YW16n)D7[oY%&mFAZG^.icq<.J8o8@?5E`\OT<(LRk)F':8(FaUO,J(Tu6Id/K$e:pmG>%3MGRs^.1mNlgMSo;q1J"<0,l&<EFWjXqX"Q&(Ff4Uc%*gL!KGIKY]'WTjc6DUb1=eYZ'bP8?C0;YZE[%'rA2h$pQr.n1[?\=8gR%@dME_E?!bhl^G:OoS_$C1!9j-1*)T2sgD_U=/3kb;"@%NpS_nr(&8%TD!Ep%[X!'V7PoK.'9KHMci(OPO@.3^?a3O!*RR]OG@Q!b\sj<asS^fX*87-dHG$A>g2:_q1!4X=)n],nE_CsS"P@;%r?hdacLbo-+XX2D>lJb!7YlOS'.QKC7/u^bocNi+7T4S2N?hY1W'4dHW["]IiT`%?9VSc<iii-,7nFINek/X/E9jk\nGgE_=3pU?%NgZs3E3XabUadP0NsO9HX>Hk@Ws^na4K'sKapXL3A*FDXkUD+3S&t+VQ+W[iF1FqBV<Z'^Qr\@MlM8'uB*V\=(EF,9LQ9It*q&`X%<AEc]&T&ns5C.McMh5df%qe+racY0KMX%S<@a>jeP(cB`pr4\j*Zb0"^L\c#GU?@/=r)Phk02d7PqLUE]a\s4RU$pADX^Z+D:XXY%ZO]BHG+r7>_(.B9T?J3J55#9XFOC[^asB*+NKTK/3<H8<b_aHrXH])t^.@s`JChlh(L@a_@qB[e?'n=rqWTkA5QLcl`$7GT.VJN%%8u,=2X9UKYSBfHp_7CmH[]U,]WcRX6)H,rD8`\V8[Uq:TAaA]0Y1PrJA<X,1b;DA,Y,jCdn=1:$AuMNKjMG\l\cp/Of5a_9W6tu&%"ioRVZ!85a@*h@`F.:`a]LLIZaiq%s^F3^QlN<1o3n><6&n=`.it5LZk3N&#<LpjamsBT:ooUY)mRH`@c4DQ;If^N>ASkRF"9aF0%M(L5#\TW+D>j)&E3j5=fA1mT93?I4q]AS:d'D((IlhFU1%$nhJ3n:a._4359PQTsNM-3J`^U6:>0)h_01>mph*NSWmFrk+$85[Er%3hp)GU%^s^bMg`AF?=R2.:@pKajr\No=T?%]*:%1pje<;?@iPI$.rj1>?*%RD/$fJb:tC4m&:,]H/\&t@JN\AhSMsadKR@"ePcGe%DP1Wr@B?s#d(@YbMqA?7FKiPg:A#(,0%b_n>#aknPHL]ha+H&[r4-ODn6.!'itpl\dA%(95mr=k1uEQR*U",<]Z2fqV)oG.eq7o`%jFJF/;05QWrh'r9YG)?.,/I3G?QW8V*/afF9Y?h8<Ib-,ARHO[k6j7n;.Ee^75HnHVj?+'AC*kf'^]X,8oJQP'c;,&F38=)g>N6C%,6gIO#DamYbuN1%'Q0$+]hi'Icm[g7C8K8EgZNqCNP\37&M+B=:Uo:s;'ZB[\P[pO:[>rfN^@jhZO0DWiAhH\6!9n&o94q!I]\:'%9M'8dc.:q6f\od0m5i%hjX/@Pd1BOP0j3`VnSiVX,&DgK$aI'7JZTb`nrU"(fPokGZ89d0@215q;L(@R\K`?WfR+KT,&#%X;GR],%9#+:6M>Us_]PD&C:2K:/7eT::Sp)04*-PRa[%kO3,'qJtd-`*DHC+a!Jf;H,+7pSV1_>r\SkdtL,04(C.BF=T-(0_"6^dVd1fm<Q%5GL0/;=\KarW[Fhna\QN>UcClM4r2(a,@lnig(O>DIAZ&G54@29e/r6CYBh7h#sgBY_!+b()9Cf<iFLZ`V[1I<)P;qSMpM<.bfd.%K5>R-Wqdb>2b2.'<b1?fp&bb"4!(P)G3i/9Hm7Cn6];5:'tp34H3q#XKrp`(YKcr=AKHqDKsc3@WQYHF9OVepD^t?d<N!.V]\c]N%Z!O&cg:Z<Bk,EGpC\*!RR0WH"_V2Z[<9C0%8o+$I;jiD#-=<7OqnH!nh])3e"$WX3*XDoHC.IBiUmWD_T?c&'X"(2ki#/H!^)h2@%L8JbY^\?f$FBHrV]fMs4i714B'C_1WBJZO9<hsVLYOS0_o`Eq)d=eRk-$nqN('lg=B1;97$$O@ul>W3tFU#hnmi_8=#hFI9]7L2T%#OBmFnNA/oKeeZm2j>WA9Y@_PBtTYIe%QZHLT@<V97h@8KeIh-H!(9b6sUV("8@^cLdTTga>]5-#uhCk!n'V96e('RJ?r'&+&L,)%],W/Ia:@;8L(d@06TQu7!UbF:h,X.2i\;tYF(DnUk8`/GYl81d*2qf'qKMCa<]H3J=O%^e"%@/u]RZ6F:R=$@;Wnmq*?UH$DQ;.U%]dLfQa"ln!QjRREV.;CMmY*auFVO>Ooa,l@JVU))T-L.DhdD#dBiJpU71Y+rm2m$$@Iu_n?#J8O)VD]\`6?ZWT"G1#=mcFo9a"es%\c+_fm)^'2.RcV&!&J1@%"\6O=#rDA9E>*?!N)1+m9.EgG-t%P%D6I?'Oh.fl[`k!$LnW9X+4!uVD):[2Nd9;2ijV^17W].O#Y\,%HD:bs2<cJYAkhq8i;'BES&SJnropS)NpZR:o(Z@c_FHG%^An>.;mK!UJ*O5ZOjE)7$N7tD,-5L,SH5ni*iOj%J==*U]Y\'2o-g%H%@Q>L!5]G7/!UmMW&e.o=;0QKtIA;*odt\bg8l2<dMG;ri#XCA&!*Ai2`P(<s%q'_`p%Xs0"H+`Q-EHY`5VET>.iiG84+1^5`M6uP%5@2;)RefKo^kWd5gQa\&&JS4s%8#o/k!"Jm&6%d"_UX/!"+YHsQ3B;iCNriSM"ajT+796+E8_^o;dJK\)plKt2hX%]d%B!pjKS>m%&caXKiEhuQP=#>%T]e3U,Lr:QF)J-WLs<J)`:@EFjWk3n%M>2`"VWne%MoSlo$L]TOT6"tI,S=O&/8@`=pA#_NsqFZXgGqPg7Br)%p-)_g(:G##'gY'uNs6P=1l!4fbDm6hM2bh&Ie+,,dTcJ*JcFmjL?L*l6o6SDkJW6+.cF!J\X4[<p#t!c6mO\;eq@.BQp&TA*4m?-%n\D*P3hid1K7^=lSA`=;GSW_8E5)\=+oeChLK.pu_iC<8NA$8?8a.STF&5gO6pmg\^=dCZ.#ti)<EXf`J7Gk?-W'-_L_bFe%3eNi%lWFo9"7BL7r5"-+Y'q])9N5hP>2LEX#:^+S;!1k19_V3o)#j?0,4I"f!P%5L-_++fof)kWF)SXm=]&uC?U<McZ7,g^Q?-Z1fMN)#%\kj);&/AVN1eN>I\;u-b[=:32bK0FKWs#O&I-3KpGHLDtbeApi*"b3\hj;BrI-M)#*-k%9'p^\B()6g>U#2@S3lY__p.6%25P<4o%i.:e5n,2L6prkDGDgQj$L$,%Rp_rsVau?E8jK%MOX*WJ9^HjaWZ"T-3HOV1s$afkrF@#,c^C;X_p%PF'F44N6l'8`,q54lX8=c1B%#OM"O9$]#35(8Lc=8MNt^OGkM00FLA^#+XNXT/7XT1;(Hq`FO9rqf?l1.H'>Ml/48IeMkF`4+[-s/V>*b'3j\X]Jm-a*3#2L*ZZc%gZ[.fZ0GZq*JsaUYtmN0qFo)an>B:ni7SW)\bFj*jn9)>^A$s^^&%Sf(bj7X<=nq/@_f="rlq?:PE45,B0Q=]Pp$^'?eg!W]6s!6%%,c,FJcPAU3YTT>s,cEuh)kAg]DK`pY@$ElWW&UOn9a?Y^Q%jO9f"eIhn>NYo#E7QVkG'I`uf^)gcqG.ngF!/[?u]i%A:kUdu<+.%lG<@AT6^Ygo'_'IlA"+YrA0k$`2*7R5<^Ajl^"+.J,Z>p78KoTi=r-'s7D^Dr88fnkC[_8PbOd0r@@g>e]Sc#qo`39R>U^uEF/V&%cB+#-%41VbgFpL+-o3cC`]lR)EEDdo7@L4O5rTlHpNtd=En&FMCBs[u>guD"^%'n`n,MV.a$\"aqK2AY[m$U<(gHp[dl<K]HS<,4%gcs]ri"LthK<Y'9Ud=B$roN^3,Yl&Br.AYIU2-;iE7nUqkiksrm6de[M.Ur<H3=KEHMZU0pb(O7^OGse]BOr$Y?-]';Gm>`_(WS'%ep!ZB".%sPfCtjKHP>Brr8`W_I.4$M*rN8?^mb-+oSBPDLRRo3W5(p<HL>i7S%njfZ"RJ>kh0TuIIG?D4TEIrDSJ39(GG7UrL\9t%Gi@o]gKu!ar9K^<hYZ^-Isg.Ef,AYh-X2&o=$MIUjIQ2,]0H8[;#W,_r;;Q;IfKC_?g:GA&+@7+r:`Af45a&PLdRuM>Gj(H\S%Q7%d2sFBJ+)3cMeX!0I\AgS+5VG6[GSAnZ*4'`4Lk"6%nKiU+_.Hd,%BKtF!ojph,#AG477$:nA<per;"VGGCT/<T<Rq%s.O+'m\c-'%Gr3P&&)YthMZ3"TosOX)r@Is-UO-'lr:CHS6_%feY=TrTKknaXduO_qN;)CYptUr1Z%&5p!+3Pcl+>:A-%?(GSOn`eXIIL2IeAK(%hWIWpfBlX_8bD/%(Y;L_(N6']rhF\d?emU3@ssh1r7UCSJ"PPZ.$VVh>Jnqgc1ogmHKXD1\+J8=Dgh)8iKlL3e[IBKq8tYg=?@OO%DT3W6]Q3c:IU')IXenJh\q9>5cVNAHs(=!6GDIW]H1UI)htd0TCeMbY6W/71gTUNhXSpa8`&@6hqu%i0%s@%)`/[gX7cc:cIe\gC%YV4O6hLFBB=jci5l=OTl*IS3/jQEc>-.6X[o[.S@q8#jUn_if$SQ"#H<<:]$oq4W#6i$SalZ.1CO["1Jgah*1fB_:3be<lKj/Vb#%n/mGoO(ZACq,OJ;8mHW/CL)=;eSB(MPC:>t])2LO_=ueF,`$nLc3Z+5rZg`>mAKhg^Ieb>ra^j>CR#r;Q/DZBAEVDRNIj"$Y<o%0%rkI+nDVb<Li:anS3+CZmf2(:o)#*$Rfa=;r?1mA>d].PIGsWL<Y=Vg7gD!FJ61;EAiq58#k!]"Ea3q!3WUIrLTMK6$TLX6FNP@[V%d//PfhBZEWP=[WgooH"Nh;DuFhbL1]Z80;]5)-36s,0Mt+u;Gq;PDH[8tAd@+$ZaubAY>Lqt#/(<dk[uh2V<]0u<V(8Tc8_*o#_a%DVV-8/-W;uT=h5a?_6!n6WJWaY4,e\WrC005P]ehWrCVZ+*Snn&IIn\-h:!ke8p]DJ,RNkiYuM#2e3['nG_esr"i?*s3ap;-E?nm%n,?Df%mP:i<W/C^W`/qQ'8c"Z)W)3<'q]2fO7e#$V@o/`akt&:iJ/NQo[*WsjRBd<WrBs7?WX9(/"b\bs6q*XeUKXX^*-MTY;c>C%I/`LLIrXo^O/&_Q2a=jpXl=F)o\$tJ\&Y)>DmG[NR-eDE5B.:GGl`<YJ&`%?(M9RPgpjDj`qL`!/!"jR^>iFRocKtK*@nn(r+D^!%^7eHpk2/rT/!#'85`GSI<@VZS%D>XeeRKUMs1>&[O8db9I,"lgq!+p&J#B`5ruLq(f'WDPjm"25asZ:N7^U7?ir]5J]Dq[&];gUZ%r&QIg?fS)6s4t^uY+DlqG@nCsBi<c6lq[3qNp9iXT<tK<qpb;0T=Ri6B/B@u;CZR)!4U@jd09I(J)20Fii@Bj;;f`<^/O!^Z$uDo%p'PfuoIg%(5JWi6X3\QXg@cQ*M>fZ#qrdq%dk@g^rD/7=2`/7<.">$Sn0a1,,KemW,lHK0RI^(T$%HIWDkd.m6,F^eb8VjZ:QY'i%lh6=&^F)SI]64!?b23jXr6a4_VYiSC_V_KM2cBXH+Q;e?m2IL(:QY($JDE.\rgk7k&,0Nl;#[%/iQn+@3iDm=61,aToc6s0Sm\8$%DPm=p6,MN]gG`%0Sflu&]%@IV^F)SIK7i.mPWoUsIc``YLjW9Rr9`=ZJb\E_M,PLeZad::;h(+h[8nZP+2@jGM]]V$g]u1(ag(1*%HgcE.QB#4;qWC'bL\l_6E9f^bM$+reYPUiIHN'm>^A$AZWVnD\Cq]_8[sp!$a"RGWBm31)^Kpi&[o#op_okR:3HY;teRq[kM=*V+%nf<lGmQM?Zl8RS4HN)aDpDsr)N[(<ZU[rOM`-q?+>krgJ3tHd_n(tN[q!6[!HVV8IT)Kc_c(BFQeRq+P\C<`AP2%/!.0dZ/0?Ft%%(I.lAn$d@1?b63o`AaE9p[0Cns44(Y?@&Z"#928N9_7lR\DOqB!VKgteMI,X@eenpha3D&*?i_+"4[->_+_02p%SIbVNLH;S,_F@%oZ=p6hB@H18oF\(@JKcWh]FuR+kQ5?eVA)%B#L8p=rero'aF5$_M^Ws4a?c")c)IMM*KMP55"R>n%A7_0CG\7_*=e)RM"QY50i;7%DThk(bDYc*qc?kfrU\krp\-o/&)Vg6/TUHQT"a1pp%gbbIIPFPI(F0gh#6r[%tFQCot?E8q=;]?_!^_'qu,:LUh<lp8WF$?HKY)2%LTBmi[K#FY4nm[lh1lQ>hAMg+#EX+Xpus3lK.gTAqrM%#W#t"T+0rN7(Vfh+V_>^]n`?,(S;ciR;X",KcYi]+/GPS*rU&c4H-^gh%h7A#]+Kn!,i_)Dln5=`4hSTjfqW-q4Im<ktepal2D"JhKGJ=DD?dt,9^KkB#=7>!lqLq^0rSldKcWj_'EpNGR5J$aF(Cr^@ro0\K%5C)FuIpY;Gk`(q4?@V4U`NpAHoZ%bDO/d#7O2U(FBAb01p8Hj&UVOLN[Ym*DBDg*3>@67`rg2Xe^U^aD"o`sD.l5WOHi3EWnW1Eo%k^P55`QK'9rHZ#"&"imi<o!R`D7s30g%Xm>[(T^,>/2omQ,CSkXVeodcXjj'XHtg+*T5dD:*nd'8jQNKV13mYrEJ0/*=[lL?Ihs:%a)p!EbG^j3j5lSJ]ndg@BWls'j]4_g:q6u_G='pAdnuOA`?eg%X>Qn%[g>X*piM,LZGgqE1TTmBjpMn0?d?es]%I52m&[&8UDrob%#Q0"2?%0qCTMCk^\Vt6@,E$pe=tX(*(@-EI++h!9_Hu5bDDYp?94ioLRF6G@`QR&9Vaa]k.bpXZe^Jsp#[`UlopV1gZN6BH=[TB0%.W"=*(b\N5J[<IFVO9K\^29$W*'J^9:eLk,D00\i@r1tarNar.:oaWj0!ba\&V"_!Al0&:ja_C0.YTU#j%%7l<.T?K]4;XcQG*YW%#"gg$[m26WI=Xj7Z0S:pk0(#u,1Sob<Z(*HgDEFBdQR\Z[pR^LGFrQ`9Oj(i')#'s%(g',$Eo$^DCNcafsZi]gDH5_);7/0h*WVl%=p59n+QTrn-r[&:=:!'S('ig9d="0&O?7j9HXAs3QRtU./1K\j5]&c5P$V(kF3`9NKdL<^/d'ZSWm^U.*Q2g9NB5kCKmjp:<]IQp%`diE7NM7&h!"\L-\"IgFOk!DtVN,FR:QTmja#oMOj.<&LS`[sNVPJ)Oqq,6kW/SEoCR7gNUp<q1:g9/]Xbk4P\M@(Wf&Y#f-V;=Y%)Omks1+fDO!pQ4s?l3[BCKl+%IcnY>%,Gj!4O0_]9<p9'@p`\YCcq+E?le!62b%W-gr(G"[o">&nL_025X;pVp.NoP,Ah6FKtH/n%H^2IgTENr.9+KI7Z!C<6nL>t:B*Va?QaWEMDn"-%>EBIalR,Nbnh,QgTN6:i6Yk4Tld7H$Vt1bRZ.V8aYa2CPOLdJ-1kp3)jTO9=%DoW@+^Nb7UbXPt#]poLL.oEd9Z&s58qPe+3hh57.*ipMaC9F.1eqCB,St5smP:WQ5,(Tjh&<Gis/,MA9EW"tJ$/7+3d,Tc-,n(NL%]]S@L.2"U::2uVg*qc\_.2'/5=h<8hc0VO.F-U-'k4;u<":ip[HpBjUk)]A84t72`Z,PgfQ?6W;95Vpj6;o:OTUt2b9pV!7p.O#<%<.N]AR[8-&%@5aO>>Jj!)Uk\MlHLX(l53pGbU0QS6XYl3O:(P&L(/g]P@\Q.^q$e19cD&C.^EWEJVsmm\gMCFN=HpAV[UE%MSP31%i?Km=JD(1UNt9't(WI3?;#>+2WBMTm'm-&YnYPXMNM*=LYaKM;%]NisnI2K\cH=Oq@G>A]p4<`b5\%&(#@19M,MBf,)hM!c$)!7+%a&d1!Jn#>'Il,)=8OsR/Mo[l/p4ED-Z'DiH!E;D;.6]ZLIoEXNCRE`h@C=,9kC%*3>N]Nr^qW@=5"9$Dl0UUYgSC=6oelpV4qS`[%8IHDkYO(kfAL8sSqA)Chg&P\JU*kUHb[Xf&J`bF8^.GoLO802ta:'9Pls!3Tl(2#UlBcj-&T!!&'p59NQ7@;f[NOfYSHYra.D\<k%D_0,V$e*O`)'K5'RSQ;WZZOiE<cL:2&l*(S\NGL>`mkND%\j&1Rp:_63X._X;08_\=2?BtqLKR*Cp2q'*-o[0):Q.a=hl25aoZ&6%,"J3/H<q"j9P/d-N)o(W@_JTgQljM^ih1:#Va/GDJVE8AEZ7O7Z?_F-CMMNgf2UYYf4:Z5f`%E%3I;:cINR8"5O-[XosA`'1&EHp%p&oZ/!pNq@ePoJ?3p*+]3XBjJ$;]&:;UT.CLU%AJ8KAU\T"#7Mq[;ODEm'qqIP4[_&BpRDdOSmi0$UKqW*pU^l(O7"3&/uZd?]9p%SipX@j`:i6Ct(<GS$j?.0Q(,-=N9ou/W>ps!eWumb@pR2WqDQAD5LfG]!4/6;e^gV9a?Ya$@t9TK(3k7=HgfX"`G6O;AZ&*Rd*!*%%R(caeY8WI1k-N&%brd&o'$9-Be4cYbIXHh&VBV)L9`:*f]"MX%9qI*Gf?=LZp6#7!,@OP\2'O-V4,fHESD8nB0^TTP$*JaHSC+"%Aef!"71;I2KMJ:(^sGJX)R9ic0qhF`cE]c`cVZ0fi/g&>"<Q't#.:+Wd;+1@#fI`>epglO[8FU'=$oI@KS30F=5WmFNB!KH=E7\i%8*H5!#g><O"<6q:9u:L[V^6O7k$r-Rh;6-VgL>pfj1rdU/%-t8`JlrmJjX%%>)h<l0I_eG^5[l?eC&tc%Ag@HJI4?DXTU22P$rNr%%\hY>+gLOpb6\Xr$i2n>)`p;r#qLe$QDP!7okge[Bt??Kc_9,TM%,PahUmd`^>mZ`Zmo?>M#kaG0c&!#s4%%Q=_<E:*i.D5]ECND%oeOH(QXm>I-oAl4]KkLbMgUOHE9n1Ao2*K3$PY,9n]'Ph5rEg+YL/piZTLRIF,_4;BIRYHL)eTC1O%cUHDS#'HW0Z!1c8eSEJ7>M%bJ&ffe0u2Dje3_1QY!kl7#0Rn<-LYt*Lkc[W[GuP",`hpW#Ss61MjYOYT*tN[5P9?_Qn&9/4NYW.WpAU0sW-hrY@Mi_OB(PA0H=N%MWL'H;7g($hBFDSL9^B^Ld3L3et#S!7>Mpcg@fuYD!-f0KZLa0`GcD5#M?@b@T8*#\%Sb_82;G_fN6`;'reT%#hb1aQ<]_tUCGs1%&4r"L1_)8"W"b*BeJ#K2,i$OkhK@#Gq@Of*0C5D[N5e(+-uN1\Q>jhQ88TS]#7N\/e=<++&8K_>`banNR?'jU%6!,J)L6Q&<'dqI%%Od'+Wa/6c<,.Ou5,8c.b%eLG"O<"&elqFE(oM5i2Gt^"7lcWNVD4Od>gX$$4%'U1g7Q=IV38Wm8PZ;bW5LB)>fB79l.S&l.7Tra%J;-<@>>$%6UO8MF&XB_2p0BBiHh[EcJ9KTSeJsXD.'5L#H6nosCl_Wh\pI"^J]L1(T.27t.mPR]Nh`FomXVPoaUsd23<;Ms9[M3+%=u"aCD(<Rag-X-i=cKh_eJ3Z[7#!o:W\(l,-UmUWLCTD_AT!X*b'WE3+UTHp-7>*D#;W(Y[IB6`oD\QKE3#hOjBcD]<BJA(;lP\G%V(KYEm#C8J`mTIn0I7`m`kL)-*&ML`%\/92!=l*3h[%N`^jUY;:+OMd@rL+YQ,S=Bo-&g@F;*dd"QcDd)o65u=[9F#1g"LV>bJ=g%A3b:l:2DHjf2LF5@qiG]dOgH#KipJnZ(-lX+*n2CAdB#,Vo.:%V+.KIN0J`lX#Wt^eh6h\e91+tWLZ_>0a1K_%f_j>^gInLcr>$*%W(XbEQ'L6bWkT744_n#@XPVscF]*^3JruAZTW.$(+DWufA8bBuB0][$8@9Ge:@&Kib8Hu,KN-88<RuL-Q)%\9VSq<S_IJ_P8&KH'%;+9Yq&5CQg:]%;0S1$DuKBNcGkBM[1*07%a1GMmM)@eCMa@USq;delM:%#iF\me]%<H?G^@F)*ZpQ$53U?$F?`l/pM);KI@oqN$,%7-fqM#n&T98I&"B_oQbs1#*%pV(%#1"%TsGp@N'CKYW2oTMCu$G7Y*&c/2H%dLE0ZDC%ebY`O3&Ui:]B6!(b)me8m%#eE&m;!U77%hY4E1OjDdic?(kSV@-4@Q[s:@X7HI"p%GXig1f_GE,NSRo<b'Wrs#E&WG1T9?jfR98NZ"8;=2$8`RHhM*:bkE\6l_XYL@1+CnWJL%6/gIlpVrHc1728q;S@(-A)tXM/S1'=cKFW.!?#qU&?BqnO[f.[JAJ?5!We;J<QP\#?mE(21b:hoLcb?MiQDr!ROY%pK;I>HmUj"T%a@b9YI?*SNo<S4b[1f+hiN]AiS55S,TPp4M<'A0'gY2WMEfIcik>g2sil`$LD8)j9c-jfuU.%i$C:62I9^7,Y:-Sup&QoHY=:02f%e.tI!^*6D8ehQ(&;/lVMcBXd;B)?L=\*9GH@JoMa<;=JTk7J<!s0X,Y`L/WSAGaWEn\O^?%&pDf5)&3o#cF$m*5]5Rq$iNu5d<_^%8'hG7^F>_FnH/:%WPruMENQge;'D\lA1)(=F[U"\Cc?sPM3uW"m5KXFD(@$J49"\*<p@CB=UQT%K1_R8b+jib,),AQs'O:>Z$YhT%Sm3:1Sp>DfKjfdYIC3u@=<!.Sm>9a+YXFc68FT9jITYqn#ooA_<c&s&lPfV_/e=n,qmM8Ro^e`3I["'ir<A-WKt(al-gJ=ajm36%%2r3^ho(.r7IOdsP+*C0#:@J?`Z-.L1%s??TD1Wj\H3Ho]*tYa09mP#A_8JP0Y?iqdZI.d-HMdEP&?=B<T3>3gUPO=$VHTPG[mDA8%XcQ)&*Yd"_lI^<!htD-,A3VnR)$lOG9Wl#J*rG"6RcntBLfO(?!E:GPViRf`@58q,%'[%"m\Jd+#Mj,(?jWk/a+:@1.m4YUc<V2I%DE(Q3-XgB3E'X;$f,L:qp9ESP\>7m!Yj#?Y?n$=kbW>N@Jg9GZ;(>[d_(._uF\!XU_$9Sg(G[P']'4&7R8mM\.7rS!;4$QZU$ikt%SV[he#EF]"LdTiFNHCPg;8o>I9SQB_^hc`;DH'Xhr5KO1QN`Q6a.Fh0(0Ei4WV(o\$qdYX0/`0bXkPSTl26'Ed'c'$a2-SUm?tBX%Vm@!/><5U-FW2pCJVfI=(_F5UVX:p>"@lPW4E!@7@c8t?@,ApigsUm,;B^DpbBg0]3Z._G;JNafa@\>:.VG0[#-?&pBal?QU/R)j%nOEuN(>)_Tm;1<Id%pJi4Pff:ra5,/8;VGt"Y`Fm8eXKH`A+u>nC@h0>;*$_/V17[ecedd^+(oE="k\XWs=#4_-(t9G/`*Y#g.;3%$BBl!!WZ'ORbkBedY0`GQ$#FFeD.0]\>5%+pStRQ6$Y!f\o7>9X'a;]mKf;W"Vu::b8GO[+E"Pai6'7aBoEfu>&F"WS!4PgjV]3^%h'&Yi4)>\)Yl"-9,A>f6#?feMmFp.Amf9?qTY5UR`=>%1ppuc-m*S,l,uW)QABM%[?&s+i<"HfJAHthm#;W0K2_#5EQB0Xoc4QCi%CRsKfCWrZaj4?T'c44sH.sh#6KXkeQG*5tQ_/*^];9o8<q1(;:<-l*?5\i_oV@WFcAf!lkI>6*TPgmTr%>Zin4&.lX88]biPBIG7%D':I@SP<:cR3bBl9s3B,W8p51NGo?CI-W9R*J0L'FHED)691H>C5?UIJj3GSS\$V-T%)H%KF8Y;EHuA-.5V9h500Kp)k/'/?,9P8%mPC>gPW:ptfGJhR.R#B=4'dtiO*+I/FL)"6gK?m<X<m.3mO*E:_'.okM4HEo*MY4GE:XeW#Sh)^)8mgADCb%AgOs/l305^2aK'"C%&]<@i\LZq!f?Mag(._bEm9H'aA(?V"3M4O011\YCXAd7q[g\1nP,D]K8r_E0=e[^0&P4U?Yq+A;XHN[a!Gnpa1/sE5Q=QbKm8fC8%0F&Iec@]ji):6s#Ws081Q^u;&/%@Npb=!m*45VcYSEmi0Ouql)'7=)3A''"XDd'+/h>#T0^S-gdB2&Ys*1C_A%m!8e6E"5X&51;9%`ffqdYiGf3jmX:!^nFHV["ou_MNq(fP$)uPaa(ruEX*%<&UE\+qR_PGUdbJlo4M?.C.&nH$L1=&7KbCO9`<teWZ/"ul_$QY?A>iX%p",aK6?(:.+ZN:m#fnO(AbMkBIc=+Y\d`@h3En!/^SoDKVQYWL%:K:jL-Xf/jh@u3Toug=&[`brh!?kIUNFI_<]W8\&I+K+FpTZR%Xq=Uc+m);Z9=c-f%'&-H(#aNKD7]tV,6XDKC./+>PAJQ]79C\@+tSgZ&KI`M"Os\7eIBV]i$Q:I,)eFHV!J7[#?"FI`P?L&3\,sC%.X_8p'rSATgf)`bC$U+6?kdc&g]iKW%&hdlB]%`XlmJB&$+,l*R&P%ghc3'R\^j(9A<IOoi"WB1><!:?*LLe3(/M`n,GAS(<gs1@%s+)ealA;4KB%$u9?$?/c@2AL^PS5)$l:72kV_+=p4Eq'$lMh3_%>g:%)@3FtbKZ(`E+bI\Z5N8-Yc7%%S2T4.C14amS=d8fbIHG_%c,Q@,dPh2.SVq+_TI(FliC!ZD_O*+,&oN`=l7O!X#huiP.;==P"RqulW=;iMD^VgjY0#5icS3H.X'YtZY%DYo!$_ro?I[R>9XE6g%6tk_[ac&(KU%$fK3cGck4_he>!YjB9]JX,n!?@;'pgQQ]"'E*=V5-s#0mK]9<Mc&G+QSmJCD)qT`FtZ58P@!&3,rc-lLf,MFkLS+%%QkV22s.WigeV/o`W6@niTf.T5aQPI_s`Ft"2L/uM:=H!C?.aJg,^rcQT_=33jc1>;GWr'p*F!&hd\hD*&PVm#HHF2h"HHYN`*p[%ifA/.3Z8^t,.=0Sqr1ZBqTk"8kFH?sRnGub2@#,lL;IG-`&?Bf(KFd@D!U#_/^=f=T9/SBC7E9Yg*W[P)m7V!EWTAKq'[d\>7\A'%AsukD("sWaKspSbYK'r*`]B':a>QFYG:=a\)q(]U\;4sO2PDPO5da84bh[ME]7RA""h_)'AMscfRE^:4ZQZfhKRamqFO[(2mGaT"%X6tB;U0V1dl36=QLJ2;a6'Bp"9?M;F6dV]l$>m;iO*c$-'n]LrCp;7j?:\9/c`RjYB'\9U"pLetO6UgR1>CInWl0W6p9Y0CKSccZ%!o"'E^pZQRY^'%K[LT(9*nMs!bpb@.[=R^V&aML%8ZMcp\;"nDl8U?Sg3F?,V_=QQl[&DSd#RS-JU=FEmK:h]mr9h;.CRbG6'sQ7%PL"ICIQRbRoZ70[cOW=*'Fn;'S"+J.>qCGWXB4a@Ar"t1$C;'?ro3U.3p,X-B?&c6:qCM[jrLg^7;pJ]K+D;/Eel;KLWO;-XS0W3%M]t[g=!8Hhh:lsg7BO^YiPhkJ6$'Fd+Kng2>PA!-9Li#f<@k/@0EH!t!fS>AbA,;_UgYVN/OS+s>HXBa.$f3-lLS30%Sk4?Hjjl.%Jl1!_-1H`,Xp-7[Ym\K#G(FbS3`&j.TTjW755cb2-&X\UD-=2qdMDdU/bNLY/nOJn[Gk`E6M;'g']Eso3W[:aklQre710V]TVC^#%+kQAJfO"GHZI\DD'rF)Y]ils.%ThXUW+c:a_t7rq96eh!WRU18#Ho@;d<Nk<U!pSo=Q=K7/s?YA`4#oGIVt^oS7Gm]QX'q8q][A6%j*O50$7ibr<`VYDj:[fp".950BI"dBPOXb$&bpI"A;.V9e2=6s-JC:;rGosCGRhV^#MR?`[eCiA!B$o96.WtJ_)YJZmCIgf4Dnpq%KJ(thhL[s!A1tM5#Ser?qGECnR&=#=KjFKqF@es4V<Z$*<$\R34)U>oQ)8Vd1,);H6]j`)h*7@U+5<6mNZ!1;9o5/m*7E)##e+<3%G)T-Re-poV6UVsBhO7g]\PTjSGMRH7e%VmI5\*nPHAJ2/3iec^k)bRVaR^aKY3-4S_)3u8#0.i>*Wpp.qG0R;XErk_O@+QA<a3uU%j'[eoJ;;?_^k9Y>cXCYR[G6G'p>eG%"O1KXeIM8jA\`rdEu`G=^CbQFJoUb-Bu#A`1pDSm1]V3*4$G>#T\`J7##K?aMph[!ZKVN&%+764[l8ET8`(hcg0H6sM?>eX$L<Ti4gqIE?()B-uN)4#,b9mr'eCYV(FN#slE;Ao6]6s@GlgBX)Vr%d6jgtcZni[Wk,,bX)96IUN%f-<ZNhD:9-oZg*mFW=`16qo%jh7\/S<Y)I9_?n?;K2Z"pT9ns+9)`3`gh9Qt)%5MX44$J#L8`<h&rH[KILU0.`pLP+Y(:4"U82pS%(Ze'4DE5^3%HaC?9G.!VXEY.s`H2BscA2_#MEEho2-1CR5Qal7#NlN\*-SZ2KTrF;EtAmSmf$'Jq+g9g)OZ2%g/u=cL[5b,Z)E)B%"`]2+MJ3[,EALrt!Wlm8c4PWNdUbD)H7'dF9i9\s.Z6fem>DJ`8laI.49e)).-iUDS+NYB+3WXRR^2\iZ7M#"&[+Nd`KU'nhsn!3%g6teoB*,^!B35oSCLGUiKOnuOMCFJ(m_Z+u]$]nj&]N'dd6qtN.Z.QDW[J@]C1JS*`>=>!nHDffgjpr47l\jHb-R]E;\V`c>?OAf%Lg;@-Ns:I#kc:/cWdOiF'dlL1U*'WI1QuT*TY-[8SnP?:FOEo3Qe.235B;foY-AjAIS;8TF9hrFYsc\kG(mjleq;s#$RgcQl5@.P%U/\P>WG=&h/JZs]`AJDghI7:hKfG;W%:q_9V;gFOn<!0s4K&m'_CaX(Aqj3="Q`\k2aW-"=upnaW+IQjA`cnIENZSAFGPUU@)Y!h%5e/?Yf2t:Xdu]"=JjVn6>G8RH;QjW=nObk+H%"?Z(._\?4XdJ<J=;3],L9KQT<`HYpGr3rBM\^&N(%g*VU6m71R<>0Rp@#c>okcI%=:^:%/;e*a/:/Sp^MdFdj@55.hkrODblT:.$V3XfZ"H_HmJ<ff^2q>b;m9Ss*Fo3Q)B/9j_XW04ZE56&@[EF[3PN_:q4r;0j3eBb%4Y=3ia@`"re8=>Zofm4>p-fL]'999%JA,H$r:c;!`2jgE1X4#EjBU`g1aa8MAX?/]V3uTsMk$0bD!#=%5ATF-ggn>Dg:M0#&k3%t%MQ@F[,pW=b:gPRm5R;/TeR5Nb<Lt`O934gXO>&.7,[jY7-t-'TD-:@f:`'pHUi/O/AI5+u(%,?m1/oB@;Ud\7'Lp&/(.Q8q&k3%m%otL=m.))Yr7YU,C0q]g5Mt;-d]`LMZ4B/7I;8JS3a^V_-.[46&&qYh-qPZ2o+[o=O'Hk$?9Iu&.\g4-#Q?9@R.7@]/%p9S]&*fI>%cr<jE-I_LE;Q'8d*\=)#\SJi'MPB)L/*7QW=VMS]8e`#tRC^5.e)PHl_\Fe<[H:p(G7AK5p7Vm!9%@%[*(K$tWk5s+U0j<n.n]gA%P6E:CV8$DG(M+)@5msN)eJsap^@6Wl)*IOf[;3"tn"?ZQ4)h4F#_07]l14nF8q[$=&=e&rJU:Q3>(Go:%\0.9$<Sc:@BMrQS5'R1%WV%neC]1$h:t/O`g-"A$KlEdZ(ZMnVa`\+BV+S\-S>lGL"7/N"_JY`,DB9BHZnt!*J4`mm(T&_`)hQNON"K0M)T7CZ$^l6Z(*O*N%KhT-DV#jl)_Gkd2rGWS%CO73V:h:n?+HmR]M<a#qCkN4[gV-),5mN"ZQK(QJU%A%eN.?T@0j+kao`E'6$NQCS3l5'n,(u4/C]pbq%`,dW`!idfoX<icC5#OoZBW/58N3kjX$`?pQHlMg%$D%[.)tgdF.-#U-<k>mMiPQM&Zsnc)*m]jnn*D/rWgOmWdPZ/JWpH/7&33qi%6cQ!)=/N3"U"fc;^tY]>*ioX,6IfjDX<ST(OJ;m[\u&7pKO*&LMi:C<%_=+T8g"T.r__SKNnos&@,=3f0pAp>#$&f)BM_NFaDo;n%gK?i5mr<WP(Q^.fH4'aI=g("@h3\IVaj!1RWe"22bKLlDg.W,0CTtN3D]oWd9@3H?Q(LE_:?(k-I;^KG/nLlg@WSb=M^1N=F]S/l%AS&<5k2u>E1qYdMO//7rR;>WC8<r$XJ.jHH("YHC<$PFiM.rp):djOOc-@`4Wq9>2jjg<O8oKDkWaUoil#k@;9cU*HC/')PI:k%9%2.*KuU@;`*Ddo=IGA1X9TO%JqWUn\MDh:ZR(LU;2Qj'Q/dR[A@$q+%o$rqT#-[**Ikn)$)UG9!q]0NCe3`&g_0G-rT$(5nl;1NP"%;s2-h.p58??:5UaQ2/<I005c)/B'*BK;QfW5ZN([ib'qDe^XR0:*dNA=RYkG0Z$GP@[.`1l`*E<':&<66+F>N`jq42#ZEI]m4@$Q%0sBQi4>,6ND.>BV>01ZR2-*<('W<I;jZEcB3R<7T=K6=&<r]9(cts*\o0[K>H)'A_ri'q0"6\jBeS!:>4ZKKqcXk*;JlC*%5aM$j%6C8fB/A`RqeZOHb<RSc-<2G%I3jh2OXQSk]_VY)Bq`+X`#(I7o$BPT.-^KU^\bQ>8,4:t'5X%tU??YVX,2MM5E+Q8=,onullq;4;%Z;M.=b#r?-JCA,Yklf_D>nu\ijM6$P2)pqm4GMo_2abm]FM6LMQQ3Xlr.r/1TVg`UToePc3RGPkgJ;_9&6^M8D\_?!NA@/+$O;Zd%",[pZSY5DB/iVVR>;L0P4;Ae&d[+&EBYqJt4FdL>3'hC)<Um!Z1(E]k\9#DoE)Rc1DD8CU`'@-#IV1q7."sUJ>P3Z%_Y(+WQfoUE%oEhNtB]Q!Fe2[$?HJt;F&3aBo(3;Mr-`E$+AcgtpPSIBspQ#O8cO-%kM\s@^m*p#CDn;+Rm*peMTW1.ZPBpZ:A4!&S*=VAT37Y(7%RapW/5\bC]TGj@^DBj<bgXt`>1Xg70GbYor9*Kb.JrEI_^)"%bP0qB;e*,jX2*)m!P7T(kR,hF3ND:UT/g5["_LZP>#agQG"3MDB%?]@hU1?bR-)P,7Q>ifHR3h\2q5#H).C*HR2ZoSdH3pfR$"J&AFX\K@p<[S-P:c*3^d:LtqKU?347'Hd@;Yie@:9Lj:FE5_b3]U#r%:9ua!00s9PEk:FAZIX0E_$HJ;.,19-U#&c^;4H&14J.P)C^;_,Q4^iR/R&;(5ZS>$\g!ifD\T_ed$Bi]7`mV!_U_dU<8#8Jg#Lf+%mV(U-L,s!S\iN[]9?M,C*bJsk(@9AU92nZW)_>8]+@sh.oT7n>XruQ2!`FLQ\T9&F(4X"I9eC\--?lTmeP%02Y377eUZQIQ>@F!.%^f$JhL3gP3AV[(tK0e![=8]F,op1q;<rss_5@"f$&7)lMOBfAC:bH$N8)j@#Z--*2%IDN.g>$IKdVWU@OrG2%_7&.&hEPboHKeTE%ZHN)CAEr/@G)8mU3f.@lpaKF8$+<U^0i3"$fFLiq7B%K!g-[2cHdK]/9U;BFlo0MCaS='l6'J9Fa!q[o9r@WWq]+A^#nP43Y"HY=%c%ht6e14'F20r/-TFtBFO@DJnR2TI+\M!.1TbnlZb1BF#l@WMg>8cs)P]P0blOK,5([NA4cT#*):ah7U?Gq3*TM0A$Z?1o:ZtLd-%1-]diMU4Z"Q%bgh9:aOl3dm]s\e\C[VsUk1Nj_s$%LFQgl@K=S.#O;d^sRMFBqss(drRR<7*=qs0p3"OU;krRga4;CErRR*3,"T'%%A([Q?V2&h4$dXpl"1kc\$NNG0)T;L7b9H>WX"<\;&[[2"Y<E\Pp1F[(#4)0+(1HW.UYu[IKGt$E_s?:WJJf0IWmjWCN5`S_2"Ps%92n^'N2TO&8lSH*(l,:bWp!R#oYI7VO'iGN_uWThDQuNSi]%J[=l:DfDY*dX`XYPM2Zhse`$R730#7cu(GQC0%j?<&Bb_\*ZJ<6+%Q$p3LJ9p'jF3"`\C_T4H]uB;'$T;&TL0r7cK6%S+_NO5*493Xlje-]Sgisj)V+=PY$`J$p.E2@f;l8sNWH!9@o^\E,.dsO=WT40*%1+k1bLeIND's]"m[!Gke<qFf&@8p&^RUp]5P4-6?Tb0fk8aIK/c6MX;:Z'?TGJcMfb8anJ;_!'\(N@<u7b24g0VWF3bESdd#Us:[%c#Gek?)l_K_p-t(k%=%tfcm.GT#<ecTXgJ;:u'7qKsh,67AWun0e*OagQNZCS8NX9Lmtr1bQYh8DA]BJMF5aM9fnCRIkW3e^q`'B%hk%A0P47.IDLnse(Jlse$uhE[@m$)8)k6<&/@R5[5$!Lfl1VbAlXGFH8->u'QC6;%[!f;6k]t/GA6h1Ac&LpRr#C6nS'U]uh-=)S%?.K0-3\`8Q!cRas^<ZIbmuk5(d9X7p:7!o73p=.ocs.@sF=k@VXmNK`'6NPLK!m;/AP;35Ooo5t(Z6BlZt8JUMmm8'3,#H&#J0aH%RhUXN)]QMS5K-BP`/RjDGb%V+P$dK,'[oUPOlULW:fhQj(]f3S.^6u]h'LCg"a%t">V2q/O%_k7X@1<hmW^.XWb*/pW#K-O(hrVG%/YFA/lK$sF6hVq6#N_XsZr/JFr!%A=YZ*>P"<U+@WG/)?DcOpP*[%#rp/!\5^!)[q\cM'UM=OL;$HYZk.la1gcPC7@,'%`ToMV8Q%7,n#s-B/d`#@:9V6d\O1q7'NP.(PE0O?M+\6$]CJ7Dp['#^Ut>23Bgdk<%L0U8ngp9Xbt_>MeW<OM0,VJgAnk\*6DBScPR_8:.6R%@'USiM-:'R)(4u?JVWTcmM2OQ\cM&BiVZM2'j@)qYsd21Z:u@=837_!(_]:j$:3]S+e+Z/jJ^I[3*]+D/Xhl;+o((j`55ghnMDk1%S#;Uac^1nNBc31l_EsB?\rg6-0+/%V++EBsY<?>*Ffuoj8H:bn'DigXSPT%O45H8cP7&r1FAk,bd["g(Z,Yn!mM1n?\ilu,T$,Ja%Fk1k"(0s_j6f$8@2*-[W=qjG_8A7F]A@;`rM8nX'cZH@C/'i=dDR/SW9q\,'[dd)5Q0CS\VAm'7R:Om#Z\G(8Xi2=lF*akhVp[li%_c.j70^64`XH[Op9i[g/OS$Pk^B<!h#_JDIoYHP)dVqLb2[e&!&3eoUGVB3&(3#k-kH.[l:7lu=0@316[7*>uitbg?+<Vu.e"'uQ%+:F+?Joq$J(,[D^dY!*MBFWKXCE!Gi3i_e.@1qq(?nPgQ)@!EfIHZC1ImA:gQSk`<rA*Y"-gVa0Q6l"./l=K1M7A:caBZVFkf*[Y%]6ZM'':]+3hMnmt2'#f\&M.u4"5'Xmal"+=LlnQV6LkRQe%1t/fJi/iURY"WiUKp"CX]$^<-(6Z9D0>0Dp:/ll]ZAt#HqWE_XItb%kq_K:#*PAtZQCR7:X/d,e7.T5S<c<>1J9[mYF1q=dgcg@^S42<P]uFVW5_+1XLGiH^Xbp"4;H>amTDPU1',^ARuk<+mm255SoRJ=%T;,6GCVS')oi/Qrh0Rr_bO)C5-X1+=BmrNt.R\\7qh:+'j?PYDnLE@_M7ne?Cp$?[c-/3uG?8J1H(AF#So(#sXDKLK]6&9K/];5;%3liL.Gu.`q.(?k7Z4<LqdoeReL`4iIee$`CGd2(.hen":%f4[5As_?U4aE.6o2PME+CBp3Zps4H9=AM_]p&r,VHs.H.F+-4k2LHT%7!\pq1mLBr%QSSh5WU4Bh50Ya+@UVIO@=IVB_TX2hSQ,&KVH*,`,(AW#HmPP!TM5lc2a;7liAM-k<5(U[gBU:na89AQ+5%[-FcD*%N,b,hFOgN<la3(g.lG\eGPt*V,mW^!io7T7DR7h^GGPNDPJs)J)RAN`[gC;baaq$a+?+YlJTmT[j)nE)J''<jP&@_EE]\(&afa.T%=deBMVpK3+4OR*ak=)SEia(srr)qq9@\A0cS8+Q(l7pLQrC#dIR+OOM>ISs46ZDIFTF[SiX+1A;1%_")o1iZ<q,-+T/]W5TdulrX%cTB5ho3bc*]lhk0>S'+nRGh@T]Fi^2G8EMk>F]!G(Gc8YV2KN1XLG\LR^]d:S/7loo(A5ekX!g5oCG=ghVo0QUPQ^g\$uoiT,2k+%p(2=G8fH.@#b-%J*oebUY[Wcu?+ua2rMa"O+M#A.Rqu7)9[XY6XPK:G\?9jqKmQ#'IKJ.Zn2(Gq1Z>BCFWb^?W5dGG3#h5dZ7U:_%AJX0+UpCKi8\oh_+G6LiCL;,ROHjRR<R*@@%9T)k.WB=oFW\""4)cfX`-!Rnh?^^WEL,eSm7Pb1X3+RmIX+bMS@VF(X;joV$gp]R%"0?Bss68!D]?n"A-=j`S#Pla:RE=1UL"[I>Q*YS=$(BOM9D&Rcmu;608!jPCciKB3(/@BK=s#cA`r=%[%A,7))6HDbr%4fT5#3L`%dTNsN[@CB!S[LX5j=>)XSMb:JZRY_f6*IKQEWBJVqH+0ni"^1Rfcq+b[,!--Esh9nVrc?8\Z!SFG68>[Wr\"/N(+-HoM3tiFu/&B%\JYCCY:#7I+,uX;VVDR[giJ9E\n\j1g^JGKD?`5el8RVH4ToV=iq&jJlt>7uJ@Gcp:HQ-VH!<S/*Wml1^QP>#<E]\)G`5%9"5'[&%`[%,LjsD$#TKVV'+LZ.u>*Ltgc[qt1]n;3uoMJ/B1BHTH?4@n9XcbERY3E6M7SDnI+B<\<c5T$FiCTQK$BA5(bLSs8D,J(<l$Sf:%dKO1e$)Q&n(?NeL*97R^c^/D*P(m_jW)"u0KQ3Z=H!<Rlo2]Rh1<UF#!!#IXp9?Sqe>f=<od*mSZE8tCKLEM1P@t276/4:0&'&r?%9RMW6a/IF$g:a&13]AX4F`(=<QcSQC>"Y;D%p>F3K/p&[VsbK2oN"QYNQSIn+=9?^bNd=UQ-r#8k\UJP2B/=%-*O&;JQk>F:(5L.%if\+Yc8,!Q7!^q.`2Z4+W7t7bAUA@7NK:1H3.M&Z;jO8DA3eUt>oZ*[m."]PPB77P-YcTdG^t+]>X0;hh*!:ae'cdd+ZOm8=-+tc%Pt_+%,t>V>Q!SZ>>sNu6)3pAJL!@gWipTAXAIl>/&*Q=J\c!/B,(AKhg5-e/T*lRt2b'e=S%r`83lobbLtH"DQ$"YJg6c^\7+Jjm%0Jnc&F9'Um"4X'o(W&:JVLSXA+c)dL>mkCn^_qksa80M9fo^jp%(pnQ,8fsbp2jL4Zi9Hbeb,bOA"Hau?c5=]W94.jdOh$r5km6?%+9UK3_-b<02/gtmPK0TEAsa8q`C!*XpRk@/.CZTbE_u&c"_"7Z`0@%5ajQu8WuUIKURnY3;9u47N)EF#F+UhXnh02cG-*XU(P*?q%PmBbm%u2$`TB4PTL+1+dfN5:i&3*h%G=.%.IQiE3<n$q[)U"(RkCgs@6:*b@+hD_u+ebHR:h]#k_lh#pdE2>$0\UfK8't4@dT(Ae%'&#A=e-q#S[.ElYS8@"q$qO=?Lff$S,$%8P-^!<el%5$b)1f</7D^:?\q2TBQR,XRod#`^LSje+^q'0emMn+p^aX=K'\2I6$^>:#%6`*t6!)g%U4)4Ehdd8b,1Ad_GAfO)pq],6mgB`UD;kiT_7g.tQM@_9]$2<2T1m5F5p,1IZ!.+uE]"H_V!igr6BW<3cFIb=%q7alg%_79k5;"]p'X)Nt`9)8^c1rY[*<G6;(F\Ps#%3V\p':D2K`*DD]pO"q*h(UpBO9\Pc`/POG'!3`DRYlI[XZ7=pV&257fk;?\XX,Jg%<Y^sfg0S$HdmaEnDm>q1gIpj*DB?)]%CF8\B%DL]An#PV6oO>E],iQ^ltnFTb3;T?i9]k&4FM,aVk32-!1t`rASltMAJ@7po@9)*%\Mc5"Hu<`2DDAA4D+r$QNUC7e>DjEKaDM(Bg2N^fN=:,H>3:48DPPgkO`?9!2-ln-d]JLcbdB/[=1N-'iXg26;]JrcJL:QZ7LS:8%U/#>fhQ$h#[U)ST,pK!Z9spO"l2hQqAn1:0HK.f@).b$t:XmQ>l:cT'O22-LO0Y4jkF'!gE*ehDM$6]g0gaN>*\sUW#DKjHG3VFs%9['Q1Kui,Pm(J:#&A(h/3*"m`]/rL>Wt`*7UCml]&)^bOYUIon!,YHJ`"7?8KnR1LJcc&cRYm>?^S#>/+s@^2ifliLk.%._cbKSP%D)R-^YkL7jlobjdHOiQ`:7Ig&nkbOq=!X!D2cM04^Wglm-E'bALq`$qU[P<-nT9lIAl_M0P!JZ%5,7QI9_OQ/WKi"rSI3d=4Cn)t%'dWVsj^o*H6/SG(]1+"[qAqo8mpl28)B_hD$[ZeXCe>Vcgc]2tm+Rf829a.I3/Z_5Gl"!ONCpY#(?"U$/7XlZ$cI8_9K)HJV=7<p%3Y5+(*Z9%X4C[Bb'dW1T''Dl(:iu_r6@2EJieag)V6TcnQWm)*a8;]-:*MJFLiE).VU_51d+WTmFug:B7iQT33nj@u"B%`kop[;r%h?jRMc@[;G]?Gr2[Z7MPpLl4b'9>CCm;1[LO=Sh57,F]op9b':/NkhdKDh%!ALPr"a.U$0AHDn_U,OQI"m3)!J?5WX]Yp3#bFJ:>%;N8l_da9!,\Tu7gSY4K73jPF.s/_bR'..PC9RW00oF2IcMha-rk_d45j7?0\Qn-X[RJJDFFP8:jbTg<P`2mQ,0<>+U46J`)+?h)M%C"X$IKC\YU`FFmUQ]#4^i2O,gJq(gdU=M@CFdB17KKdRr6KT$J6$`C]kGAFq=6_W4\Ct)sf`oXeXKAp.+p5@\F58N9H2JPA4t3Ql%%^&.lPVajRflE7Y?#HXF\P:.f_ZY6S,;4+"jh8p(Bhq=t\llVt!m0c0SL8ac_?KJ[Q8:k9TkAE,(2$g@TT_=hmOeV_=H!L->W#o2%_foaNR4TNaRC>rA(+l924;AfEFg^>^%Y8AX5$,u5.gHqnc%ET8n:K_If7Hml/m+uQ$RuY2FKeE<CsGAgm(Q%l46TVT1iV]=XQDeq%,,"G4BtRrak`8?9S3@D^i(%@lJ!Y7E^JK3=fP1na2OTC.<t0t2!qenA9m7bp=DG[o,*Z\?>c;BY190%oX%uDhLj!=\j?fsd4`/>o%:hp'ULeBKOc%;Y$_5jZ6piP^BNA!iP)@m^n`e-`VW=8kE6G=%RF+8Xf#TC+J2L?[pQo,@p+*ZoCE<*QWiNcS'2][E<X][sLec;-t%?,W-37%n$9FA4(I@^1%R1A/UsmAd)6RY*><W[XOACt2ZJ`qY1C`d=%U4[@>&,-P0>-K5F^$cn'gR?s=OAs(AT6SpOR;^L73oJat<%6WU4<<]S@I)K=D(&kqfIB5E%L+"cD-"FtZ.DgrjZF+TqFl$FAT[LWCinu<'Y8.l3&4Jf@=:*@\Xc6k\b:M/mtFH^=2\,HlCW*:=m%>7?jfme5RV`T:RhRd(jcPB<Q+9ckIQJ7E8lL.A_'A(34&34FEJ-q(H[#ri-&aO=mn0AQKn2G)t`VlHLbJuG/cEs6m2[=!QU[t,g'%C]k(ijr83s`i)ocam]i&rPPQf!"FQjdDjH:I85TQ&3\mtnBh<b!!5]TI#$G^5fNX<Ksq)e2N;`kl1BNlOcBFd7hN__iBcL@d)Qo8%&soq(X9CR.4pI\49H[m&7RQC3H*25"?uuM(KE-^:+gfoddL[VD-9CZT!6nWQ1sHu6!VM/@JaoF<Vfb"MQ*2PQ'/pmfR2ZVMl:179%L(@3A:u1qFX&outB[i"V,jGTf@/^VF(MWNeXhIgh`!pH^M/0]Ip-mPY)a+[8:)(=#(N./F/%giOQG#hbUo@0sBeb%/)Z%C?X`-L*%Q;/g((rRe0P`<#[XKn2]%jPn`1;tes7+_L8[Pf:FGfU.0.nCWf5VYY[[fMp`m6tn[He#U_dKSeI/@g$s(`N^^=CnJ?'tbm\%H3?R%U^cjSWLSLo[Z(^s:u!Y2)cJX5U-%b>J8mVdH?)o6YV?0RCD\mR)9@9ik62@38_.!0,&:$2bjC'c(t>KiT7dld7\^Mn9!>UD-=5/L%47uHPY)SN#%Q_o&OEgPb"7&]FaaoYBd9q$'g$0-=)V%-F^;+>Hh<-IQcsA2>f].Sk1'aIL,8slSPZWZqT_lB+nCp=WUlU.S\jh@S%XF%R1#.E4&=JR!u:,d*(fj4*7jK=(8h`s-5E#?i&JPnpplRk-C*\qTQK<sQ^l#F%NjW$*[$D286am0G]"Ym;%BRm@$oG64IUERc7%OW/!!PjWEjmN;(blU-bJG($P`:ZhoBo6ETI1TBPTS.DgJo6GjT2K"kaB!oSHq&DiS?-['fcLVqLR2qmEkCGUI,FuGdUMs&QnVieC%/R02AUGjIkf]D-R+:rA@2TYD.RX5a+O(Z,R=;R%)L:8/#ZT'&Q@iC;9BG"\#qouQ43c[>na0Q$HGXc:&CEO0LSgjZ%ZB+X&G2PKS%(Qa\j]U-0E-r`BT#=O,FQNJ-8Mb8PdFAo'e`DIXE64RZc6!s'-',lk_,XAj\d<HLL,t_,9L6YBlLJ*iAM5b-pKB=V25-+(@Fr`Bb%klASSKi=mj3YZ5FkB#?Co:0,P5$?8s,?"%,9.uL;e\6W)X!u?Bc.Z<<*n#-+]G2gWF=]mk0J*^k$sJO0WPobM?frqaCMOnRXNf[a%Bhl.lF$@$(m-]QLd7$/G>+!X\7Q*8ZONmjEp^/D5MD8(!$Nmcj<lmrN[B!FY(089P:+$'?_GG&+4g-ZGDaltRI4;I+s%J%q<#&K6%6k?ho:JeDPj@.P`Np0WZjedc0]h[$fB:c;pJB9ed4mZS3h.E:2h;?OW5N.%]'8B;@c-:]`^P+u8-QIa+o.dr>ouJB)$#&r%6Vtm;%;C-T=AV/hKSikTO_"4R7[<&b.m@>AeBIT7a6%A[TZKJ73B[fpXQ!#d`m+`^qR0cRIc%==Tk;#q.O=P6QMuY=4e^B"Od*n/ILTF;S%X_Q5e[,]l4[Lj9"<,O?-+[@SJ*h5S)U0P1:mE\'W-tdi%XtJ#M=,9$Lm&['s!YKh\S_33Hpggr2/HSZ8c5hkmj\>Qp9(_Y8&Uce*%>1E@6NLN0XqKPhm5,b/9c-&O#T[9!\>h@K^ZDTQcER@jDl/SHd!BAHV0AE9^"Pq^pb7joGK+W+@L%nYRS[*q5"&L4Oa;#,VApt\\%7=b_g_2(8a"=J=b7aW)'QHHR&oP*qWS]4SNU(??"e,h'eTB>-bab;[Hq'H(RI6;&A$4dKk#=\!Y].dMB7sk,0M*A_4qSQtj2(T$Z%#EV\lj7tNbbh7*9-D""S;4*%"ZU2P#=[=#2H0Pqb:H')=B8Y>%\\Q0NoP#qnRXGTrMio]Kki3g2qKPhm51FAao6dKl=E^8u+#G/2%NSR851QAV.M!!_/A,.YmOaM\X:<k+,A3M(:'9WmA]db1cmapsi[%>Y'l6.DJX<?=p:i9,Zk90R#WBnFA$-<G1Ak+1N2tHCR-54R8%Kks*D0&eX250,6MAWM$m:Cbe.%hD4bQ*7!9jC<,"KBI<[M"UT_\Z/`?nU-Ga,kV_)/2[&*'5'F:4J*?6SduRMgFJG[lHn$;j\0n_%W6(!d.Qeg<khT^lnAg)=WB3TA=Wq5MGYi0<=.qM;XSHrfjtg$KpPKlI"f)=+WTZoQT+r!iN<_nMEg[6aB,tBRqD9!k9L(i<D!.:L%/(B2>oqC1-M$.P0=]<q!rK_FTWam@5q@(L",!-,;.,!o"Gm3?P[t&Qfn+.1bd[)sO:9\D!W(X_EIH#>>OHhjmWS>Y?l@7A[SdH,h%Y)fcl9)Gc"64iXJ&oUg0e2!AW)H:"1`qAk%[WJiYR[H[QaGF'EAmSO<ZZaW>cp18T)M&!Tc-Zcm\E?/.>qK/j]Be#<nKGt\4.2jq%hKEY</=#UCMhpE/H,efC8^Y9bXq9DeG;CoAo._9m*9(E!PQQ+iip(-u)59!J[=eD-\gu,b'cKir23VE*2[9N#[DSmU<+0b,[cr2J%XPa)Ah?D>KGPn!mUWWHb<s7qs,u>6?)T=AYRnL$nHAL.iodp^A1/#DLb@:5m65Fl7isQ]DX3iGT>?fMZ$]"i/Caof,35!Z3/J!^X%(lD.N?.!cAGZDloNs9g<"$*s'T/h\bq=C![r68#pKZ#UW*Y#?P0;3um=[TJB_^<TVTUpJ.Z"eE0bCO12`=m&D[i!a2hNb)P4rs[a%-R*37N?8As\JaI$SY4NYEgpo*CTE<noFhJ5M`]Z_\JmGMhGOp0is/e`GjA(7m0(64MuG=Z(oT/CY"48V%toR"dqqH=e=N#^-FEDr%J?s-ZgMFZ.6dZ,Xomt*tNd-o$e)P-J73?3TL2e.#1'-)he-JYLdD6?k5c@IXZe\:koYLZ!bH`7(M7icP^rdUnb:I$ZiU*QL5'Q6$%\u,=Yc6Bfqb8SD>r<M:t[PUtG@I][=EO*_!VQL3[$OI&/$)no`[R_`41)'tm$/`rV`6HUJ6?&e(nZ5?#FPl4(fDZ*!CVZ1hVOb7b%[A-W&j&G62k4)7hbE?bOTl\FC5`+<\#*]Z;ir6d`]3QUh$OK^Y_'QrC!p).Wp`<r:!]8D*R9emHO:tJ"MM"AU&[spT\>4b97V<6W%18An11ff+fpWOD7PZL-0%"YG-j/qgU/9G9md2NT&N&A8A&$YI@4c_P%]Z!oV?Y"i_cUkP^+tp$ZGeeX0n,\="$Ie:E&]$5X;CfN[%V%C,1D`KH7L?]=J??46ci_l]p_Lk&nJkFt$&9ml+6%4Jbc23%P+:2&>9uU5=@7h^-Q)q#\d_X^4k:^iXJ\a^5l''`.<fejtJG:.X%+:hErs26Mp\8-[G0,&k'&>4qC^La"BMBB><5qI3EJQu_*WFm5>pMZ&b9aC+W#]WIOla>aUmGGK>@CQn(e,#Hrb`%TW'&s*Cg$VI6%XS7dAKj->NUkU3r,'k?^9]tSLW%bO2"/:"jIJHTI5koY+kig4[Lm[f3>]ni`2/WXbEg,?<O=p)R:RT(pI1n">,@)mn++fpB$\1sT%,3WdMoFoT"N\I[WL@Pmt<GH8C4TqM_W*;Q5Fq%8?=U$$9J'R]=!HA8W\u(WXfu&s_Oa<cfF9C[j2k[;"rS,.JYEM5M:>3oH#r4Ij%+g#U:OXTV&3Dn.K#3D+'9X#SY8H=)S5?&SGApO<Dde08Md^Rq=.'k^^X9*nr7tK/Vr\`+Mob[>P5r?)j1(iH\b'"KChNYD,+d*_q%K4jTFSMG@qp=($GG'^tP(VK:@1/in_!mkW+,1Mm;XgS?E&Ju&%n,0=5Vq\`Ei!l$Zm(27!MiWRbA/cQ[gTsKRSWl<gOhFS29K*50%"%qpeXh3HtO^BbkWaKJ'!uaht&>*%r@Vj&9kRJJ;_MOV]6o.urpP8.3b?+dNcMW1rc_'Vgb(e!`MS`#R"4**?N7KXYMu8ID"*ZX'%",bhce!XP;6p5'>@cWu4E(c\<Y,LlaGQ/uEpZc)`Y3[;+P\a(*9gP_UJU<A0a^YsW(Hk`BN[H]_B,K!,nl`Od%_sE`&r4Cm6N\=&%$@OtO^sQqZgW!cQLnOD".3<+M\q(.W"(3l=LQ?3&eG1MOU->^kR3_T,"ZLn5PB%%"[VU8LON)tlhK6BUB,j(Y5o0:C=^so?`hjlq%$Usm`d%$F4`+7Q3@IcCM8KaCe,$@T2KcJ37ba*ALEepV;WKb*cGcaWm1okH=bolKa[/*9LIJ1t,[=EdRi/WX62;LWCn$.Id\OD4Y%`s#4-m$B-.pJ;mKZb?("*I,Ori8iXecblI[?31d,=T"Cp4=2I6SkIJbFk2"f)r(%.kGM&r&NEZf#?"nfKjZ;!L^7;A.gjG"KKc_7%f*K+7b-.(LV^0!^;p`cQgAi8T$Cr<lWj4iDomJaVXJ)\C28adRF?/A0DCUYK*)sI0&<LcsW_YY]I`S>/XrosVm;eC@!FMilf2NKA%D<011Q=.7Ka@`"reSaM]D)c=sm#6n$!SF4Lk;=m]*tcS,gFU)'lUW?-(4BE>M2UjrQ]91O-&i"_%2r<W%YFD\Dg\3Q:rWI&S*^7\%0q.fYZ_05Wb+dJ&EgQDT,o[+IF>'@#&7:>[*K%VW0PG9("No[0;A!Mj_/`.gLm.7%Xlkd0:7X%,Dc:7/h#4)-MY3'H^4C@\MEXO`%+X\;aR]d"+6"2k#A50s?g'N[4@O?iPY4mt]h[)uAZk/Kni0c]>7L^[\(Ok?_OMhI4m]TK>[C];Q>6\Ae1J%e6Ms]C--06;k.qC5Q%TG.$6@N4J>+NCb^'<JJ]5O-j8&;WXZ!"s3NKs%D_e!qWHI'8V<gI$sm\%24GkGnh7:cWBKJKaP(l.+5XLS0T^+"ecPWQ+LB!N/2B%(BsS>jC9lb'W2[>E[\b`FK]0!Ue'M`mXa-,4(u"9"_GQqFCl.TS)Dm)W+K(&&jKOET4X5.1M`sk"KE=sF3[`Q:j[25eHn)^]8)L(%XpigJDM+K`2+Fg\4B2+S(OYL6m4$OqgZjdVe/-s(8"cIVf$T8Gqtti/h&I9>-o$R_7N@7T$]$qR)Hh]<X=(au)gI7Vn$QgnDWmGc%\'`mA0:>O*$H8>9@b1kNCh@9L_^s7W+gZ&BS[Dj;G1KQTr>PId]::KaA9m6%h<ArI!4\um/(s2nKm)R0T\f#L1Qt*)c"gnqBq`t'%],JT.@=^2gK+%rIFQ.XR+FKX%.V7jV].CFtVOiT(E$OG2'%epX7J2I%H/JrNPgbRM!n`*?P$H%2C=tnJ>&]X@4Y5ij0Lr[3#T;'W%KBA,[TUXrCX+0"MkSG'a/,<`)Jkp,_X5lI\a:;iTK19(RbpG3?oUupb;PfrpbPOfcjVCq$B'#>i4sD\%E'+fj&>PfV3!+]0'VM##%GniZ$T\M[^l*;<J41jLT&?HH<1*7JGE.AWIkRe+!HftBNi6G-Yjlpaj9,%fEJ.b@r<9Td>>G<_]937<`pTOrE4iP_ZWK$oV;>7WJ%r*.MJ.;C5T["'>\NcA^*JBJ2*)c56tF:]LE*s+u4S!g)tFrEa+\H3D8MqJq0(:5#0]52W1V?)MJJin@(KS(aeg0`bC1U`tH4_?IH%l:oH-J[Zgb>bGiu[fpa9Qi("n!j:_E7IC5<27\d9>A/el]\&khWSb_)i^XMrm.#oc%CAbNpd9'-Cfo-MAJ!@X]k41XZ\!c(^E0KC%CC*Nu:1.^mGWZX'G+2\7#ss+'&#18I,*@99maK^h)MDD4XcQ)R0Us<Gp_A>mK@=^!n8ZYN(o/crYI\ufc4QPfChc:W7129.34RB7%UNp_F*kAH<9](1bND@'W;\VaO;'%4-SJ"&T*<^-fUi@Gs"aAr2+tp>)lrn8t*E%[u/jqeZZkoNUQJ"Yq'g[PeJ(0.8-]GLX6JWZ+%K*O*5]*"_7=/c8WWYGZE\*Z\'n:pk=Vrpa/>AmMuB`%=]h;GCX^Cn.YH1+]cn5*fSp#8Ion5-[0l+Noui0>lKoAu!<huUu)pD8')%,St\HP_k2?EnZid<g_^Pc9l7b]e/K'RT"Q>12Eo>c20S;ILPQ@*Pf3"l2H]hfM4[e=&W,[(>S?HW)Il)"!q7(pB+EHpQ44gXWTj8%4<TXbUA&j[<*-ijhk>''LL]2uTt(f-<q#JWM.<OAh`5B,hg&$L`@+%sO3B0kG1X)nWALqa5+CekJm5"o=Lu6L'R++?aSjr2U2U>\%dBDSVIohH'*CWl!>:i)Q_;*2j29;5e-Fc@CL!=@UA]sE4SVQS.c@Jpk!4\q'D?NZjo:I+VG(#-l9*i@ZIHSHB3?42A'&G?&X$gr2%FO$J1oD6abEd\0`W)\-q#=r/HRb)a3H/D7sdNJao>2ST@cIHi>h]3-3T*#?4^<-@,[Rl"\*sr:P`@TRZZMo-jXFr)pjuf9*4t5hj%2;;Xb(Pn<BFJbJMgcT,D:=*`7F)u1XC$W1mLn`DXC!uLDRfms>km#5Q)&!Wm7bO8gZYH9aGR8pA)lGEci4T-D@l3"l,bh+R1B7_U%IMt!B8t2_5UC\ZBkr`G!TH[k<V@0C25=mQ2)$#BhDonH^(p1dd&",.^"gs[n'05Rm6+;1&k==I[hlN:X+TL]Zi4:37WN(&ir/HiZ%EOO:s$8Kr&5\*1Qcoc@skUK#V?48cDAjQ'VYd=Cm+l\Mb"q,Q]pCI\W)O>!4b=_^uDY.&<K;Lms6!q=$r;&e-eTkV)kNFJ`;O=>c%Xnk)2_L>DGTE1^<n<uN$l>3,sSn[);TV$JUHFIu#G#k<d>]E19&^cX#*\cs]O].11*`:heFA`fRs1V=)d+&aoIccr!R$a`N*YPmL%j6`O@B[fCObh<;cfBm:^>3-R'_6--g*\F$5$s*RtY,=Is0O8XL<*``#o\'Y7Sb&:6Q+$auD.=@d,kc)=:)6C%>oqeb;0U0A?^0%Y%;5)3)<X<(#G"(K?M%?"\7^#W_?+s8HrpZ$$U;$@=,=c]:kW%1pBbSqe1sH_\@\]Qs*sX9LTZ"u_aT=XT,dFD606Rh1?$iMjkT&*"%JqY;CO3J.83HbGF1BInh;k\c5n7F^dN[prZ1\6F:7I!-DT!>TbiYFV'JONWUJY,/lTaZni,Zb,'TQ_a\!^-h!>n)IXk)(=9+*+p+%jY0s36hQ6hBluEMM<dipQQhFgN,FjX<0Q8UQE2&YKLGHgn8YXMH*FVR%17n<"d)bSh'#ie@-NbAo`W3=m?O;&8(bAC.d\cIgbB<2%UBQlfX+7%hmgIDV-4S8\3[0.PZ*bku/hCL:Egr.FY8sQ2B]QVj$i//7lEgWBDI;d%ZOJ_"ZaST2]V&Z<`sI3Hm/P.ZfL'U6;s6Z2%,_@1niBW)D?Ul;]%/EGd<gi2'<nkjC+>&jC<=n]g`nBBm_pUkb7TZTVpsa%;e'3VMDJ*fLH'pTK[J0MX0gQaI@Ma=iL6?b/kg%EZ%E:)_@a3mBcmUs'jB[2G@g*hQKQPZBo/(Mt&Y&>-&3FQclF5j:'F&$i(]DK^?0[N9$bXFC=nk`tod^^e-pWp!WWh^"@T3u8COIHjm%e3TV8fhg!mh3>.dbo&7*AM`>IV'e'.3Z]cQmZ@`_0hN#+iO?pQnh>+2W7lT@fUuAb?a2is*:R\)-lmX"![o>-1+Mcendp2a1Uh@U%R2MHISt.:QG(lhLfRiOhAlJHjRBG<3[H0:i=6]pjG+C4A^(!eg,AL/fd"sV@Z*QK'=hf+*.,iH/BG)@L\?f`Lct:94=Wl:=[m34-%9?[:1+(rdaD!5_eAEW5CTe@Li=GMZ@+bt!D+sg?hI<>\P?ATZWFf)LGiL-0jW)3Im2jhmY!")a#H4oB="ISaCR#aB]aipg)niCV8%]g&%SnT@N_g9p_`iYG,>0CRR[I7"F4[3c#r,;f1aV&Q.1;DhBnRuilWT2(JSRAJaKC+cH,:#eh\8D7uPL8=DMPMFI;.N?=l@t3,`%hK\Ki\Tmt=M`:XN^:mT9hjnu9VgnZh`V4<,WHeiS%_oT!lh9/$o%VK?o%qnYs*jarSNHcD]n[\WoEc[N](,ef@JJ`bBoQH1!3LIW%a?Zrc^%M$2O5IMIq_K$iTA7$Vp5eWjp;MZFY.sbqdneirm,&W*!d`ngX4L^)E:N:KVYou'ds#0Q\$nl]n\[.!59-YO4T6;%\3'\:%j*trTs81(9mt4i6'L1N*O$A(RrpdGurQdpDGkp@$5AqA,iJZUL8dLGE*8S2Ib^`3m;G9Ck6Y'YnhES`>!j:HHE35CLhZT/:r:=:)%@Y^^)kd-.86jDNtRg,XEr!bGmY2nH@#X"LN392<e<pLetFJ3>@'$TTJg)G&q.T>!iAYt(.gP/F^lt#.P)>Y&Z_8>oN2nC\78^?Km%TkR**9Gp_Y=@@j]I$2qN5Z!1\S3#?umI0@F)-//IlkP,I#WJ=20G)hJ7U"iq7<T[q$moZIa^ge.!Z<WL[f^Y3]NPE,OA\W*Ga*22%QT>gb$D@gX;$(/+pE*p3(u9.n&6Khos'Qb=H`)]g'!uUO:+RQ_g_b[nnU+V7/?7j;<\bl=_SVt]W&`kX5V&C^p's\9CCV%j*(Xk@%%?7r99Q5V8%utiW&&a9lPTtmnW$E(9[5ksSOfXK[J4L1m!.HT6)h<6%F2CA55RAG?7PJAUK]lMO_=$(!Ld&)7Jl@\4$SGZ!"N/^8%\.M:<GE(nI[X_hGTZ_?R+ZFQYK6#H\cIT5-i?f5PBGkEnhJe`!3U5Ki>.s9uB0&S$MXrH=O("FZ\1_9BdHif&e@[\'aCZo@.PoIZ%)S&_B!^d;gDRfHG'7%f@YapEj$]5ZXjpI^-X!GKs;gD=c_-msPKN`;30^W;+=cX)qNJ/U2+s)jiK*8&+!k1s9_i@JaWF9i]d#;d(%dFI5Wh1A8[3&-cPq6'AP_+ph.\bk%N+smul=Z\kAok7a;K4%s<`W8FNI&tC,Zu'WKN6kp>s#4Jq+lQ0?FdEHL^#U%r0+3`Y32Fr5%s7f9]8caH$ln4FWY1WJ9%.k^K?$Qi"kn%`A&Fr_rf9R&,m!+479a"IU9(US4Gi!A6hN`VZkaJ%\?(t)toBuJM&0$3'@bQqPE(`<d%O8'n5L'f-RA]S-k2&Mnj<?/+r70t?IV]aSZ+pq#se5S$ANf<]Mp/W0],9*/?NQ!gn2"bN_UL"P(,_m63kF(bUM;Ato35ul<TG0&D%ki+[7i!NV_m0i'jKngLSN>uE60([g"%$QDeGOS]HU'Ct1_(>kqVs(td\R'7H:O^1giM)Ierh,nT>u)3$AgtC]>TXC9a+r=EC_:3h%D<4im*]XX.AisQ2dgt8AA+C4]!#?,d3AH3[S]ZC_R]7KZ<cT',TV[XO'Z(M/?'I4l#0\g])-C=)^riHQZ;akAbNZ*Jf*;b^DSTa0%H&gf-75@#l'lY^'*#7OQFF^p,Y>NTe6Yt&Eq<\bpkR<=V<]aMJlb7EsY(C:\>2jb744jjo>i2Pho>&@1;^$T9<1\]dNS_=+LhMr`%f)0\G]iJ7N,K".9df[rbZFA)\'(Z)V(4ictmIVM\4W>VqO,Q>JTm,,ldS:k,4m$4'(63KZD1aOSUK"LW+$a^"3#T@RjF%C->V"KR%a71&r"@Qa.$jUC-YfN;Y0(WN(q'cZZ7OZ-W(q#f;,'XZ,8g'l3&IpIVakH"+SG=2K`^+;:LaT_F35YSedsiEIL"]!4HP8bSJ8H81%Ghn2o4Re'nNF0r((Q&X[(FF<gbq'TSM%FiB:54kS;>#nS_HabclC+6cN\D6q@UCf@!HDYl?u!*B!1H;gRrq0H5mm<M;e9quQoQ$>%lY;fj=&%\SE.DB'(s:.<@#33bn:a<,4.??YHV!UO\s\-uW?pR)Z;a3"ViYXO<R,7>otbI`*.Iie(NoFel_X]oBqX'6]P@;TL[SOH%l"LL(rq`7Yq+<^5puLhOs%d<Hj/]Xr+91\GIoVd,JZ,]G<gTR7i"US/oIG-8rRu1=rVQiNigEZMs7>okg46jg&b!uOg47X5PLsGM%D2=Hk#HZJ0T2)FE9QX<Gdm9qa^C//fH"sa<*]FrMfsKJC-$COjXk"&]e]q-oeHY4cGW!mUg438ME3).'2GddQMCPH+m8*t@N]"`T%dqSte'&X.u>&/Z;CCN(b2.-_+$JD+Dl?kbT'\cH;88*ltJD1Z&.&^SoC1AH\;f"gb3"&Kd%AOFiQmno<%ZP%9_W-H>8<7SZE/JK8%D\W:<9sI-2;YWIVC^k?@m7a=5/M\O0RjkcHJlqPXD<Qhc3N(FtK^0o($rLdb-n#hCCt3;1EJgl,VR&`S$AM2)6Vr=s;Tut6e]Kq1%Bss]lAd"Q7)s@UWXaA;NN1HkH,/fp^)fjt_dnFNtl3p1ISk(UUTYi[.M_im!CPBVIRVHVo;f-.s<GdjYEC3I0%1nRd>BdY1V?R@F%::H4-OTG3pVVBB+<TVeS].'S2RGo,NON).I+m;aJ*b/Zf)e_uf@B"_A<gG5F1XXkcp#a)nFf=8RZuaT5Vr;(fL.&OI%2T;(4YmQ!%&?"L4<3!Tc,XFC1deG$7WOP<IA>ZM.?&u4On?>_k1%9uAAt"T=VCfuPVW&NR<8<m6<SW,f-4nYW<893PFIJcpf>iZ6;fMm@l<mGZ%MMiOMC7C)",5bqcR4>?_:;rd'<-^o>:jgiN5k:"]%Z8[+j2l0'lle9_UpuUS_:7.*/4#]](KE7\nPAhFqc;8#6Yt=bIX?TRf$q3q%&[2UMn.Q7T*]'hU\g:iIY$n?k@bAdWf9G&%$>i&[#@mT"+m*lO/7etTE[i\:4*i.*oLV`j?HE<n>,NN=`LWtrI@V6)+GEN!2]uQe%DLQ4NL^M%)">*7YVr>p#<bonCZt\.TX`aKB%A2mo=@RjX!N'HM5]54KP<HkH1n*;C@77D('PM:g*WBNFgdVF4a$Y'NgFD,\>>(`[%D$5[q7uh>mQESbR,D%gMfQL20D+c\(2WEibE@RGiCOf?#%FYg4_O/cdK074hg9'ZN<Fq46[h"u;h%AYRgX&#$S=FaAkog:X-qgpO%4q()Og8uMs]:FdX]8\&UU9Dt.G)P@91[)2M5N8]b*arr\WU=m3e\_3[a+fsUp.a"Q,9Eb8IF<4A6_&$U;lS>/F#'O[NH$p4X-T`d%7h>e[S4t'Rr(XN*3gaOFC204)9Vjf9bfPrLdtu=aWPWraiH\.&YraMb\jJT+<GZOM9sJi)`"^so8ekR"-0LK_qI$&sB>sT</+7lT%n?pU!q<6k4epd,a49'VOn]iMSI/:fD?Te8,puULfcQ7Q7`M]=k]_MEB:]C[@pdC>'^A[tJ?F]\.!QCNWRK~>%AI9_PrivateDataEnd